
RTOS_Hub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000429c  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  0000429c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020070  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020070  2**0
                  CONTENTS
  4 .bss          000062c4  20000070  0000430c  00020070  2**2
                  ALLOC
  5 .stack        00010004  20006334  0000a5d0  00020070  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY
  8 .debug_info   00026e54  00000000  00000000  000200f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003eca  00000000  00000000  00046f4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000fe3d  00000000  00000000  0004ae15  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000ea8  00000000  00000000  0005ac52  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001270  00000000  00000000  0005bafa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00033eba  00000000  00000000  0005cd6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00013c58  00000000  00000000  00090c24  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00128a01  00000000  00000000  000a487c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002fc8  00000000  00000000  001cd280  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	38 63 01 20 d5 02 00 00 d1 02 00 00 d1 02 00 00     8c. ............
      10:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      2c:	11 0e 00 00 d1 02 00 00 00 00 00 00 61 0e 00 00     ............a...
      3c:	75 0f 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     u...............
      4c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      5c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      6c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      7c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      8c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      9c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      ac:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      bc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      cc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      dc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      f4:	bd 07 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     104:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     114:	d1 02 00 00 61 0a 00 00 75 0a 00 00 89 0a 00 00     ....a...u.......
     124:	9d 0a 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     134:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     144:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     154:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     164:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     174:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     184:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     194:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1a4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1b4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1c4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1d4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1e4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1f4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     204:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     214:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     224:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     234:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     244:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     254:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000070 	.word	0x20000070
     280:	00000000 	.word	0x00000000
     284:	0000429c 	.word	0x0000429c

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000429c 	.word	0x0000429c
     2c4:	20000074 	.word	0x20000074
     2c8:	0000429c 	.word	0x0000429c
     2cc:	00000000 	.word	0x00000000

000002d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2d0:	e7fe      	b.n	2d0 <Dummy_Handler>
	...

000002d4 <Reset_Handler>:
{
     2d4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2d6:	4b15      	ldr	r3, [pc, #84]	; (32c <Reset_Handler+0x58>)
     2d8:	4a15      	ldr	r2, [pc, #84]	; (330 <Reset_Handler+0x5c>)
     2da:	429a      	cmp	r2, r3
     2dc:	d009      	beq.n	2f2 <Reset_Handler+0x1e>
     2de:	4b13      	ldr	r3, [pc, #76]	; (32c <Reset_Handler+0x58>)
     2e0:	4a13      	ldr	r2, [pc, #76]	; (330 <Reset_Handler+0x5c>)
     2e2:	e003      	b.n	2ec <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     2e4:	6811      	ldr	r1, [r2, #0]
     2e6:	6019      	str	r1, [r3, #0]
     2e8:	3304      	adds	r3, #4
     2ea:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     2ec:	4911      	ldr	r1, [pc, #68]	; (334 <Reset_Handler+0x60>)
     2ee:	428b      	cmp	r3, r1
     2f0:	d3f8      	bcc.n	2e4 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     2f2:	4b11      	ldr	r3, [pc, #68]	; (338 <Reset_Handler+0x64>)
     2f4:	e002      	b.n	2fc <Reset_Handler+0x28>
                *pDest++ = 0;
     2f6:	2200      	movs	r2, #0
     2f8:	601a      	str	r2, [r3, #0]
     2fa:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     2fc:	4a0f      	ldr	r2, [pc, #60]	; (33c <Reset_Handler+0x68>)
     2fe:	4293      	cmp	r3, r2
     300:	d3f9      	bcc.n	2f6 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     302:	4b0f      	ldr	r3, [pc, #60]	; (340 <Reset_Handler+0x6c>)
     304:	4a0f      	ldr	r2, [pc, #60]	; (344 <Reset_Handler+0x70>)
     306:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     30a:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     30c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     310:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     314:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     318:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     31c:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     320:	4b09      	ldr	r3, [pc, #36]	; (348 <Reset_Handler+0x74>)
     322:	4798      	blx	r3
        main();
     324:	4b09      	ldr	r3, [pc, #36]	; (34c <Reset_Handler+0x78>)
     326:	4798      	blx	r3
     328:	e7fe      	b.n	328 <Reset_Handler+0x54>
     32a:	bf00      	nop
     32c:	20000000 	.word	0x20000000
     330:	0000429c 	.word	0x0000429c
     334:	20000070 	.word	0x20000070
     338:	20000070 	.word	0x20000070
     33c:	20006334 	.word	0x20006334
     340:	e000ed00 	.word	0xe000ed00
     344:	00000000 	.word	0x00000000
     348:	00002e71 	.word	0x00002e71
     34c:	00000ab1 	.word	0x00000ab1

00000350 <MSG_OUT>:
void print_debug();
void msg_init(void);
///////////////////////////////////////////////////////////////////

void MSG_OUT(const char *msg)
{
     350:	b510      	push	{r4, lr}
     352:	4604      	mov	r4, r0
    stdio_io_write((uint8_t *)msg, strlen(msg));
     354:	4b03      	ldr	r3, [pc, #12]	; (364 <MSG_OUT+0x14>)
     356:	4798      	blx	r3
     358:	4601      	mov	r1, r0
     35a:	4620      	mov	r0, r4
     35c:	4b02      	ldr	r3, [pc, #8]	; (368 <MSG_OUT+0x18>)
     35e:	4798      	blx	r3
     360:	bd10      	pop	{r4, pc}
     362:	bf00      	nop
     364:	00003115 	.word	0x00003115
     368:	00000d2d 	.word	0x00000d2d

0000036c <DEBUG_MSG>:
}


void DEBUG_MSG(const char *fmt, ...)
{
     36c:	b40f      	push	{r0, r1, r2, r3}
     36e:	b510      	push	{r4, lr}
     370:	b082      	sub	sp, #8
    if(xSemaphoreTake(msg_mutex, ~0))
     372:	f04f 31ff 	mov.w	r1, #4294967295
     376:	4b2a      	ldr	r3, [pc, #168]	; (420 <DEBUG_MSG+0xb4>)
     378:	6818      	ldr	r0, [r3, #0]
     37a:	4b2a      	ldr	r3, [pc, #168]	; (424 <DEBUG_MSG+0xb8>)
     37c:	4798      	blx	r3
     37e:	b920      	cbnz	r0, 38a <DEBUG_MSG+0x1e>
            MSG_OUT("Missing Count Over \r\n");
        }
		//print_debug();
        xSemaphoreGive(msg_mutex);
    }
}
     380:	b002      	add	sp, #8
     382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     386:	b004      	add	sp, #16
     388:	4770      	bx	lr
        va_start(args,fmt);
     38a:	ab05      	add	r3, sp, #20
     38c:	9301      	str	r3, [sp, #4]
        memset(debug, 0x00, MAX_LENGTH);
     38e:	4c26      	ldr	r4, [pc, #152]	; (428 <DEBUG_MSG+0xbc>)
     390:	2232      	movs	r2, #50	; 0x32
     392:	2100      	movs	r1, #0
     394:	4620      	mov	r0, r4
     396:	4b25      	ldr	r3, [pc, #148]	; (42c <DEBUG_MSG+0xc0>)
     398:	4798      	blx	r3
        vsprintf(debug, fmt, args);
     39a:	9a01      	ldr	r2, [sp, #4]
     39c:	9904      	ldr	r1, [sp, #16]
     39e:	4620      	mov	r0, r4
     3a0:	4b23      	ldr	r3, [pc, #140]	; (430 <DEBUG_MSG+0xc4>)
     3a2:	4798      	blx	r3
        if(msg.total_cnt<MAX_MSG_Q){
     3a4:	4b23      	ldr	r3, [pc, #140]	; (434 <DEBUG_MSG+0xc8>)
     3a6:	881b      	ldrh	r3, [r3, #0]
     3a8:	2b63      	cmp	r3, #99	; 0x63
     3aa:	d82c      	bhi.n	406 <DEBUG_MSG+0x9a>
            uint16_t size = strlen(debug);
     3ac:	4620      	mov	r0, r4
     3ae:	4b22      	ldr	r3, [pc, #136]	; (438 <DEBUG_MSG+0xcc>)
     3b0:	4798      	blx	r3
     3b2:	b282      	uxth	r2, r0
            if(size >MAX_LENGTH){size = MAX_LENGTH;}
     3b4:	2a32      	cmp	r2, #50	; 0x32
     3b6:	d900      	bls.n	3ba <DEBUG_MSG+0x4e>
     3b8:	2232      	movs	r2, #50	; 0x32
            memcpy(&msg.content[msg.idx].buf, debug, size);
     3ba:	4c1e      	ldr	r4, [pc, #120]	; (434 <DEBUG_MSG+0xc8>)
     3bc:	8860      	ldrh	r0, [r4, #2]
     3be:	2334      	movs	r3, #52	; 0x34
     3c0:	fb03 f300 	mul.w	r3, r3, r0
     3c4:	3308      	adds	r3, #8
     3c6:	4423      	add	r3, r4
     3c8:	4917      	ldr	r1, [pc, #92]	; (428 <DEBUG_MSG+0xbc>)
     3ca:	1d98      	adds	r0, r3, #6
     3cc:	4b1b      	ldr	r3, [pc, #108]	; (43c <DEBUG_MSG+0xd0>)
     3ce:	4798      	blx	r3
            msg.total_cnt++;
     3d0:	8823      	ldrh	r3, [r4, #0]
     3d2:	3301      	adds	r3, #1
     3d4:	8023      	strh	r3, [r4, #0]
            msg.idx =  (msg.idx+1)%MAX_MSG_Q;
     3d6:	8862      	ldrh	r2, [r4, #2]
     3d8:	3201      	adds	r2, #1
     3da:	4919      	ldr	r1, [pc, #100]	; (440 <DEBUG_MSG+0xd4>)
     3dc:	fb81 3102 	smull	r3, r1, r1, r2
     3e0:	17d3      	asrs	r3, r2, #31
     3e2:	ebc3 1361 	rsb	r3, r3, r1, asr #5
     3e6:	2164      	movs	r1, #100	; 0x64
     3e8:	fb01 2313 	mls	r3, r1, r3, r2
     3ec:	8063      	strh	r3, [r4, #2]
        if(msg.MissingCnt > 100){
     3ee:	4b11      	ldr	r3, [pc, #68]	; (434 <DEBUG_MSG+0xc8>)
     3f0:	689b      	ldr	r3, [r3, #8]
     3f2:	2b64      	cmp	r3, #100	; 0x64
     3f4:	d80c      	bhi.n	410 <DEBUG_MSG+0xa4>
        xSemaphoreGive(msg_mutex);
     3f6:	2300      	movs	r3, #0
     3f8:	461a      	mov	r2, r3
     3fa:	4619      	mov	r1, r3
     3fc:	4808      	ldr	r0, [pc, #32]	; (420 <DEBUG_MSG+0xb4>)
     3fe:	6800      	ldr	r0, [r0, #0]
     400:	4c10      	ldr	r4, [pc, #64]	; (444 <DEBUG_MSG+0xd8>)
     402:	47a0      	blx	r4
}
     404:	e7bc      	b.n	380 <DEBUG_MSG+0x14>
            msg.MissingCnt++;
     406:	4a0b      	ldr	r2, [pc, #44]	; (434 <DEBUG_MSG+0xc8>)
     408:	6893      	ldr	r3, [r2, #8]
     40a:	3301      	adds	r3, #1
     40c:	6093      	str	r3, [r2, #8]
     40e:	e7ee      	b.n	3ee <DEBUG_MSG+0x82>
            msg.MissingCnt = 0;
     410:	2200      	movs	r2, #0
     412:	4b08      	ldr	r3, [pc, #32]	; (434 <DEBUG_MSG+0xc8>)
     414:	609a      	str	r2, [r3, #8]
            MSG_OUT("Missing Count Over \r\n");
     416:	480c      	ldr	r0, [pc, #48]	; (448 <DEBUG_MSG+0xdc>)
     418:	4b0c      	ldr	r3, [pc, #48]	; (44c <DEBUG_MSG+0xe0>)
     41a:	4798      	blx	r3
     41c:	e7eb      	b.n	3f6 <DEBUG_MSG+0x8a>
     41e:	bf00      	nop
     420:	2000008c 	.word	0x2000008c
     424:	00001aa9 	.word	0x00001aa9
     428:	200062b0 	.word	0x200062b0
     42c:	00002ecf 	.word	0x00002ecf
     430:	00003155 	.word	0x00003155
     434:	20004e54 	.word	0x20004e54
     438:	00003115 	.word	0x00003115
     43c:	00002eb9 	.word	0x00002eb9
     440:	51eb851f 	.word	0x51eb851f
     444:	000016fd 	.word	0x000016fd
     448:	0000408c 	.word	0x0000408c
     44c:	00000351 	.word	0x00000351

00000450 <print_debug>:

void print_debug()
{
     450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint16_t cnt = msg.total_cnt;
     452:	4b15      	ldr	r3, [pc, #84]	; (4a8 <print_debug+0x58>)
     454:	881f      	ldrh	r7, [r3, #0]
    for(int i=0; i<cnt; i++)
     456:	2600      	movs	r6, #0
     458:	e022      	b.n	4a0 <print_debug+0x50>
    {
        MSG_OUT((char *)msg.content[msg.oidx].buf);
     45a:	4c13      	ldr	r4, [pc, #76]	; (4a8 <print_debug+0x58>)
     45c:	88a0      	ldrh	r0, [r4, #4]
     45e:	2534      	movs	r5, #52	; 0x34
     460:	fb05 f000 	mul.w	r0, r5, r0
     464:	3008      	adds	r0, #8
     466:	4420      	add	r0, r4
     468:	3006      	adds	r0, #6
     46a:	4b10      	ldr	r3, [pc, #64]	; (4ac <print_debug+0x5c>)
     46c:	4798      	blx	r3
        memset((char *)msg.content[msg.oidx].buf, 0x00, MAX_LENGTH);
     46e:	88a0      	ldrh	r0, [r4, #4]
     470:	fb05 f000 	mul.w	r0, r5, r0
     474:	3008      	adds	r0, #8
     476:	4420      	add	r0, r4
     478:	2232      	movs	r2, #50	; 0x32
     47a:	2100      	movs	r1, #0
     47c:	3006      	adds	r0, #6
     47e:	4b0c      	ldr	r3, [pc, #48]	; (4b0 <print_debug+0x60>)
     480:	4798      	blx	r3
        msg.oidx++;
     482:	88a3      	ldrh	r3, [r4, #4]
     484:	3301      	adds	r3, #1
     486:	b29a      	uxth	r2, r3
        msg.oidx = (msg.oidx%MAX_MSG_Q);
     488:	4b0a      	ldr	r3, [pc, #40]	; (4b4 <print_debug+0x64>)
     48a:	fba3 1302 	umull	r1, r3, r3, r2
     48e:	095b      	lsrs	r3, r3, #5
     490:	2164      	movs	r1, #100	; 0x64
     492:	fb01 2313 	mls	r3, r1, r3, r2
     496:	80a3      	strh	r3, [r4, #4]
        msg.total_cnt--;
     498:	8823      	ldrh	r3, [r4, #0]
     49a:	3b01      	subs	r3, #1
     49c:	8023      	strh	r3, [r4, #0]
    for(int i=0; i<cnt; i++)
     49e:	3601      	adds	r6, #1
     4a0:	42be      	cmp	r6, r7
     4a2:	dbda      	blt.n	45a <print_debug+0xa>
    }
}
     4a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     4a6:	bf00      	nop
     4a8:	20004e54 	.word	0x20004e54
     4ac:	00000351 	.word	0x00000351
     4b0:	00002ecf 	.word	0x00002ecf
     4b4:	51eb851f 	.word	0x51eb851f

000004b8 <msg_init>:

void msg_init(void)
{
     4b8:	b508      	push	{r3, lr}
    msg_mutex = xSemaphoreCreateMutex();
     4ba:	2001      	movs	r0, #1
     4bc:	4b0a      	ldr	r3, [pc, #40]	; (4e8 <msg_init+0x30>)
     4be:	4798      	blx	r3
     4c0:	4b0a      	ldr	r3, [pc, #40]	; (4ec <msg_init+0x34>)
     4c2:	6018      	str	r0, [r3, #0]
    msg.idx = 0;
     4c4:	4a0a      	ldr	r2, [pc, #40]	; (4f0 <msg_init+0x38>)
     4c6:	2300      	movs	r3, #0
     4c8:	8053      	strh	r3, [r2, #2]
    msg.oidx = 0;
     4ca:	8093      	strh	r3, [r2, #4]
    msg.MissingCnt = 0;
     4cc:	6093      	str	r3, [r2, #8]
    msg.total_cnt = 0;
     4ce:	8013      	strh	r3, [r2, #0]
    for(int i=0; i<MAX_MSG_Q; i++)
     4d0:	e006      	b.n	4e0 <msg_init+0x28>
    {
        msg.content[i].size = 0;        
     4d2:	2234      	movs	r2, #52	; 0x34
     4d4:	4906      	ldr	r1, [pc, #24]	; (4f0 <msg_init+0x38>)
     4d6:	fb02 1203 	mla	r2, r2, r3, r1
     4da:	2100      	movs	r1, #0
     4dc:	8191      	strh	r1, [r2, #12]
    for(int i=0; i<MAX_MSG_Q; i++)
     4de:	3301      	adds	r3, #1
     4e0:	2b63      	cmp	r3, #99	; 0x63
     4e2:	ddf6      	ble.n	4d2 <msg_init+0x1a>
    }
}
     4e4:	bd08      	pop	{r3, pc}
     4e6:	bf00      	nop
     4e8:	000018fd 	.word	0x000018fd
     4ec:	2000008c 	.word	0x2000008c
     4f0:	20004e54 	.word	0x20004e54

000004f4 <diag_task>:

void diag_task(void *parameters)
{
     4f4:	b508      	push	{r3, lr}
    (void) parameters;

    for(;;)
    {   
		//printf("diag\r\n");
        if(xSemaphoreTake(msg_mutex, ~0))
     4f6:	f04f 31ff 	mov.w	r1, #4294967295
     4fa:	4b08      	ldr	r3, [pc, #32]	; (51c <diag_task+0x28>)
     4fc:	6818      	ldr	r0, [r3, #0]
     4fe:	4b08      	ldr	r3, [pc, #32]	; (520 <diag_task+0x2c>)
     500:	4798      	blx	r3
     502:	2800      	cmp	r0, #0
     504:	d0f7      	beq.n	4f6 <diag_task+0x2>
		{
            print_debug();
     506:	4b07      	ldr	r3, [pc, #28]	; (524 <diag_task+0x30>)
     508:	4798      	blx	r3
            xSemaphoreGive(msg_mutex);
     50a:	2300      	movs	r3, #0
     50c:	461a      	mov	r2, r3
     50e:	4619      	mov	r1, r3
     510:	4802      	ldr	r0, [pc, #8]	; (51c <diag_task+0x28>)
     512:	6800      	ldr	r0, [r0, #0]
     514:	4c04      	ldr	r4, [pc, #16]	; (528 <diag_task+0x34>)
     516:	47a0      	blx	r4
     518:	e7ed      	b.n	4f6 <diag_task+0x2>
     51a:	bf00      	nop
     51c:	2000008c 	.word	0x2000008c
     520:	00001aa9 	.word	0x00001aa9
     524:	00000451 	.word	0x00000451
     528:	000016fd 	.word	0x000016fd

0000052c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     52c:	b570      	push	{r4, r5, r6, lr}
     52e:	460d      	mov	r5, r1
     530:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     532:	4604      	mov	r4, r0
     534:	b168      	cbz	r0, 552 <io_write+0x26>
     536:	b151      	cbz	r1, 54e <io_write+0x22>
     538:	2001      	movs	r0, #1
     53a:	2234      	movs	r2, #52	; 0x34
     53c:	4906      	ldr	r1, [pc, #24]	; (558 <io_write+0x2c>)
     53e:	4b07      	ldr	r3, [pc, #28]	; (55c <io_write+0x30>)
     540:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     542:	6823      	ldr	r3, [r4, #0]
     544:	4632      	mov	r2, r6
     546:	4629      	mov	r1, r5
     548:	4620      	mov	r0, r4
     54a:	4798      	blx	r3
}
     54c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     54e:	2000      	movs	r0, #0
     550:	e7f3      	b.n	53a <io_write+0xe>
     552:	2000      	movs	r0, #0
     554:	e7f1      	b.n	53a <io_write+0xe>
     556:	bf00      	nop
     558:	000040a4 	.word	0x000040a4
     55c:	000006d9 	.word	0x000006d9

00000560 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     560:	b570      	push	{r4, r5, r6, lr}
     562:	460d      	mov	r5, r1
     564:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     566:	4604      	mov	r4, r0
     568:	b168      	cbz	r0, 586 <io_read+0x26>
     56a:	b151      	cbz	r1, 582 <io_read+0x22>
     56c:	2001      	movs	r0, #1
     56e:	223d      	movs	r2, #61	; 0x3d
     570:	4906      	ldr	r1, [pc, #24]	; (58c <io_read+0x2c>)
     572:	4b07      	ldr	r3, [pc, #28]	; (590 <io_read+0x30>)
     574:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     576:	6863      	ldr	r3, [r4, #4]
     578:	4632      	mov	r2, r6
     57a:	4629      	mov	r1, r5
     57c:	4620      	mov	r0, r4
     57e:	4798      	blx	r3
}
     580:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     582:	2000      	movs	r0, #0
     584:	e7f3      	b.n	56e <io_read+0xe>
     586:	2000      	movs	r0, #0
     588:	e7f1      	b.n	56e <io_read+0xe>
     58a:	bf00      	nop
     58c:	000040a4 	.word	0x000040a4
     590:	000006d9 	.word	0x000006d9

00000594 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     596:	460e      	mov	r6, r1
     598:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     59a:	4605      	mov	r5, r0
     59c:	b308      	cbz	r0, 5e2 <usart_sync_write+0x4e>
     59e:	b311      	cbz	r1, 5e6 <usart_sync_write+0x52>
     5a0:	bb1a      	cbnz	r2, 5ea <usart_sync_write+0x56>
     5a2:	2000      	movs	r0, #0
     5a4:	22f1      	movs	r2, #241	; 0xf1
     5a6:	4912      	ldr	r1, [pc, #72]	; (5f0 <usart_sync_write+0x5c>)
     5a8:	4b12      	ldr	r3, [pc, #72]	; (5f4 <usart_sync_write+0x60>)
     5aa:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     5ac:	f105 0408 	add.w	r4, r5, #8
     5b0:	4620      	mov	r0, r4
     5b2:	4b11      	ldr	r3, [pc, #68]	; (5f8 <usart_sync_write+0x64>)
     5b4:	4798      	blx	r3
     5b6:	2800      	cmp	r0, #0
     5b8:	d0f8      	beq.n	5ac <usart_sync_write+0x18>
     5ba:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     5bc:	5d71      	ldrb	r1, [r6, r5]
     5be:	4620      	mov	r0, r4
     5c0:	4b0e      	ldr	r3, [pc, #56]	; (5fc <usart_sync_write+0x68>)
     5c2:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
     5c4:	4620      	mov	r0, r4
     5c6:	4b0c      	ldr	r3, [pc, #48]	; (5f8 <usart_sync_write+0x64>)
     5c8:	4798      	blx	r3
     5ca:	2800      	cmp	r0, #0
     5cc:	d0fa      	beq.n	5c4 <usart_sync_write+0x30>
			;
	} while (++offset < length);
     5ce:	3501      	adds	r5, #1
     5d0:	42bd      	cmp	r5, r7
     5d2:	d3f3      	bcc.n	5bc <usart_sync_write+0x28>
	while (!_usart_sync_is_transmit_done(&descr->device))
     5d4:	4620      	mov	r0, r4
     5d6:	4b0a      	ldr	r3, [pc, #40]	; (600 <usart_sync_write+0x6c>)
     5d8:	4798      	blx	r3
     5da:	2800      	cmp	r0, #0
     5dc:	d0fa      	beq.n	5d4 <usart_sync_write+0x40>
		;
	return (int32_t)offset;
}
     5de:	4628      	mov	r0, r5
     5e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     5e2:	2000      	movs	r0, #0
     5e4:	e7de      	b.n	5a4 <usart_sync_write+0x10>
     5e6:	2000      	movs	r0, #0
     5e8:	e7dc      	b.n	5a4 <usart_sync_write+0x10>
     5ea:	2001      	movs	r0, #1
     5ec:	e7da      	b.n	5a4 <usart_sync_write+0x10>
     5ee:	bf00      	nop
     5f0:	000040b8 	.word	0x000040b8
     5f4:	000006d9 	.word	0x000006d9
     5f8:	00000a43 	.word	0x00000a43
     5fc:	00000a35 	.word	0x00000a35
     600:	00000a4d 	.word	0x00000a4d

00000604 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     608:	460f      	mov	r7, r1
     60a:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     60c:	4605      	mov	r5, r0
     60e:	b1c8      	cbz	r0, 644 <usart_sync_read+0x40>
     610:	b1d1      	cbz	r1, 648 <usart_sync_read+0x44>
     612:	b9da      	cbnz	r2, 64c <usart_sync_read+0x48>
     614:	2000      	movs	r0, #0
     616:	f44f 7286 	mov.w	r2, #268	; 0x10c
     61a:	490d      	ldr	r1, [pc, #52]	; (650 <usart_sync_read+0x4c>)
     61c:	4b0d      	ldr	r3, [pc, #52]	; (654 <usart_sync_read+0x50>)
     61e:	4798      	blx	r3
	uint32_t                      offset = 0;
     620:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     622:	f105 0408 	add.w	r4, r5, #8
     626:	4620      	mov	r0, r4
     628:	4b0b      	ldr	r3, [pc, #44]	; (658 <usart_sync_read+0x54>)
     62a:	4798      	blx	r3
     62c:	2800      	cmp	r0, #0
     62e:	d0f8      	beq.n	622 <usart_sync_read+0x1e>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     630:	4620      	mov	r0, r4
     632:	4b0a      	ldr	r3, [pc, #40]	; (65c <usart_sync_read+0x58>)
     634:	4798      	blx	r3
     636:	55b8      	strb	r0, [r7, r6]
	} while (++offset < length);
     638:	3601      	adds	r6, #1
     63a:	4546      	cmp	r6, r8
     63c:	d3f1      	bcc.n	622 <usart_sync_read+0x1e>

	return (int32_t)offset;
}
     63e:	4630      	mov	r0, r6
     640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
     644:	2000      	movs	r0, #0
     646:	e7e6      	b.n	616 <usart_sync_read+0x12>
     648:	2000      	movs	r0, #0
     64a:	e7e4      	b.n	616 <usart_sync_read+0x12>
     64c:	2001      	movs	r0, #1
     64e:	e7e2      	b.n	616 <usart_sync_read+0x12>
     650:	000040b8 	.word	0x000040b8
     654:	000006d9 	.word	0x000006d9
     658:	00000a57 	.word	0x00000a57
     65c:	00000a3b 	.word	0x00000a3b

00000660 <usart_sync_init>:
{
     660:	b538      	push	{r3, r4, r5, lr}
     662:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     664:	4604      	mov	r4, r0
     666:	b1a0      	cbz	r0, 692 <usart_sync_init+0x32>
     668:	b189      	cbz	r1, 68e <usart_sync_init+0x2e>
     66a:	2001      	movs	r0, #1
     66c:	2234      	movs	r2, #52	; 0x34
     66e:	490a      	ldr	r1, [pc, #40]	; (698 <usart_sync_init+0x38>)
     670:	4b0a      	ldr	r3, [pc, #40]	; (69c <usart_sync_init+0x3c>)
     672:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     674:	4629      	mov	r1, r5
     676:	f104 0008 	add.w	r0, r4, #8
     67a:	4b09      	ldr	r3, [pc, #36]	; (6a0 <usart_sync_init+0x40>)
     67c:	4798      	blx	r3
	if (init_status) {
     67e:	4603      	mov	r3, r0
     680:	b918      	cbnz	r0, 68a <usart_sync_init+0x2a>
	descr->io.read  = usart_sync_read;
     682:	4a08      	ldr	r2, [pc, #32]	; (6a4 <usart_sync_init+0x44>)
     684:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
     686:	4a08      	ldr	r2, [pc, #32]	; (6a8 <usart_sync_init+0x48>)
     688:	6022      	str	r2, [r4, #0]
}
     68a:	4618      	mov	r0, r3
     68c:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
     68e:	2000      	movs	r0, #0
     690:	e7ec      	b.n	66c <usart_sync_init+0xc>
     692:	2000      	movs	r0, #0
     694:	e7ea      	b.n	66c <usart_sync_init+0xc>
     696:	bf00      	nop
     698:	000040b8 	.word	0x000040b8
     69c:	000006d9 	.word	0x000006d9
     6a0:	000009f5 	.word	0x000009f5
     6a4:	00000605 	.word	0x00000605
     6a8:	00000595 	.word	0x00000595

000006ac <usart_sync_enable>:
{
     6ac:	b510      	push	{r4, lr}
	ASSERT(descr);
     6ae:	4604      	mov	r4, r0
     6b0:	2253      	movs	r2, #83	; 0x53
     6b2:	4906      	ldr	r1, [pc, #24]	; (6cc <usart_sync_enable+0x20>)
     6b4:	3000      	adds	r0, #0
     6b6:	bf18      	it	ne
     6b8:	2001      	movne	r0, #1
     6ba:	4b05      	ldr	r3, [pc, #20]	; (6d0 <usart_sync_enable+0x24>)
     6bc:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     6be:	f104 0008 	add.w	r0, r4, #8
     6c2:	4b04      	ldr	r3, [pc, #16]	; (6d4 <usart_sync_enable+0x28>)
     6c4:	4798      	blx	r3
}
     6c6:	2000      	movs	r0, #0
     6c8:	bd10      	pop	{r4, pc}
     6ca:	bf00      	nop
     6cc:	000040b8 	.word	0x000040b8
     6d0:	000006d9 	.word	0x000006d9
     6d4:	00000a21 	.word	0x00000a21

000006d8 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     6d8:	b900      	cbnz	r0, 6dc <assert+0x4>
		__asm("BKPT #0");
     6da:	be00      	bkpt	0x0000
     6dc:	4770      	bx	lr
	...

000006e0 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     6e0:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     6e2:	4a06      	ldr	r2, [pc, #24]	; (6fc <_sbrk+0x1c>)
     6e4:	6812      	ldr	r2, [r2, #0]
     6e6:	b122      	cbz	r2, 6f2 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     6e8:	4a04      	ldr	r2, [pc, #16]	; (6fc <_sbrk+0x1c>)
     6ea:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     6ec:	4403      	add	r3, r0
     6ee:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     6f0:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     6f2:	4903      	ldr	r1, [pc, #12]	; (700 <_sbrk+0x20>)
     6f4:	4a01      	ldr	r2, [pc, #4]	; (6fc <_sbrk+0x1c>)
     6f6:	6011      	str	r1, [r2, #0]
     6f8:	e7f6      	b.n	6e8 <_sbrk+0x8>
     6fa:	bf00      	nop
     6fc:	20000090 	.word	0x20000090
     700:	20016338 	.word	0x20016338

00000704 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     704:	f04f 30ff 	mov.w	r0, #4294967295
     708:	4770      	bx	lr

0000070a <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     70a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     70e:	604b      	str	r3, [r1, #4]

	return 0;
}
     710:	2000      	movs	r0, #0
     712:	4770      	bx	lr

00000714 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
     714:	2001      	movs	r0, #1
     716:	4770      	bx	lr

00000718 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     718:	2000      	movs	r0, #0
     71a:	4770      	bx	lr

0000071c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     71c:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     71e:	4a08      	ldr	r2, [pc, #32]	; (740 <_init_chip+0x24>)
     720:	8813      	ldrh	r3, [r2, #0]
     722:	b29b      	uxth	r3, r3
     724:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     726:	4b07      	ldr	r3, [pc, #28]	; (744 <_init_chip+0x28>)
     728:	4798      	blx	r3
	_oscctrl_init_sources();
     72a:	4b07      	ldr	r3, [pc, #28]	; (748 <_init_chip+0x2c>)
     72c:	4798      	blx	r3
	_mclk_init();
     72e:	4b07      	ldr	r3, [pc, #28]	; (74c <_init_chip+0x30>)
     730:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     732:	4b07      	ldr	r3, [pc, #28]	; (750 <_init_chip+0x34>)
     734:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     736:	f640 70ff 	movw	r0, #4095	; 0xfff
     73a:	4b06      	ldr	r3, [pc, #24]	; (754 <_init_chip+0x38>)
     73c:	4798      	blx	r3
     73e:	bd08      	pop	{r3, pc}
     740:	41004000 	.word	0x41004000
     744:	00000789 	.word	0x00000789
     748:	0000079d 	.word	0x0000079d
     74c:	0000077d 	.word	0x0000077d
     750:	000007b9 	.word	0x000007b9
     754:	00000759 	.word	0x00000759

00000758 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     758:	f010 0f01 	tst.w	r0, #1
     75c:	d008      	beq.n	770 <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENCTRL_reg(const void *const hw, uint8_t index, hri_gclk_genctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENCTRL[index].reg = data;
     75e:	4a05      	ldr	r2, [pc, #20]	; (774 <_gclk_init_generators_by_fref+0x1c>)
     760:	4b05      	ldr	r3, [pc, #20]	; (778 <_gclk_init_generators_by_fref+0x20>)
     762:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     764:	4b04      	ldr	r3, [pc, #16]	; (778 <_gclk_init_generators_by_fref+0x20>)
     766:	685a      	ldr	r2, [r3, #4]
     768:	f643 73fd 	movw	r3, #16381	; 0x3ffd
     76c:	421a      	tst	r2, r3
     76e:	d1f9      	bne.n	764 <_gclk_init_generators_by_fref+0xc>
     770:	4770      	bx	lr
     772:	bf00      	nop
     774:	00010101 	.word	0x00010101
     778:	40001c00 	.word	0x40001c00

0000077c <_mclk_init>:
}

static inline void hri_mclk_write_CPUDIV_reg(const void *const hw, hri_mclk_cpudiv_reg_t data)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->CPUDIV.reg = data;
     77c:	2201      	movs	r2, #1
     77e:	4b01      	ldr	r3, [pc, #4]	; (784 <_mclk_init+0x8>)
     780:	715a      	strb	r2, [r3, #5]
     782:	4770      	bx	lr
     784:	40000800 	.word	0x40000800

00000788 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     788:	4b03      	ldr	r3, [pc, #12]	; (798 <_osc32kctrl_init_sources+0x10>)
     78a:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     78c:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     790:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     792:	2200      	movs	r2, #0
     794:	741a      	strb	r2, [r3, #16]
     796:	4770      	bx	lr
     798:	40001400 	.word	0x40001400

0000079c <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
     79c:	4a04      	ldr	r2, [pc, #16]	; (7b0 <_oscctrl_init_sources+0x14>)
     79e:	4b05      	ldr	r3, [pc, #20]	; (7b4 <_oscctrl_init_sources+0x18>)
     7a0:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
     7a2:	4b04      	ldr	r3, [pc, #16]	; (7b4 <_oscctrl_init_sources+0x18>)
     7a4:	691b      	ldr	r3, [r3, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
     7a6:	f013 0f02 	tst.w	r3, #2
     7aa:	d0fa      	beq.n	7a2 <_oscctrl_init_sources+0x6>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
     7ac:	4770      	bx	lr
     7ae:	bf00      	nop
     7b0:	03002606 	.word	0x03002606
     7b4:	40001000 	.word	0x40001000

000007b8 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
     7b8:	4770      	bx	lr
	...

000007bc <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
     7bc:	b500      	push	{lr}
     7be:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
     7c0:	4b0d      	ldr	r3, [pc, #52]	; (7f8 <RAMECC_Handler+0x3c>)
     7c2:	789b      	ldrb	r3, [r3, #2]
     7c4:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
     7c6:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
     7c8:	9b01      	ldr	r3, [sp, #4]
     7ca:	f013 0f02 	tst.w	r3, #2
     7ce:	d006      	beq.n	7de <RAMECC_Handler+0x22>
     7d0:	4b0a      	ldr	r3, [pc, #40]	; (7fc <RAMECC_Handler+0x40>)
     7d2:	681b      	ldr	r3, [r3, #0]
     7d4:	b11b      	cbz	r3, 7de <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
     7d6:	4a08      	ldr	r2, [pc, #32]	; (7f8 <RAMECC_Handler+0x3c>)
     7d8:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     7da:	4798      	blx	r3
     7dc:	e009      	b.n	7f2 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
     7de:	9b01      	ldr	r3, [sp, #4]
     7e0:	f013 0f01 	tst.w	r3, #1
     7e4:	d005      	beq.n	7f2 <RAMECC_Handler+0x36>
     7e6:	4b05      	ldr	r3, [pc, #20]	; (7fc <RAMECC_Handler+0x40>)
     7e8:	685b      	ldr	r3, [r3, #4]
     7ea:	b113      	cbz	r3, 7f2 <RAMECC_Handler+0x36>
     7ec:	4a02      	ldr	r2, [pc, #8]	; (7f8 <RAMECC_Handler+0x3c>)
     7ee:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     7f0:	4798      	blx	r3
	} else {
		return;
	}
}
     7f2:	b003      	add	sp, #12
     7f4:	f85d fb04 	ldr.w	pc, [sp], #4
     7f8:	41020000 	.word	0x41020000
     7fc:	20006314 	.word	0x20006314

00000800 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
     800:	b470      	push	{r4, r5, r6}
     802:	b089      	sub	sp, #36	; 0x24
     804:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
     806:	466c      	mov	r4, sp
     808:	4d0c      	ldr	r5, [pc, #48]	; (83c <_sercom_get_hardware_index+0x3c>)
     80a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     80c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     80e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
     812:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     816:	2000      	movs	r0, #0
     818:	2807      	cmp	r0, #7
     81a:	d80a      	bhi.n	832 <_sercom_get_hardware_index+0x32>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     81c:	ab08      	add	r3, sp, #32
     81e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
     822:	f853 3c20 	ldr.w	r3, [r3, #-32]
     826:	42b3      	cmp	r3, r6
     828:	d001      	beq.n	82e <_sercom_get_hardware_index+0x2e>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     82a:	3001      	adds	r0, #1
     82c:	e7f4      	b.n	818 <_sercom_get_hardware_index+0x18>
			return i;
     82e:	b2c0      	uxtb	r0, r0
     830:	e000      	b.n	834 <_sercom_get_hardware_index+0x34>
		}
	}
	return 0;
     832:	2000      	movs	r0, #0
}
     834:	b009      	add	sp, #36	; 0x24
     836:	bc70      	pop	{r4, r5, r6}
     838:	4770      	bx	lr
     83a:	bf00      	nop
     83c:	000040d4 	.word	0x000040d4

00000840 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
     840:	b510      	push	{r4, lr}
	void *hw = device->hw;
     842:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     844:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
     846:	f013 0f01 	tst.w	r3, #1
     84a:	d003      	beq.n	854 <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
     84c:	7da3      	ldrb	r3, [r4, #22]
     84e:	f013 0f01 	tst.w	r3, #1
     852:	d112      	bne.n	87a <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     854:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
     856:	f013 0f02 	tst.w	r3, #2
     85a:	d003      	beq.n	864 <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
     85c:	7da3      	ldrb	r3, [r4, #22]
     85e:	f013 0f02 	tst.w	r3, #2
     862:	d10f      	bne.n	884 <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     864:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
     866:	f013 0f04 	tst.w	r3, #4
     86a:	d015      	beq.n	898 <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
     86c:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
     86e:	f003 0337 	and.w	r3, r3, #55	; 0x37
     872:	b163      	cbz	r3, 88e <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
     874:	23ff      	movs	r3, #255	; 0xff
     876:	8363      	strh	r3, [r4, #26]
     878:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
     87a:	2301      	movs	r3, #1
     87c:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
     87e:	6803      	ldr	r3, [r0, #0]
     880:	4798      	blx	r3
     882:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
     884:	2302      	movs	r3, #2
     886:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
     888:	6883      	ldr	r3, [r0, #8]
     88a:	4798      	blx	r3
     88c:	bd10      	pop	{r4, pc}
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
     88e:	6843      	ldr	r3, [r0, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
     890:	6aa1      	ldr	r1, [r4, #40]	; 0x28
     892:	b2c9      	uxtb	r1, r1
     894:	4798      	blx	r3
     896:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
     898:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
     89a:	09db      	lsrs	r3, r3, #7
     89c:	d100      	bne.n	8a0 <_sercom_usart_interrupt_handler+0x60>
     89e:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
     8a0:	2380      	movs	r3, #128	; 0x80
     8a2:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
     8a4:	68c3      	ldr	r3, [r0, #12]
     8a6:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
     8a8:	8b63      	ldrh	r3, [r4, #26]
     8aa:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
     8ac:	8363      	strh	r3, [r4, #26]
     8ae:	e7f6      	b.n	89e <_sercom_usart_interrupt_handler+0x5e>

000008b0 <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
     8b0:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     8b2:	4b0c      	ldr	r3, [pc, #48]	; (8e4 <_get_sercom_index+0x34>)
     8b4:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     8b6:	2300      	movs	r3, #0
     8b8:	b143      	cbz	r3, 8cc <_get_sercom_index+0x1c>
		if (_usarts[i].number == sercom_offset) {
			return i;
		}
	}

	ASSERT(false);
     8ba:	f240 226b 	movw	r2, #619	; 0x26b
     8be:	490a      	ldr	r1, [pc, #40]	; (8e8 <_get_sercom_index+0x38>)
     8c0:	2000      	movs	r0, #0
     8c2:	4b0a      	ldr	r3, [pc, #40]	; (8ec <_get_sercom_index+0x3c>)
     8c4:	4798      	blx	r3
	return 0;
     8c6:	2300      	movs	r3, #0
}
     8c8:	4618      	mov	r0, r3
     8ca:	bd08      	pop	{r3, pc}
		if (_usarts[i].number == sercom_offset) {
     8cc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
     8d0:	00d1      	lsls	r1, r2, #3
     8d2:	4a07      	ldr	r2, [pc, #28]	; (8f0 <_get_sercom_index+0x40>)
     8d4:	440a      	add	r2, r1
     8d6:	f892 2020 	ldrb.w	r2, [r2, #32]
     8da:	4290      	cmp	r0, r2
     8dc:	d0f4      	beq.n	8c8 <_get_sercom_index+0x18>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     8de:	3301      	adds	r3, #1
     8e0:	b2db      	uxtb	r3, r3
     8e2:	e7e9      	b.n	8b8 <_get_sercom_index+0x8>
     8e4:	00000801 	.word	0x00000801
     8e8:	00004148 	.word	0x00004148
     8ec:	000006d9 	.word	0x000006d9
     8f0:	000040d4 	.word	0x000040d4

000008f4 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
     8f4:	b538      	push	{r3, r4, r5, lr}
     8f6:	4604      	mov	r4, r0
	uint8_t i = _get_sercom_index(hw);
     8f8:	4b3c      	ldr	r3, [pc, #240]	; (9ec <_usart_init+0xf8>)
     8fa:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     8fc:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     8fe:	f013 0f01 	tst.w	r3, #1
     902:	d122      	bne.n	94a <_usart_init+0x56>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
     904:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     908:	00da      	lsls	r2, r3, #3
     90a:	4b39      	ldr	r3, [pc, #228]	; (9f0 <_usart_init+0xfc>)
     90c:	4413      	add	r3, r2
     90e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
     910:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     914:	69e3      	ldr	r3, [r4, #28]
     916:	f013 0f03 	tst.w	r3, #3
     91a:	d1fb      	bne.n	914 <_usart_init+0x20>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     91c:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     91e:	f013 0f02 	tst.w	r3, #2
     922:	d00b      	beq.n	93c <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     924:	6823      	ldr	r3, [r4, #0]
     926:	f023 0302 	bic.w	r3, r3, #2
     92a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     92c:	69e3      	ldr	r3, [r4, #28]
     92e:	f013 0f03 	tst.w	r3, #3
     932:	d1fb      	bne.n	92c <_usart_init+0x38>
     934:	69e3      	ldr	r3, [r4, #28]
     936:	f013 0f02 	tst.w	r3, #2
     93a:	d1fb      	bne.n	934 <_usart_init+0x40>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
     93c:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->USART.CTRLA.reg = data;
     940:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     942:	69e3      	ldr	r3, [r4, #28]
     944:	f013 0f03 	tst.w	r3, #3
     948:	d1fb      	bne.n	942 <_usart_init+0x4e>
     94a:	69e3      	ldr	r3, [r4, #28]
     94c:	f013 0f01 	tst.w	r3, #1
     950:	d1fb      	bne.n	94a <_usart_init+0x56>
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
     952:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     956:	00da      	lsls	r2, r3, #3
     958:	4b25      	ldr	r3, [pc, #148]	; (9f0 <_usart_init+0xfc>)
     95a:	4413      	add	r3, r2
     95c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
     95e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     960:	69e3      	ldr	r3, [r4, #28]
     962:	f013 0f03 	tst.w	r3, #3
     966:	d1fb      	bne.n	960 <_usart_init+0x6c>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
     968:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     96c:	00da      	lsls	r2, r3, #3
     96e:	4b20      	ldr	r3, [pc, #128]	; (9f0 <_usart_init+0xfc>)
     970:	4413      	add	r3, r2
     972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->USART.CTRLB.reg = data;
     974:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     976:	69e3      	ldr	r3, [r4, #28]
     978:	f013 0f1f 	tst.w	r3, #31
     97c:	d1fb      	bne.n	976 <_usart_init+0x82>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
     97e:	0042      	lsls	r2, r0, #1
     980:	4402      	add	r2, r0
     982:	00d1      	lsls	r1, r2, #3
     984:	4b1a      	ldr	r3, [pc, #104]	; (9f0 <_usart_init+0xfc>)
     986:	440b      	add	r3, r1
     988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	((Sercom *)hw)->USART.CTRLC.reg = data;
     98a:	60a2      	str	r2, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
     98c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     98e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
     992:	d10a      	bne.n	9aa <_usart_init+0xb6>
     994:	f413 4fc0 	tst.w	r3, #24576	; 0x6000
     998:	d107      	bne.n	9aa <_usart_init+0xb6>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
     99a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     99e:	00da      	lsls	r2, r3, #3
     9a0:	4b13      	ldr	r3, [pc, #76]	; (9f0 <_usart_init+0xfc>)
     9a2:	4413      	add	r3, r2
     9a4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Sercom *)hw)->USART.BAUD.reg = data;
     9a6:	81a3      	strh	r3, [r4, #12]
     9a8:	e00f      	b.n	9ca <_usart_init+0xd6>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
     9aa:	0042      	lsls	r2, r0, #1
     9ac:	4402      	add	r2, r0
     9ae:	00d1      	lsls	r1, r2, #3
     9b0:	4b0f      	ldr	r3, [pc, #60]	; (9f0 <_usart_init+0xfc>)
     9b2:	440b      	add	r3, r1
     9b4:	8e19      	ldrh	r1, [r3, #48]	; 0x30
     9b6:	89a2      	ldrh	r2, [r4, #12]
     9b8:	f361 020c 	bfi	r2, r1, #0, #13
     9bc:	81a2      	strh	r2, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
     9be:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
     9c2:	89a3      	ldrh	r3, [r4, #12]
     9c4:	f362 334f 	bfi	r3, r2, #13, #3
     9c8:	81a3      	strh	r3, [r4, #12]
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
     9ca:	4a09      	ldr	r2, [pc, #36]	; (9f0 <_usart_init+0xfc>)
     9cc:	0043      	lsls	r3, r0, #1
     9ce:	181d      	adds	r5, r3, r0
     9d0:	00e9      	lsls	r1, r5, #3
     9d2:	460d      	mov	r5, r1
     9d4:	4411      	add	r1, r2
     9d6:	f891 1033 	ldrb.w	r1, [r1, #51]	; 0x33
	((Sercom *)hw)->USART.RXPL.reg = data;
     9da:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
     9dc:	442a      	add	r2, r5
     9de:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     9e2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	return ERR_NONE;
}
     9e6:	2000      	movs	r0, #0
     9e8:	bd38      	pop	{r3, r4, r5, pc}
     9ea:	bf00      	nop
     9ec:	000008b1 	.word	0x000008b1
     9f0:	000040d4 	.word	0x000040d4

000009f4 <_usart_sync_init>:
{
     9f4:	b538      	push	{r3, r4, r5, lr}
     9f6:	460c      	mov	r4, r1
	ASSERT(device);
     9f8:	4605      	mov	r5, r0
     9fa:	22bd      	movs	r2, #189	; 0xbd
     9fc:	4905      	ldr	r1, [pc, #20]	; (a14 <_usart_sync_init+0x20>)
     9fe:	3000      	adds	r0, #0
     a00:	bf18      	it	ne
     a02:	2001      	movne	r0, #1
     a04:	4b04      	ldr	r3, [pc, #16]	; (a18 <_usart_sync_init+0x24>)
     a06:	4798      	blx	r3
	device->hw = hw;
     a08:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
     a0a:	4620      	mov	r0, r4
     a0c:	4b03      	ldr	r3, [pc, #12]	; (a1c <_usart_sync_init+0x28>)
     a0e:	4798      	blx	r3
}
     a10:	bd38      	pop	{r3, r4, r5, pc}
     a12:	bf00      	nop
     a14:	00004148 	.word	0x00004148
     a18:	000006d9 	.word	0x000006d9
     a1c:	000008f5 	.word	0x000008f5

00000a20 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
     a20:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     a22:	6813      	ldr	r3, [r2, #0]
     a24:	f043 0302 	orr.w	r3, r3, #2
     a28:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     a2a:	69d3      	ldr	r3, [r2, #28]
     a2c:	f013 0f03 	tst.w	r3, #3
     a30:	d1fb      	bne.n	a2a <_usart_sync_enable+0xa>
}
     a32:	4770      	bx	lr

00000a34 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     a34:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
     a36:	6299      	str	r1, [r3, #40]	; 0x28
     a38:	4770      	bx	lr

00000a3a <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
     a3a:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
     a3c:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
     a3e:	b2c0      	uxtb	r0, r0
     a40:	4770      	bx	lr

00000a42 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
     a42:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     a44:	7e18      	ldrb	r0, [r3, #24]
}
     a46:	f000 0001 	and.w	r0, r0, #1
     a4a:	4770      	bx	lr

00000a4c <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
     a4c:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     a4e:	7e18      	ldrb	r0, [r3, #24]
}
     a50:	f3c0 0040 	ubfx	r0, r0, #1, #1
     a54:	4770      	bx	lr

00000a56 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
     a56:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     a58:	7e18      	ldrb	r0, [r3, #24]
}
     a5a:	f3c0 0080 	ubfx	r0, r0, #2, #1
     a5e:	4770      	bx	lr

00000a60 <SERCOM2_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM2_0_Handler(void)
{
     a60:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
     a62:	4b02      	ldr	r3, [pc, #8]	; (a6c <SERCOM2_0_Handler+0xc>)
     a64:	6818      	ldr	r0, [r3, #0]
     a66:	4b02      	ldr	r3, [pc, #8]	; (a70 <SERCOM2_0_Handler+0x10>)
     a68:	4798      	blx	r3
     a6a:	bd08      	pop	{r3, pc}
     a6c:	20000094 	.word	0x20000094
     a70:	00000841 	.word	0x00000841

00000a74 <SERCOM2_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM2_1_Handler(void)
{
     a74:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
     a76:	4b02      	ldr	r3, [pc, #8]	; (a80 <SERCOM2_1_Handler+0xc>)
     a78:	6818      	ldr	r0, [r3, #0]
     a7a:	4b02      	ldr	r3, [pc, #8]	; (a84 <SERCOM2_1_Handler+0x10>)
     a7c:	4798      	blx	r3
     a7e:	bd08      	pop	{r3, pc}
     a80:	20000094 	.word	0x20000094
     a84:	00000841 	.word	0x00000841

00000a88 <SERCOM2_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM2_2_Handler(void)
{
     a88:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
     a8a:	4b02      	ldr	r3, [pc, #8]	; (a94 <SERCOM2_2_Handler+0xc>)
     a8c:	6818      	ldr	r0, [r3, #0]
     a8e:	4b02      	ldr	r3, [pc, #8]	; (a98 <SERCOM2_2_Handler+0x10>)
     a90:	4798      	blx	r3
     a92:	bd08      	pop	{r3, pc}
     a94:	20000094 	.word	0x20000094
     a98:	00000841 	.word	0x00000841

00000a9c <SERCOM2_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM2_3_Handler(void)
{
     a9c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
     a9e:	4b02      	ldr	r3, [pc, #8]	; (aa8 <SERCOM2_3_Handler+0xc>)
     aa0:	6818      	ldr	r0, [r3, #0]
     aa2:	4b02      	ldr	r3, [pc, #8]	; (aac <SERCOM2_3_Handler+0x10>)
     aa4:	4798      	blx	r3
     aa6:	bd08      	pop	{r3, pc}
     aa8:	20000094 	.word	0x20000094
     aac:	00000841 	.word	0x00000841

00000ab0 <main>:

static StaticTask_t NetworkTaskTCB;
static StackType_t NetworkTaskStack[ configMINIMAL_STACK_SIZE ];

int main(void)
{
     ab0:	b500      	push	{lr}
     ab2:	b085      	sub	sp, #20
	platform_init();
     ab4:	4b18      	ldr	r3, [pc, #96]	; (b18 <main+0x68>)
     ab6:	4798      	blx	r3
    msg_init();
     ab8:	4b18      	ldr	r3, [pc, #96]	; (b1c <main+0x6c>)
     aba:	4798      	blx	r3
	printf("Platform init done\r\n");
     abc:	4818      	ldr	r0, [pc, #96]	; (b20 <main+0x70>)
     abe:	4b19      	ldr	r3, [pc, #100]	; (b24 <main+0x74>)
     ac0:	4798      	blx	r3

    ( void ) xTaskCreateStatic( diag_task,
     ac2:	4b19      	ldr	r3, [pc, #100]	; (b28 <main+0x78>)
     ac4:	9302      	str	r3, [sp, #8]
     ac6:	3354      	adds	r3, #84	; 0x54
     ac8:	9301      	str	r3, [sp, #4]
     aca:	2604      	movs	r6, #4
     acc:	9600      	str	r6, [sp, #0]
     ace:	2300      	movs	r3, #0
     ad0:	f44f 6280 	mov.w	r2, #1024	; 0x400
     ad4:	4915      	ldr	r1, [pc, #84]	; (b2c <main+0x7c>)
     ad6:	4816      	ldr	r0, [pc, #88]	; (b30 <main+0x80>)
     ad8:	4d16      	ldr	r5, [pc, #88]	; (b34 <main+0x84>)
     ada:	47a8      	blx	r5
                                configMAX_PRIORITIES - 1U,
                                &( DiagTaskStack[ 0 ] ),
                                &( DiagTaskTCB ) );


    ( void ) xTaskCreateStatic( usb_task,
     adc:	4c16      	ldr	r4, [pc, #88]	; (b38 <main+0x88>)
     ade:	f1a4 03a4 	sub.w	r3, r4, #164	; 0xa4
     ae2:	9302      	str	r3, [sp, #8]
     ae4:	f1a4 0350 	sub.w	r3, r4, #80	; 0x50
     ae8:	9301      	str	r3, [sp, #4]
     aea:	9600      	str	r6, [sp, #0]
     aec:	2300      	movs	r3, #0
     aee:	f44f 6280 	mov.w	r2, #1024	; 0x400
     af2:	4912      	ldr	r1, [pc, #72]	; (b3c <main+0x8c>)
     af4:	4812      	ldr	r0, [pc, #72]	; (b40 <main+0x90>)
     af6:	47a8      	blx	r5
                                NULL,
                                configMAX_PRIORITIES - 1U,
                                &( UsbTaskStack[ 0 ] ),
                                &( UsbTaskTCB ) );

    ( void ) xTaskCreateStatic( network_task,
     af8:	f504 647b 	add.w	r4, r4, #4016	; 0xfb0
     afc:	9402      	str	r4, [sp, #8]
     afe:	4b11      	ldr	r3, [pc, #68]	; (b44 <main+0x94>)
     b00:	9301      	str	r3, [sp, #4]
     b02:	9600      	str	r6, [sp, #0]
     b04:	2300      	movs	r3, #0
     b06:	f44f 6280 	mov.w	r2, #1024	; 0x400
     b0a:	490f      	ldr	r1, [pc, #60]	; (b48 <main+0x98>)
     b0c:	480f      	ldr	r0, [pc, #60]	; (b4c <main+0x9c>)
     b0e:	47a8      	blx	r5
                                configMAX_PRIORITIES - 1U,
                                &( NetworkTaskStack[ 0 ] ),
                                &( NetworkTaskTCB ) );                                

    /* Start the scheduler. */
    vTaskStartScheduler();
     b10:	4b0f      	ldr	r3, [pc, #60]	; (b50 <main+0xa0>)
     b12:	4798      	blx	r3
     b14:	e7fe      	b.n	b14 <main+0x64>
     b16:	bf00      	nop
     b18:	00000c6d 	.word	0x00000c6d
     b1c:	000004b9 	.word	0x000004b9
     b20:	00004164 	.word	0x00004164
     b24:	00002f99 	.word	0x00002f99
     b28:	20000098 	.word	0x20000098
     b2c:	00004178 	.word	0x00004178
     b30:	000004f5 	.word	0x000004f5
     b34:	0000203d 	.word	0x0000203d
     b38:	20001190 	.word	0x20001190
     b3c:	00004184 	.word	0x00004184
     b40:	00002e45 	.word	0x00002e45
     b44:	20002194 	.word	0x20002194
     b48:	00004190 	.word	0x00004190
     b4c:	00000b55 	.word	0x00000b55
     b50:	000029ed 	.word	0x000029ed

00000b54 <network_task>:
#include "task.h"
#include "semphr.h"
#include "diag_task.h"

void network_task(void *parameters)
{
     b54:	b508      	push	{r3, lr}
    (void) parameters;

    for(;;)
    {   
        vTaskDelay(100);
     b56:	2064      	movs	r0, #100	; 0x64
     b58:	4b06      	ldr	r3, [pc, #24]	; (b74 <network_task+0x20>)
     b5a:	4798      	blx	r3
        DEBUG_MSG("network_task %d \r\n", 11);
     b5c:	4d06      	ldr	r5, [pc, #24]	; (b78 <network_task+0x24>)
     b5e:	210b      	movs	r1, #11
     b60:	4628      	mov	r0, r5
     b62:	4c06      	ldr	r4, [pc, #24]	; (b7c <network_task+0x28>)
     b64:	47a0      	blx	r4
		DEBUG_MSG("network_task %d \r\n", 30);
     b66:	211e      	movs	r1, #30
     b68:	4628      	mov	r0, r5
     b6a:	47a0      	blx	r4
		DEBUG_MSG("network_task %d \r\n", 70);
     b6c:	2146      	movs	r1, #70	; 0x46
     b6e:	4628      	mov	r0, r5
     b70:	47a0      	blx	r4
     b72:	e7f0      	b.n	b56 <network_task+0x2>
     b74:	00002399 	.word	0x00002399
     b78:	000041a0 	.word	0x000041a0
     b7c:	0000036d 	.word	0x0000036d

00000b80 <TARGET_IO_PORT_init>:
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b80:	4b10      	ldr	r3, [pc, #64]	; (bc4 <TARGET_IO_PORT_init+0x44>)
     b82:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     b86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b8a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b8e:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b92:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     b96:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     b9a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b9e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ba2:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     ba6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     baa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bae:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bb2:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     bb6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     bba:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     bbe:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     bc2:	4770      	bx	lr
     bc4:	41008000 	.word	0x41008000

00000bc8 <TARGET_IO_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     bc8:	4b06      	ldr	r3, [pc, #24]	; (be4 <TARGET_IO_CLOCK_init+0x1c>)
     bca:	2240      	movs	r2, #64	; 0x40
     bcc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     bd0:	2243      	movs	r2, #67	; 0x43
     bd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBBMASK_SERCOM2_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     bd6:	4a04      	ldr	r2, [pc, #16]	; (be8 <TARGET_IO_CLOCK_init+0x20>)
     bd8:	6993      	ldr	r3, [r2, #24]
     bda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     bde:	6193      	str	r3, [r2, #24]
     be0:	4770      	bx	lr
     be2:	bf00      	nop
     be4:	40001c00 	.word	0x40001c00
     be8:	40000800 	.word	0x40000800

00000bec <TARGET_IO_init>:

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
}

void TARGET_IO_init(void)
{
     bec:	b508      	push	{r3, lr}
	TARGET_IO_CLOCK_init();
     bee:	4b05      	ldr	r3, [pc, #20]	; (c04 <TARGET_IO_init+0x18>)
     bf0:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, SERCOM2, (void *)NULL);
     bf2:	2200      	movs	r2, #0
     bf4:	4904      	ldr	r1, [pc, #16]	; (c08 <TARGET_IO_init+0x1c>)
     bf6:	4805      	ldr	r0, [pc, #20]	; (c0c <TARGET_IO_init+0x20>)
     bf8:	4b05      	ldr	r3, [pc, #20]	; (c10 <TARGET_IO_init+0x24>)
     bfa:	4798      	blx	r3
	TARGET_IO_PORT_init();
     bfc:	4b05      	ldr	r3, [pc, #20]	; (c14 <TARGET_IO_init+0x28>)
     bfe:	4798      	blx	r3
     c00:	bd08      	pop	{r3, pc}
     c02:	bf00      	nop
     c04:	00000bc9 	.word	0x00000bc9
     c08:	41012000 	.word	0x41012000
     c0c:	20006324 	.word	0x20006324
     c10:	00000661 	.word	0x00000661
     c14:	00000b81 	.word	0x00000b81

00000c18 <gpio_configuration>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c18:	4b0a      	ldr	r3, [pc, #40]	; (c44 <gpio_configuration+0x2c>)
     c1a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
     c1e:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     c26:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     c2a:	4a07      	ldr	r2, [pc, #28]	; (c48 <gpio_configuration+0x30>)
     c2c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c30:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     c34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c38:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c3c:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
     c40:	4770      	bx	lr
     c42:	bf00      	nop
     c44:	41008000 	.word	0x41008000
     c48:	c0000004 	.word	0xc0000004

00000c4c <stdio_redirect_init>:
	                   false);    
}


void stdio_redirect_init(void)
{
     c4c:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
     c4e:	4c04      	ldr	r4, [pc, #16]	; (c60 <stdio_redirect_init+0x14>)
     c50:	4620      	mov	r0, r4
     c52:	4b04      	ldr	r3, [pc, #16]	; (c64 <stdio_redirect_init+0x18>)
     c54:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
     c56:	4620      	mov	r0, r4
     c58:	4b03      	ldr	r3, [pc, #12]	; (c68 <stdio_redirect_init+0x1c>)
     c5a:	4798      	blx	r3
     c5c:	bd10      	pop	{r4, pc}
     c5e:	bf00      	nop
     c60:	20006324 	.word	0x20006324
     c64:	000006ad 	.word	0x000006ad
     c68:	00000cdd 	.word	0x00000cdd

00000c6c <platform_init>:
}

void platform_init()
{
     c6c:	b508      	push	{r3, lr}

#include <hpl_init.h>

static inline void init_mcu(void)
{
	_init_chip();
     c6e:	4b04      	ldr	r3, [pc, #16]	; (c80 <platform_init+0x14>)
     c70:	4798      	blx	r3
    init_mcu();
    TARGET_IO_init();
     c72:	4b04      	ldr	r3, [pc, #16]	; (c84 <platform_init+0x18>)
     c74:	4798      	blx	r3
    stdio_redirect_init();    
     c76:	4b04      	ldr	r3, [pc, #16]	; (c88 <platform_init+0x1c>)
     c78:	4798      	blx	r3
    gpio_configuration();
     c7a:	4b04      	ldr	r3, [pc, #16]	; (c8c <platform_init+0x20>)
     c7c:	4798      	blx	r3
     c7e:	bd08      	pop	{r3, pc}
     c80:	0000071d 	.word	0x0000071d
     c84:	00000bed 	.word	0x00000bed
     c88:	00000c4d 	.word	0x00000c4d
     c8c:	00000c19 	.word	0x00000c19

00000c90 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
     c90:	b958      	cbnz	r0, caa <_read+0x1a>
{
     c92:	b508      	push	{r3, lr}
     c94:	460b      	mov	r3, r1
     c96:	4611      	mov	r1, r2
     c98:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
     c9a:	4b05      	ldr	r3, [pc, #20]	; (cb0 <_read+0x20>)
     c9c:	4798      	blx	r3
	if (n < 0) {
     c9e:	2800      	cmp	r0, #0
     ca0:	db00      	blt.n	ca4 <_read+0x14>
		return -1;
	}

	return n;
}
     ca2:	bd08      	pop	{r3, pc}
		return -1;
     ca4:	f04f 30ff 	mov.w	r0, #4294967295
     ca8:	bd08      	pop	{r3, pc}
		return -1;
     caa:	f04f 30ff 	mov.w	r0, #4294967295
     cae:	4770      	bx	lr
     cb0:	00000d09 	.word	0x00000d09

00000cb4 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
     cb4:	3801      	subs	r0, #1
     cb6:	2802      	cmp	r0, #2
     cb8:	d80b      	bhi.n	cd2 <_write+0x1e>
{
     cba:	b508      	push	{r3, lr}
     cbc:	460b      	mov	r3, r1
     cbe:	4611      	mov	r1, r2
     cc0:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
     cc2:	4b05      	ldr	r3, [pc, #20]	; (cd8 <_write+0x24>)
     cc4:	4798      	blx	r3
	if (n < 0) {
     cc6:	2800      	cmp	r0, #0
     cc8:	db00      	blt.n	ccc <_write+0x18>
		return -1;
	}

	return n;
}
     cca:	bd08      	pop	{r3, pc}
		return -1;
     ccc:	f04f 30ff 	mov.w	r0, #4294967295
     cd0:	bd08      	pop	{r3, pc}
		return -1;
     cd2:	f04f 30ff 	mov.w	r0, #4294967295
     cd6:	4770      	bx	lr
     cd8:	00000d2d 	.word	0x00000d2d

00000cdc <stdio_io_init>:
/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;
//static SemaphoreHandle_t io_mutex;

void stdio_io_init(struct io_descriptor *io)
{
     cdc:	b570      	push	{r4, r5, r6, lr}
     cde:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
     ce0:	4d06      	ldr	r5, [pc, #24]	; (cfc <stdio_io_init+0x20>)
     ce2:	682b      	ldr	r3, [r5, #0]
     ce4:	2100      	movs	r1, #0
     ce6:	6898      	ldr	r0, [r3, #8]
     ce8:	4c05      	ldr	r4, [pc, #20]	; (d00 <stdio_io_init+0x24>)
     cea:	47a0      	blx	r4
	setbuf(stdin, NULL);
     cec:	682b      	ldr	r3, [r5, #0]
     cee:	2100      	movs	r1, #0
     cf0:	6858      	ldr	r0, [r3, #4]
     cf2:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
     cf4:	4b03      	ldr	r3, [pc, #12]	; (d04 <stdio_io_init+0x28>)
     cf6:	601e      	str	r6, [r3, #0]
     cf8:	bd70      	pop	{r4, r5, r6, pc}
     cfa:	bf00      	nop
     cfc:	2000000c 	.word	0x2000000c
     d00:	00002fa9 	.word	0x00002fa9
     d04:	20003194 	.word	0x20003194

00000d08 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
     d08:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
     d0a:	4b06      	ldr	r3, [pc, #24]	; (d24 <stdio_io_read+0x1c>)
     d0c:	681b      	ldr	r3, [r3, #0]
     d0e:	b133      	cbz	r3, d1e <stdio_io_read+0x16>
     d10:	460a      	mov	r2, r1
     d12:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
     d14:	b292      	uxth	r2, r2
     d16:	4618      	mov	r0, r3
     d18:	4b03      	ldr	r3, [pc, #12]	; (d28 <stdio_io_read+0x20>)
     d1a:	4798      	blx	r3
     d1c:	bd08      	pop	{r3, pc}
		return 0;
     d1e:	2000      	movs	r0, #0
}
     d20:	bd08      	pop	{r3, pc}
     d22:	bf00      	nop
     d24:	20003194 	.word	0x20003194
     d28:	00000561 	.word	0x00000561

00000d2c <stdio_io_write>:



int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
     d2c:	b508      	push	{r3, lr}
	//int32_t  ret = 0;
	if (stdio_io == NULL) {
     d2e:	4b06      	ldr	r3, [pc, #24]	; (d48 <stdio_io_write+0x1c>)
     d30:	681b      	ldr	r3, [r3, #0]
     d32:	b133      	cbz	r3, d42 <stdio_io_write+0x16>
     d34:	460a      	mov	r2, r1
     d36:	4601      	mov	r1, r0
		return 0;
	}
	//xSemaphoreTake(io_mutex, ~0);

	return io_write(stdio_io, buf, len);
     d38:	b292      	uxth	r2, r2
     d3a:	4618      	mov	r0, r3
     d3c:	4b03      	ldr	r3, [pc, #12]	; (d4c <stdio_io_write+0x20>)
     d3e:	4798      	blx	r3
     d40:	bd08      	pop	{r3, pc}
		return 0;
     d42:	2000      	movs	r0, #0

	//xSemaphoreGive(io_mutex);

	//return ret;
}
     d44:	bd08      	pop	{r3, pc}
     d46:	bf00      	nop
     d48:	20003194 	.word	0x20003194
     d4c:	0000052d 	.word	0x0000052d

00000d50 <vListInitialise>:
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
     d50:	f100 0308 	add.w	r3, r0, #8
     d54:	6043      	str	r3, [r0, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     d56:	f04f 32ff 	mov.w	r2, #4294967295
     d5a:	6082      	str	r2, [r0, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
     d5c:	60c3      	str	r3, [r0, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
     d5e:	6103      	str	r3, [r0, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     d60:	2300      	movs	r3, #0
     d62:	6003      	str	r3, [r0, #0]
     d64:	4770      	bx	lr

00000d66 <vListInitialiseItem>:
void vListInitialiseItem( ListItem_t * const pxItem )
{
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     d66:	2300      	movs	r3, #0
     d68:	6103      	str	r3, [r0, #16]
     d6a:	4770      	bx	lr

00000d6c <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     d6c:	b430      	push	{r4, r5}
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     d6e:	680d      	ldr	r5, [r1, #0]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     d70:	f1b5 3fff 	cmp.w	r5, #4294967295
     d74:	d002      	beq.n	d7c <vListInsert+0x10>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     d76:	f100 0208 	add.w	r2, r0, #8
     d7a:	e002      	b.n	d82 <vListInsert+0x16>
        pxIterator = pxList->xListEnd.pxPrevious;
     d7c:	6902      	ldr	r2, [r0, #16]
     d7e:	e004      	b.n	d8a <vListInsert+0x1e>
        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     d80:	461a      	mov	r2, r3
     d82:	6853      	ldr	r3, [r2, #4]
     d84:	681c      	ldr	r4, [r3, #0]
     d86:	42a5      	cmp	r5, r4
     d88:	d2fa      	bcs.n	d80 <vListInsert+0x14>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     d8a:	6853      	ldr	r3, [r2, #4]
     d8c:	604b      	str	r3, [r1, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     d8e:	6099      	str	r1, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
     d90:	608a      	str	r2, [r1, #8]
    pxIterator->pxNext = pxNewListItem;
     d92:	6051      	str	r1, [r2, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     d94:	6108      	str	r0, [r1, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
     d96:	6803      	ldr	r3, [r0, #0]
     d98:	3301      	adds	r3, #1
     d9a:	6003      	str	r3, [r0, #0]

    traceRETURN_vListInsert();
}
     d9c:	bc30      	pop	{r4, r5}
     d9e:	4770      	bx	lr

00000da0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     da0:	6903      	ldr	r3, [r0, #16]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     da2:	6842      	ldr	r2, [r0, #4]
     da4:	6881      	ldr	r1, [r0, #8]
     da6:	6091      	str	r1, [r2, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     da8:	6882      	ldr	r2, [r0, #8]
     daa:	6841      	ldr	r1, [r0, #4]
     dac:	6051      	str	r1, [r2, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     dae:	685a      	ldr	r2, [r3, #4]
     db0:	4290      	cmp	r0, r2
     db2:	d005      	beq.n	dc0 <uxListRemove+0x20>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     db4:	2200      	movs	r2, #0
     db6:	6102      	str	r2, [r0, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
     db8:	6818      	ldr	r0, [r3, #0]
     dba:	3801      	subs	r0, #1
     dbc:	6018      	str	r0, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
}
     dbe:	4770      	bx	lr
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     dc0:	6882      	ldr	r2, [r0, #8]
     dc2:	605a      	str	r2, [r3, #4]
     dc4:	e7f6      	b.n	db4 <uxListRemove+0x14>
	...

00000dc8 <prvTaskExitError>:
    return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
     dc8:	b082      	sub	sp, #8
    volatile uint32_t ulDummy = 0;
     dca:	2300      	movs	r3, #0
     dcc:	9301      	str	r3, [sp, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
     dce:	4b0d      	ldr	r3, [pc, #52]	; (e04 <prvTaskExitError+0x3c>)
     dd0:	681b      	ldr	r3, [r3, #0]
     dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
     dd6:	d008      	beq.n	dea <prvTaskExitError+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
     dd8:	f04f 0380 	mov.w	r3, #128	; 0x80
     ddc:	f383 8811 	msr	BASEPRI, r3
     de0:	f3bf 8f6f 	isb	sy
     de4:	f3bf 8f4f 	dsb	sy
     de8:	e7fe      	b.n	de8 <prvTaskExitError+0x20>
     dea:	f04f 0380 	mov.w	r3, #128	; 0x80
     dee:	f383 8811 	msr	BASEPRI, r3
     df2:	f3bf 8f6f 	isb	sy
     df6:	f3bf 8f4f 	dsb	sy
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
     dfa:	9b01      	ldr	r3, [sp, #4]
     dfc:	2b00      	cmp	r3, #0
     dfe:	d0fc      	beq.n	dfa <prvTaskExitError+0x32>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
     e00:	b002      	add	sp, #8
     e02:	4770      	bx	lr
     e04:	20000000 	.word	0x20000000
	...

00000e10 <SVCall_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
     e10:	4b07      	ldr	r3, [pc, #28]	; (e30 <pxCurrentTCBConst2>)
     e12:	6819      	ldr	r1, [r3, #0]
     e14:	6808      	ldr	r0, [r1, #0]
     e16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e1a:	f380 8809 	msr	PSP, r0
     e1e:	f3bf 8f6f 	isb	sy
     e22:	f04f 0000 	mov.w	r0, #0
     e26:	f380 8811 	msr	BASEPRI, r0
     e2a:	4770      	bx	lr
     e2c:	f3af 8000 	nop.w

00000e30 <pxCurrentTCBConst2>:
     e30:	20003bd8 	.word	0x20003bd8

00000e34 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
     e34:	4808      	ldr	r0, [pc, #32]	; (e58 <prvPortStartFirstTask+0x24>)
     e36:	6800      	ldr	r0, [r0, #0]
     e38:	6800      	ldr	r0, [r0, #0]
     e3a:	f380 8808 	msr	MSP, r0
     e3e:	f04f 0000 	mov.w	r0, #0
     e42:	f380 8814 	msr	CONTROL, r0
     e46:	b662      	cpsie	i
     e48:	b661      	cpsie	f
     e4a:	f3bf 8f4f 	dsb	sy
     e4e:	f3bf 8f6f 	isb	sy
     e52:	df00      	svc	0
     e54:	bf00      	nop
     e56:	0000      	.short	0x0000
     e58:	e000ed08 	.word	0xe000ed08
     e5c:	00000000 	.word	0x00000000

00000e60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
     e60:	f3ef 8009 	mrs	r0, PSP
     e64:	f3bf 8f6f 	isb	sy
     e68:	4b15      	ldr	r3, [pc, #84]	; (ec0 <pxCurrentTCBConst>)
     e6a:	681a      	ldr	r2, [r3, #0]
     e6c:	f01e 0f10 	tst.w	lr, #16
     e70:	bf08      	it	eq
     e72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
     e76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e7a:	6010      	str	r0, [r2, #0]
     e7c:	e92d 0009 	stmdb	sp!, {r0, r3}
     e80:	f04f 0080 	mov.w	r0, #128	; 0x80
     e84:	f380 8811 	msr	BASEPRI, r0
     e88:	f3bf 8f4f 	dsb	sy
     e8c:	f3bf 8f6f 	isb	sy
     e90:	f001 fab2 	bl	23f8 <vTaskSwitchContext>
     e94:	f04f 0000 	mov.w	r0, #0
     e98:	f380 8811 	msr	BASEPRI, r0
     e9c:	bc09      	pop	{r0, r3}
     e9e:	6819      	ldr	r1, [r3, #0]
     ea0:	6808      	ldr	r0, [r1, #0]
     ea2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ea6:	f01e 0f10 	tst.w	lr, #16
     eaa:	bf08      	it	eq
     eac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
     eb0:	f380 8809 	msr	PSP, r0
     eb4:	f3bf 8f6f 	isb	sy
     eb8:	4770      	bx	lr
     eba:	bf00      	nop
     ebc:	f3af 8000 	nop.w

00000ec0 <pxCurrentTCBConst>:
     ec0:	20003bd8 	.word	0x20003bd8

00000ec4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
     ec4:	f8df 000c 	ldr.w	r0, [pc, #12]	; ed4 <vPortEnableVFP+0x10>
     ec8:	6801      	ldr	r1, [r0, #0]
     eca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     ece:	6001      	str	r1, [r0, #0]
     ed0:	4770      	bx	lr
     ed2:	0000      	.short	0x0000
     ed4:	e000ed88 	.word	0xe000ed88

00000ed8 <pxPortInitialiseStack>:
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
     ed8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
     edc:	f840 3c04 	str.w	r3, [r0, #-4]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
     ee0:	f021 0101 	bic.w	r1, r1, #1
     ee4:	f840 1c08 	str.w	r1, [r0, #-8]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
     ee8:	4b05      	ldr	r3, [pc, #20]	; (f00 <pxPortInitialiseStack+0x28>)
     eea:	f840 3c0c 	str.w	r3, [r0, #-12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
     eee:	f840 2c20 	str.w	r2, [r0, #-32]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
     ef2:	f06f 0302 	mvn.w	r3, #2
     ef6:	f840 3c24 	str.w	r3, [r0, #-36]
}
     efa:	3844      	subs	r0, #68	; 0x44
     efc:	4770      	bx	lr
     efe:	bf00      	nop
     f00:	00000dc9 	.word	0x00000dc9

00000f04 <vPortEnterCritical>:
     f04:	f04f 0380 	mov.w	r3, #128	; 0x80
     f08:	f383 8811 	msr	BASEPRI, r3
     f0c:	f3bf 8f6f 	isb	sy
     f10:	f3bf 8f4f 	dsb	sy
    uxCriticalNesting++;
     f14:	4a0a      	ldr	r2, [pc, #40]	; (f40 <vPortEnterCritical+0x3c>)
     f16:	6813      	ldr	r3, [r2, #0]
     f18:	3301      	adds	r3, #1
     f1a:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 1 )
     f1c:	2b01      	cmp	r3, #1
     f1e:	d10d      	bne.n	f3c <vPortEnterCritical+0x38>
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
     f20:	4b08      	ldr	r3, [pc, #32]	; (f44 <vPortEnterCritical+0x40>)
     f22:	681b      	ldr	r3, [r3, #0]
     f24:	f013 0fff 	tst.w	r3, #255	; 0xff
     f28:	d008      	beq.n	f3c <vPortEnterCritical+0x38>
     f2a:	f04f 0380 	mov.w	r3, #128	; 0x80
     f2e:	f383 8811 	msr	BASEPRI, r3
     f32:	f3bf 8f6f 	isb	sy
     f36:	f3bf 8f4f 	dsb	sy
     f3a:	e7fe      	b.n	f3a <vPortEnterCritical+0x36>
     f3c:	4770      	bx	lr
     f3e:	bf00      	nop
     f40:	20000000 	.word	0x20000000
     f44:	e000ed04 	.word	0xe000ed04

00000f48 <vPortExitCritical>:
    configASSERT( uxCriticalNesting );
     f48:	4b09      	ldr	r3, [pc, #36]	; (f70 <vPortExitCritical+0x28>)
     f4a:	681b      	ldr	r3, [r3, #0]
     f4c:	b943      	cbnz	r3, f60 <vPortExitCritical+0x18>
     f4e:	f04f 0380 	mov.w	r3, #128	; 0x80
     f52:	f383 8811 	msr	BASEPRI, r3
     f56:	f3bf 8f6f 	isb	sy
     f5a:	f3bf 8f4f 	dsb	sy
     f5e:	e7fe      	b.n	f5e <vPortExitCritical+0x16>
    uxCriticalNesting--;
     f60:	3b01      	subs	r3, #1
     f62:	4a03      	ldr	r2, [pc, #12]	; (f70 <vPortExitCritical+0x28>)
     f64:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
     f66:	b90b      	cbnz	r3, f6c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
     f68:	f383 8811 	msr	BASEPRI, r3
     f6c:	4770      	bx	lr
     f6e:	bf00      	nop
     f70:	20000000 	.word	0x20000000

00000f74 <SysTick_Handler>:
{
     f74:	b508      	push	{r3, lr}
    __asm volatile
     f76:	f04f 0380 	mov.w	r3, #128	; 0x80
     f7a:	f383 8811 	msr	BASEPRI, r3
     f7e:	f3bf 8f6f 	isb	sy
     f82:	f3bf 8f4f 	dsb	sy
        if( xTaskIncrementTick() != pdFALSE )
     f86:	4b05      	ldr	r3, [pc, #20]	; (f9c <SysTick_Handler+0x28>)
     f88:	4798      	blx	r3
     f8a:	b118      	cbz	r0, f94 <SysTick_Handler+0x20>
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
     f8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     f90:	4b03      	ldr	r3, [pc, #12]	; (fa0 <SysTick_Handler+0x2c>)
     f92:	601a      	str	r2, [r3, #0]
    __asm volatile
     f94:	2300      	movs	r3, #0
     f96:	f383 8811 	msr	BASEPRI, r3
     f9a:	bd08      	pop	{r3, pc}
     f9c:	0000209d 	.word	0x0000209d
     fa0:	e000ed04 	.word	0xe000ed04

00000fa4 <vPortSetupTimerInterrupt>:
    portNVIC_SYSTICK_CTRL_REG = 0UL;
     fa4:	4b05      	ldr	r3, [pc, #20]	; (fbc <vPortSetupTimerInterrupt+0x18>)
     fa6:	2200      	movs	r2, #0
     fa8:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
     faa:	4905      	ldr	r1, [pc, #20]	; (fc0 <vPortSetupTimerInterrupt+0x1c>)
     fac:	600a      	str	r2, [r1, #0]
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
     fae:	f642 61df 	movw	r1, #11999	; 0x2edf
     fb2:	4a04      	ldr	r2, [pc, #16]	; (fc4 <vPortSetupTimerInterrupt+0x20>)
     fb4:	6011      	str	r1, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
     fb6:	2207      	movs	r2, #7
     fb8:	601a      	str	r2, [r3, #0]
     fba:	4770      	bx	lr
     fbc:	e000e010 	.word	0xe000e010
     fc0:	e000e018 	.word	0xe000e018
     fc4:	e000e014 	.word	0xe000e014

00000fc8 <xPortStartScheduler>:
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
     fc8:	4b54      	ldr	r3, [pc, #336]	; (111c <xPortStartScheduler+0x154>)
     fca:	681a      	ldr	r2, [r3, #0]
     fcc:	4b54      	ldr	r3, [pc, #336]	; (1120 <xPortStartScheduler+0x158>)
     fce:	429a      	cmp	r2, r3
     fd0:	d108      	bne.n	fe4 <xPortStartScheduler+0x1c>
    __asm volatile
     fd2:	f04f 0380 	mov.w	r3, #128	; 0x80
     fd6:	f383 8811 	msr	BASEPRI, r3
     fda:	f3bf 8f6f 	isb	sy
     fde:	f3bf 8f4f 	dsb	sy
     fe2:	e7fe      	b.n	fe2 <xPortStartScheduler+0x1a>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
     fe4:	4b4d      	ldr	r3, [pc, #308]	; (111c <xPortStartScheduler+0x154>)
     fe6:	681a      	ldr	r2, [r3, #0]
     fe8:	4b4e      	ldr	r3, [pc, #312]	; (1124 <xPortStartScheduler+0x15c>)
     fea:	429a      	cmp	r2, r3
     fec:	d108      	bne.n	1000 <xPortStartScheduler+0x38>
     fee:	f04f 0380 	mov.w	r3, #128	; 0x80
     ff2:	f383 8811 	msr	BASEPRI, r3
     ff6:	f3bf 8f6f 	isb	sy
     ffa:	f3bf 8f4f 	dsb	sy
     ffe:	e7fe      	b.n	ffe <xPortStartScheduler+0x36>
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
    1000:	4b49      	ldr	r3, [pc, #292]	; (1128 <xPortStartScheduler+0x160>)
    1002:	681b      	ldr	r3, [r3, #0]
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
    1004:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    1006:	4a49      	ldr	r2, [pc, #292]	; (112c <xPortStartScheduler+0x164>)
    1008:	4291      	cmp	r1, r2
    100a:	d008      	beq.n	101e <xPortStartScheduler+0x56>
    100c:	f04f 0380 	mov.w	r3, #128	; 0x80
    1010:	f383 8811 	msr	BASEPRI, r3
    1014:	f3bf 8f6f 	isb	sy
    1018:	f3bf 8f4f 	dsb	sy
    101c:	e7fe      	b.n	101c <xPortStartScheduler+0x54>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
    101e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1020:	4b43      	ldr	r3, [pc, #268]	; (1130 <xPortStartScheduler+0x168>)
    1022:	429a      	cmp	r2, r3
    1024:	d008      	beq.n	1038 <xPortStartScheduler+0x70>
    1026:	f04f 0380 	mov.w	r3, #128	; 0x80
    102a:	f383 8811 	msr	BASEPRI, r3
    102e:	f3bf 8f6f 	isb	sy
    1032:	f3bf 8f4f 	dsb	sy
    1036:	e7fe      	b.n	1036 <xPortStartScheduler+0x6e>
{
    1038:	b510      	push	{r4, lr}
    103a:	b082      	sub	sp, #8
        volatile uint32_t ulImplementedPrioBits = 0;
    103c:	2300      	movs	r3, #0
    103e:	9301      	str	r3, [sp, #4]
        ucOriginalPriority = *pucFirstUserPriorityRegister;
    1040:	4b3c      	ldr	r3, [pc, #240]	; (1134 <xPortStartScheduler+0x16c>)
    1042:	781a      	ldrb	r2, [r3, #0]
    1044:	b2d2      	uxtb	r2, r2
    1046:	f88d 2002 	strb.w	r2, [sp, #2]
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
    104a:	22ff      	movs	r2, #255	; 0xff
    104c:	701a      	strb	r2, [r3, #0]
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
    104e:	781b      	ldrb	r3, [r3, #0]
    1050:	b2db      	uxtb	r3, r3
    1052:	f88d 3003 	strb.w	r3, [sp, #3]
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
    1056:	f89d 3003 	ldrb.w	r3, [sp, #3]
    105a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    105e:	4a36      	ldr	r2, [pc, #216]	; (1138 <xPortStartScheduler+0x170>)
    1060:	7013      	strb	r3, [r2, #0]
        configASSERT( ucMaxSysCallPriority );
    1062:	b943      	cbnz	r3, 1076 <xPortStartScheduler+0xae>
    1064:	f04f 0380 	mov.w	r3, #128	; 0x80
    1068:	f383 8811 	msr	BASEPRI, r3
    106c:	f3bf 8f6f 	isb	sy
    1070:	f3bf 8f4f 	dsb	sy
    1074:	e7fe      	b.n	1074 <xPortStartScheduler+0xac>
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
    1076:	f89d 3003 	ldrb.w	r3, [sp, #3]
    107a:	09db      	lsrs	r3, r3, #7
    107c:	d111      	bne.n	10a2 <xPortStartScheduler+0xda>
    107e:	f04f 0380 	mov.w	r3, #128	; 0x80
    1082:	f383 8811 	msr	BASEPRI, r3
    1086:	f3bf 8f6f 	isb	sy
    108a:	f3bf 8f4f 	dsb	sy
    108e:	e7fe      	b.n	108e <xPortStartScheduler+0xc6>
            ulImplementedPrioBits++;
    1090:	9b01      	ldr	r3, [sp, #4]
    1092:	3301      	adds	r3, #1
    1094:	9301      	str	r3, [sp, #4]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
    1096:	f89d 3003 	ldrb.w	r3, [sp, #3]
    109a:	005b      	lsls	r3, r3, #1
    109c:	b2db      	uxtb	r3, r3
    109e:	f88d 3003 	strb.w	r3, [sp, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
    10a2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    10a6:	f013 0f80 	tst.w	r3, #128	; 0x80
    10aa:	d1f1      	bne.n	1090 <xPortStartScheduler+0xc8>
        if( ulImplementedPrioBits == 8 )
    10ac:	9b01      	ldr	r3, [sp, #4]
    10ae:	2b08      	cmp	r3, #8
    10b0:	d12d      	bne.n	110e <xPortStartScheduler+0x146>
            ulMaxPRIGROUPValue = 0;
    10b2:	2200      	movs	r2, #0
    10b4:	4b20      	ldr	r3, [pc, #128]	; (1138 <xPortStartScheduler+0x170>)
    10b6:	605a      	str	r2, [r3, #4]
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
    10b8:	4a1f      	ldr	r2, [pc, #124]	; (1138 <xPortStartScheduler+0x170>)
    10ba:	6853      	ldr	r3, [r2, #4]
    10bc:	021b      	lsls	r3, r3, #8
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
    10be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    10c2:	6053      	str	r3, [r2, #4]
        *pucFirstUserPriorityRegister = ucOriginalPriority;
    10c4:	f89d 3002 	ldrb.w	r3, [sp, #2]
    10c8:	b2db      	uxtb	r3, r3
    10ca:	4a1a      	ldr	r2, [pc, #104]	; (1134 <xPortStartScheduler+0x16c>)
    10cc:	7013      	strb	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
    10ce:	4b1b      	ldr	r3, [pc, #108]	; (113c <xPortStartScheduler+0x174>)
    10d0:	681a      	ldr	r2, [r3, #0]
    10d2:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
    10d6:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
    10d8:	681a      	ldr	r2, [r3, #0]
    10da:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
    10de:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR2_REG = 0;
    10e0:	2400      	movs	r4, #0
    10e2:	3b04      	subs	r3, #4
    10e4:	601c      	str	r4, [r3, #0]
    vPortSetupTimerInterrupt();
    10e6:	4b16      	ldr	r3, [pc, #88]	; (1140 <xPortStartScheduler+0x178>)
    10e8:	4798      	blx	r3
    uxCriticalNesting = 0;
    10ea:	4b16      	ldr	r3, [pc, #88]	; (1144 <xPortStartScheduler+0x17c>)
    10ec:	601c      	str	r4, [r3, #0]
    vPortEnableVFP();
    10ee:	4b16      	ldr	r3, [pc, #88]	; (1148 <xPortStartScheduler+0x180>)
    10f0:	4798      	blx	r3
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
    10f2:	4a16      	ldr	r2, [pc, #88]	; (114c <xPortStartScheduler+0x184>)
    10f4:	6813      	ldr	r3, [r2, #0]
    10f6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    10fa:	6013      	str	r3, [r2, #0]
    prvPortStartFirstTask();
    10fc:	4b14      	ldr	r3, [pc, #80]	; (1150 <xPortStartScheduler+0x188>)
    10fe:	4798      	blx	r3
    vTaskSwitchContext();
    1100:	4b14      	ldr	r3, [pc, #80]	; (1154 <xPortStartScheduler+0x18c>)
    1102:	4798      	blx	r3
    prvTaskExitError();
    1104:	4b14      	ldr	r3, [pc, #80]	; (1158 <xPortStartScheduler+0x190>)
    1106:	4798      	blx	r3
}
    1108:	4620      	mov	r0, r4
    110a:	b002      	add	sp, #8
    110c:	bd10      	pop	{r4, pc}
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
    110e:	9b01      	ldr	r3, [sp, #4]
    1110:	f1c3 0307 	rsb	r3, r3, #7
    1114:	4a08      	ldr	r2, [pc, #32]	; (1138 <xPortStartScheduler+0x170>)
    1116:	6053      	str	r3, [r2, #4]
    1118:	e7ce      	b.n	10b8 <xPortStartScheduler+0xf0>
    111a:	bf00      	nop
    111c:	e000ed00 	.word	0xe000ed00
    1120:	410fc271 	.word	0x410fc271
    1124:	410fc270 	.word	0x410fc270
    1128:	e000ed08 	.word	0xe000ed08
    112c:	00000e11 	.word	0x00000e11
    1130:	00000e61 	.word	0x00000e61
    1134:	e000e400 	.word	0xe000e400
    1138:	20003198 	.word	0x20003198
    113c:	e000ed20 	.word	0xe000ed20
    1140:	00000fa5 	.word	0x00000fa5
    1144:	20000000 	.word	0x20000000
    1148:	00000ec5 	.word	0x00000ec5
    114c:	e000ef34 	.word	0xe000ef34
    1150:	00000e35 	.word	0x00000e35
    1154:	000023f9 	.word	0x000023f9
    1158:	00000dc9 	.word	0x00000dc9

0000115c <prvHeapInit>:
{
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;

    /* Ensure the heap starts on a correctly aligned boundary. */
    pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    115c:	4b09      	ldr	r3, [pc, #36]	; (1184 <prvHeapInit+0x28>)
    115e:	1dda      	adds	r2, r3, #7
    1160:	f022 0207 	bic.w	r2, r2, #7

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    1164:	f8c3 2960 	str.w	r2, [r3, #2400]	; 0x960
    xStart.xBlockSize = ( size_t ) 0;
    1168:	2000      	movs	r0, #0
    116a:	f8c3 0964 	str.w	r0, [r3, #2404]	; 0x964

    /* xEnd is used to mark the end of the list of free blocks. */
    xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
    116e:	f640 1158 	movw	r1, #2392	; 0x958
    1172:	f8c3 196c 	str.w	r1, [r3, #2412]	; 0x96c
    xEnd.pxNextFreeBlock = NULL;
    1176:	f8c3 0968 	str.w	r0, [r3, #2408]	; 0x968

    /* To start with there is a single free block that is sized to take up the
     * entire heap space. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
    117a:	6051      	str	r1, [r2, #4]
    pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
    117c:	f603 1368 	addw	r3, r3, #2408	; 0x968
    1180:	6013      	str	r3, [r2, #0]
    1182:	4770      	bx	lr
    1184:	200031a0 	.word	0x200031a0

00001188 <pvPortMalloc>:
{
    1188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( xWantedSize > 0 )
    118a:	4604      	mov	r4, r0
    118c:	b170      	cbz	r0, 11ac <pvPortMalloc+0x24>
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
    118e:	f110 0f09 	cmn.w	r0, #9
    1192:	d80a      	bhi.n	11aa <pvPortMalloc+0x22>
            xWantedSize += xHeapStructSize;
    1194:	3408      	adds	r4, #8
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
    1196:	f014 0307 	ands.w	r3, r4, #7
    119a:	d007      	beq.n	11ac <pvPortMalloc+0x24>
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
    119c:	f1c3 0308 	rsb	r3, r3, #8
                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
    11a0:	43da      	mvns	r2, r3
    11a2:	4294      	cmp	r4, r2
    11a4:	d816      	bhi.n	11d4 <pvPortMalloc+0x4c>
                    xWantedSize += xAdditionalRequiredSize;
    11a6:	441c      	add	r4, r3
    11a8:	e000      	b.n	11ac <pvPortMalloc+0x24>
            xWantedSize = 0;
    11aa:	2400      	movs	r4, #0
    vTaskSuspendAll();
    11ac:	4b28      	ldr	r3, [pc, #160]	; (1250 <pvPortMalloc+0xc8>)
    11ae:	4798      	blx	r3
        if( xHeapHasBeenInitialised == pdFALSE )
    11b0:	4b28      	ldr	r3, [pc, #160]	; (1254 <pvPortMalloc+0xcc>)
    11b2:	f8d3 3970 	ldr.w	r3, [r3, #2416]	; 0x970
    11b6:	b17b      	cbz	r3, 11d8 <pvPortMalloc+0x50>
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
    11b8:	2c00      	cmp	r4, #0
    11ba:	db41      	blt.n	1240 <pvPortMalloc+0xb8>
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    11bc:	2c00      	cmp	r4, #0
    11be:	d041      	beq.n	1244 <pvPortMalloc+0xbc>
    11c0:	4b25      	ldr	r3, [pc, #148]	; (1258 <pvPortMalloc+0xd0>)
    11c2:	681e      	ldr	r6, [r3, #0]
    11c4:	42b4      	cmp	r4, r6
    11c6:	d83f      	bhi.n	1248 <pvPortMalloc+0xc0>
                pxBlock = xStart.pxNextFreeBlock;
    11c8:	4922      	ldr	r1, [pc, #136]	; (1254 <pvPortMalloc+0xcc>)
    11ca:	f8d1 3960 	ldr.w	r3, [r1, #2400]	; 0x960
                pxPreviousBlock = &xStart;
    11ce:	f501 6116 	add.w	r1, r1, #2400	; 0x960
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    11d2:	e00a      	b.n	11ea <pvPortMalloc+0x62>
                    xWantedSize = 0;
    11d4:	2400      	movs	r4, #0
    11d6:	e7e9      	b.n	11ac <pvPortMalloc+0x24>
            prvHeapInit();
    11d8:	4b20      	ldr	r3, [pc, #128]	; (125c <pvPortMalloc+0xd4>)
    11da:	4798      	blx	r3
            xHeapHasBeenInitialised = pdTRUE;
    11dc:	2201      	movs	r2, #1
    11de:	4b1d      	ldr	r3, [pc, #116]	; (1254 <pvPortMalloc+0xcc>)
    11e0:	f8c3 2970 	str.w	r2, [r3, #2416]	; 0x970
    11e4:	e7e8      	b.n	11b8 <pvPortMalloc+0x30>
                    pxPreviousBlock = pxBlock;
    11e6:	4619      	mov	r1, r3
                    pxBlock = pxBlock->pxNextFreeBlock;
    11e8:	4613      	mov	r3, r2
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    11ea:	685a      	ldr	r2, [r3, #4]
    11ec:	4294      	cmp	r4, r2
    11ee:	d902      	bls.n	11f6 <pvPortMalloc+0x6e>
    11f0:	681a      	ldr	r2, [r3, #0]
    11f2:	2a00      	cmp	r2, #0
    11f4:	d1f7      	bne.n	11e6 <pvPortMalloc+0x5e>
                if( pxBlock != &xEnd )
    11f6:	4a1a      	ldr	r2, [pc, #104]	; (1260 <pvPortMalloc+0xd8>)
    11f8:	4293      	cmp	r3, r2
    11fa:	d027      	beq.n	124c <pvPortMalloc+0xc4>
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    11fc:	680d      	ldr	r5, [r1, #0]
    11fe:	3508      	adds	r5, #8
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    1200:	681a      	ldr	r2, [r3, #0]
    1202:	600a      	str	r2, [r1, #0]
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    1204:	685a      	ldr	r2, [r3, #4]
    1206:	1b12      	subs	r2, r2, r4
    1208:	2a10      	cmp	r2, #16
    120a:	d90c      	bls.n	1226 <pvPortMalloc+0x9e>
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    120c:	191f      	adds	r7, r3, r4
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    120e:	607a      	str	r2, [r7, #4]
                        pxBlock->xBlockSize = xWantedSize;
    1210:	605c      	str	r4, [r3, #4]
                        prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    1212:	687c      	ldr	r4, [r7, #4]
    1214:	4913      	ldr	r1, [pc, #76]	; (1264 <pvPortMalloc+0xdc>)
    1216:	e000      	b.n	121a <pvPortMalloc+0x92>
    1218:	4611      	mov	r1, r2
    121a:	680a      	ldr	r2, [r1, #0]
    121c:	6850      	ldr	r0, [r2, #4]
    121e:	4284      	cmp	r4, r0
    1220:	d8fa      	bhi.n	1218 <pvPortMalloc+0x90>
    1222:	603a      	str	r2, [r7, #0]
    1224:	600f      	str	r7, [r1, #0]
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
    1226:	685a      	ldr	r2, [r3, #4]
    1228:	1ab6      	subs	r6, r6, r2
    122a:	490b      	ldr	r1, [pc, #44]	; (1258 <pvPortMalloc+0xd0>)
    122c:	600e      	str	r6, [r1, #0]
                    heapALLOCATE_BLOCK( pxBlock );
    122e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    1232:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
    1234:	2200      	movs	r2, #0
    1236:	601a      	str	r2, [r3, #0]
    ( void ) xTaskResumeAll();
    1238:	4b0b      	ldr	r3, [pc, #44]	; (1268 <pvPortMalloc+0xe0>)
    123a:	4798      	blx	r3
}
    123c:	4628      	mov	r0, r5
    123e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    void * pvReturn = NULL;
    1240:	2500      	movs	r5, #0
    1242:	e7f9      	b.n	1238 <pvPortMalloc+0xb0>
    1244:	2500      	movs	r5, #0
    1246:	e7f7      	b.n	1238 <pvPortMalloc+0xb0>
    1248:	2500      	movs	r5, #0
    124a:	e7f5      	b.n	1238 <pvPortMalloc+0xb0>
    124c:	2500      	movs	r5, #0
    124e:	e7f3      	b.n	1238 <pvPortMalloc+0xb0>
    1250:	00002071 	.word	0x00002071
    1254:	200031a0 	.word	0x200031a0
    1258:	20000004 	.word	0x20000004
    125c:	0000115d 	.word	0x0000115d
    1260:	20003b08 	.word	0x20003b08
    1264:	20003b00 	.word	0x20003b00
    1268:	00002221 	.word	0x00002221

0000126c <vPortFree>:
    if( pv != NULL )
    126c:	2800      	cmp	r0, #0
    126e:	d037      	beq.n	12e0 <vPortFree+0x74>
{
    1270:	b538      	push	{r3, r4, r5, lr}
    1272:	4604      	mov	r4, r0
        puc -= xHeapStructSize;
    1274:	f1a0 0508 	sub.w	r5, r0, #8
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
    1278:	f850 3c04 	ldr.w	r3, [r0, #-4]
    127c:	2b00      	cmp	r3, #0
    127e:	db08      	blt.n	1292 <vPortFree+0x26>
    1280:	f04f 0380 	mov.w	r3, #128	; 0x80
    1284:	f383 8811 	msr	BASEPRI, r3
    1288:	f3bf 8f6f 	isb	sy
    128c:	f3bf 8f4f 	dsb	sy
    1290:	e7fe      	b.n	1290 <vPortFree+0x24>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
    1292:	f850 2c08 	ldr.w	r2, [r0, #-8]
    1296:	b142      	cbz	r2, 12aa <vPortFree+0x3e>
    1298:	f04f 0380 	mov.w	r3, #128	; 0x80
    129c:	f383 8811 	msr	BASEPRI, r3
    12a0:	f3bf 8f6f 	isb	sy
    12a4:	f3bf 8f4f 	dsb	sy
    12a8:	e7fe      	b.n	12a8 <vPortFree+0x3c>
                heapFREE_BLOCK( pxLink );
    12aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    12ae:	f840 3c04 	str.w	r3, [r0, #-4]
                vTaskSuspendAll();
    12b2:	4b0c      	ldr	r3, [pc, #48]	; (12e4 <vPortFree+0x78>)
    12b4:	4798      	blx	r3
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    12b6:	f854 1c04 	ldr.w	r1, [r4, #-4]
    12ba:	4b0b      	ldr	r3, [pc, #44]	; (12e8 <vPortFree+0x7c>)
    12bc:	681a      	ldr	r2, [r3, #0]
    12be:	6850      	ldr	r0, [r2, #4]
    12c0:	4281      	cmp	r1, r0
    12c2:	d80b      	bhi.n	12dc <vPortFree+0x70>
    12c4:	f844 2c08 	str.w	r2, [r4, #-8]
    12c8:	601d      	str	r5, [r3, #0]
                    xFreeBytesRemaining += pxLink->xBlockSize;
    12ca:	f854 1c04 	ldr.w	r1, [r4, #-4]
    12ce:	4a07      	ldr	r2, [pc, #28]	; (12ec <vPortFree+0x80>)
    12d0:	6813      	ldr	r3, [r2, #0]
    12d2:	440b      	add	r3, r1
    12d4:	6013      	str	r3, [r2, #0]
                ( void ) xTaskResumeAll();
    12d6:	4b06      	ldr	r3, [pc, #24]	; (12f0 <vPortFree+0x84>)
    12d8:	4798      	blx	r3
    12da:	bd38      	pop	{r3, r4, r5, pc}
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    12dc:	4613      	mov	r3, r2
    12de:	e7ed      	b.n	12bc <vPortFree+0x50>
    12e0:	4770      	bx	lr
    12e2:	bf00      	nop
    12e4:	00002071 	.word	0x00002071
    12e8:	20003b00 	.word	0x20003b00
    12ec:	20000004 	.word	0x20000004
    12f0:	00002221 	.word	0x00002221

000012f4 <prvGetDisinheritPriorityAfterTimeout>:
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
    12f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
    12f6:	b123      	cbz	r3, 1302 <prvGetDisinheritPriorityAfterTimeout+0xe>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
    12f8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    12fa:	6818      	ldr	r0, [r3, #0]
    12fc:	f1c0 0005 	rsb	r0, r0, #5
    1300:	4770      	bx	lr
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
    1302:	2000      	movs	r0, #0
        }

        return uxHighestPriorityOfWaitingTasks;
    }
    1304:	4770      	bx	lr
	...

00001308 <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
    1308:	b510      	push	{r4, lr}
    130a:	4604      	mov	r4, r0
    BaseType_t xReturn;

    taskENTER_CRITICAL();
    130c:	4b06      	ldr	r3, [pc, #24]	; (1328 <prvIsQueueFull+0x20>)
    130e:	4798      	blx	r3
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    1310:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    1312:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1314:	429a      	cmp	r2, r3
    1316:	d004      	beq.n	1322 <prvIsQueueFull+0x1a>
        {
            xReturn = pdTRUE;
        }
        else
        {
            xReturn = pdFALSE;
    1318:	2400      	movs	r4, #0
        }
    }
    taskEXIT_CRITICAL();
    131a:	4b04      	ldr	r3, [pc, #16]	; (132c <prvIsQueueFull+0x24>)
    131c:	4798      	blx	r3

    return xReturn;
}
    131e:	4620      	mov	r0, r4
    1320:	bd10      	pop	{r4, pc}
            xReturn = pdTRUE;
    1322:	2401      	movs	r4, #1
    1324:	e7f9      	b.n	131a <prvIsQueueFull+0x12>
    1326:	bf00      	nop
    1328:	00000f05 	.word	0x00000f05
    132c:	00000f49 	.word	0x00000f49

00001330 <prvIsQueueEmpty>:
{
    1330:	b510      	push	{r4, lr}
    1332:	4604      	mov	r4, r0
    taskENTER_CRITICAL();
    1334:	4b05      	ldr	r3, [pc, #20]	; (134c <prvIsQueueEmpty+0x1c>)
    1336:	4798      	blx	r3
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
    1338:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    133a:	b123      	cbz	r3, 1346 <prvIsQueueEmpty+0x16>
            xReturn = pdFALSE;
    133c:	2400      	movs	r4, #0
    taskEXIT_CRITICAL();
    133e:	4b04      	ldr	r3, [pc, #16]	; (1350 <prvIsQueueEmpty+0x20>)
    1340:	4798      	blx	r3
}
    1342:	4620      	mov	r0, r4
    1344:	bd10      	pop	{r4, pc}
            xReturn = pdTRUE;
    1346:	2401      	movs	r4, #1
    1348:	e7f9      	b.n	133e <prvIsQueueEmpty+0xe>
    134a:	bf00      	nop
    134c:	00000f05 	.word	0x00000f05
    1350:	00000f49 	.word	0x00000f49

00001354 <prvCopyDataToQueue>:
{
    1354:	b570      	push	{r4, r5, r6, lr}
    1356:	4604      	mov	r4, r0
    1358:	4616      	mov	r6, r2
    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    135a:	6b85      	ldr	r5, [r0, #56]	; 0x38
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    135c:	6c02      	ldr	r2, [r0, #64]	; 0x40
    135e:	b952      	cbnz	r2, 1376 <prvCopyDataToQueue+0x22>
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1360:	6803      	ldr	r3, [r0, #0]
    1362:	2b00      	cmp	r3, #0
    1364:	d12a      	bne.n	13bc <prvCopyDataToQueue+0x68>
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
    1366:	6880      	ldr	r0, [r0, #8]
    1368:	4b18      	ldr	r3, [pc, #96]	; (13cc <prvCopyDataToQueue+0x78>)
    136a:	4798      	blx	r3
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
    136c:	2300      	movs	r3, #0
    136e:	60a3      	str	r3, [r4, #8]
    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
    1370:	3501      	adds	r5, #1
    1372:	63a5      	str	r5, [r4, #56]	; 0x38
}
    1374:	bd70      	pop	{r4, r5, r6, pc}
    else if( xPosition == queueSEND_TO_BACK )
    1376:	b96e      	cbnz	r6, 1394 <prvCopyDataToQueue+0x40>
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
    1378:	6840      	ldr	r0, [r0, #4]
    137a:	4b15      	ldr	r3, [pc, #84]	; (13d0 <prvCopyDataToQueue+0x7c>)
    137c:	4798      	blx	r3
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
    137e:	6c22      	ldr	r2, [r4, #64]	; 0x40
    1380:	6863      	ldr	r3, [r4, #4]
    1382:	4413      	add	r3, r2
    1384:	6063      	str	r3, [r4, #4]
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
    1386:	68a2      	ldr	r2, [r4, #8]
    1388:	4293      	cmp	r3, r2
    138a:	d319      	bcc.n	13c0 <prvCopyDataToQueue+0x6c>
            pxQueue->pcWriteTo = pxQueue->pcHead;
    138c:	6823      	ldr	r3, [r4, #0]
    138e:	6063      	str	r3, [r4, #4]
    BaseType_t xReturn = pdFALSE;
    1390:	2000      	movs	r0, #0
    1392:	e7ed      	b.n	1370 <prvCopyDataToQueue+0x1c>
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
    1394:	68c0      	ldr	r0, [r0, #12]
    1396:	4b0e      	ldr	r3, [pc, #56]	; (13d0 <prvCopyDataToQueue+0x7c>)
    1398:	4798      	blx	r3
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
    139a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    139c:	425b      	negs	r3, r3
    139e:	68e2      	ldr	r2, [r4, #12]
    13a0:	441a      	add	r2, r3
    13a2:	60e2      	str	r2, [r4, #12]
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
    13a4:	6821      	ldr	r1, [r4, #0]
    13a6:	428a      	cmp	r2, r1
    13a8:	d202      	bcs.n	13b0 <prvCopyDataToQueue+0x5c>
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
    13aa:	68a2      	ldr	r2, [r4, #8]
    13ac:	4413      	add	r3, r2
    13ae:	60e3      	str	r3, [r4, #12]
        if( xPosition == queueOVERWRITE )
    13b0:	2e02      	cmp	r6, #2
    13b2:	d107      	bne.n	13c4 <prvCopyDataToQueue+0x70>
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    13b4:	b145      	cbz	r5, 13c8 <prvCopyDataToQueue+0x74>
                --uxMessagesWaiting;
    13b6:	3d01      	subs	r5, #1
    BaseType_t xReturn = pdFALSE;
    13b8:	2000      	movs	r0, #0
    13ba:	e7d9      	b.n	1370 <prvCopyDataToQueue+0x1c>
    13bc:	2000      	movs	r0, #0
    13be:	e7d7      	b.n	1370 <prvCopyDataToQueue+0x1c>
    13c0:	2000      	movs	r0, #0
    13c2:	e7d5      	b.n	1370 <prvCopyDataToQueue+0x1c>
    13c4:	2000      	movs	r0, #0
    13c6:	e7d3      	b.n	1370 <prvCopyDataToQueue+0x1c>
    13c8:	2000      	movs	r0, #0
    13ca:	e7d1      	b.n	1370 <prvCopyDataToQueue+0x1c>
    13cc:	000027c5 	.word	0x000027c5
    13d0:	00002eb9 	.word	0x00002eb9

000013d4 <prvCopyDataFromQueue>:
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    13d4:	6c02      	ldr	r2, [r0, #64]	; 0x40
    13d6:	b172      	cbz	r2, 13f6 <prvCopyDataFromQueue+0x22>
{
    13d8:	b510      	push	{r4, lr}
    13da:	4603      	mov	r3, r0
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
    13dc:	68c4      	ldr	r4, [r0, #12]
    13de:	4414      	add	r4, r2
    13e0:	60c4      	str	r4, [r0, #12]
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
    13e2:	6880      	ldr	r0, [r0, #8]
    13e4:	4284      	cmp	r4, r0
    13e6:	d301      	bcc.n	13ec <prvCopyDataFromQueue+0x18>
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
    13e8:	6818      	ldr	r0, [r3, #0]
    13ea:	60d8      	str	r0, [r3, #12]
    13ec:	4608      	mov	r0, r1
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
    13ee:	68d9      	ldr	r1, [r3, #12]
    13f0:	4b01      	ldr	r3, [pc, #4]	; (13f8 <prvCopyDataFromQueue+0x24>)
    13f2:	4798      	blx	r3
    13f4:	bd10      	pop	{r4, pc}
    13f6:	4770      	bx	lr
    13f8:	00002eb9 	.word	0x00002eb9

000013fc <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
    {
    13fc:	b570      	push	{r4, r5, r6, lr}
    13fe:	b082      	sub	sp, #8
    1400:	9001      	str	r0, [sp, #4]
        Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    1402:	6c85      	ldr	r5, [r0, #72]	; 0x48
        /* This function must be called form a critical section. */

        /* The following line is not reachable in unit tests because every call
         * to prvNotifyQueueSetContainer is preceded by a check that
         * pxQueueSetContainer != NULL */
        configASSERT( pxQueueSetContainer ); /* LCOV_EXCL_BR_LINE */
    1404:	b165      	cbz	r5, 1420 <prvNotifyQueueSetContainer+0x24>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    1406:	6baa      	ldr	r2, [r5, #56]	; 0x38
    1408:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    140a:	429a      	cmp	r2, r3
    140c:	d311      	bcc.n	1432 <prvNotifyQueueSetContainer+0x36>
    140e:	f04f 0380 	mov.w	r3, #128	; 0x80
    1412:	f383 8811 	msr	BASEPRI, r3
    1416:	f3bf 8f6f 	isb	sy
    141a:	f3bf 8f4f 	dsb	sy
    141e:	e7fe      	b.n	141e <prvNotifyQueueSetContainer+0x22>
    1420:	f04f 0380 	mov.w	r3, #128	; 0x80
    1424:	f383 8811 	msr	BASEPRI, r3
    1428:	f3bf 8f6f 	isb	sy
    142c:	f3bf 8f4f 	dsb	sy
    1430:	e7fe      	b.n	1430 <prvNotifyQueueSetContainer+0x34>

        if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    1432:	6baa      	ldr	r2, [r5, #56]	; 0x38
    1434:	4293      	cmp	r3, r2
    1436:	d803      	bhi.n	1440 <prvNotifyQueueSetContainer+0x44>
        BaseType_t xReturn = pdFALSE;
    1438:	2600      	movs	r6, #0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    143a:	4630      	mov	r0, r6
    143c:	b002      	add	sp, #8
    143e:	bd70      	pop	{r4, r5, r6, pc}
            const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    1440:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
    1444:	b264      	sxtb	r4, r4
            xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
    1446:	2200      	movs	r2, #0
    1448:	a901      	add	r1, sp, #4
    144a:	4628      	mov	r0, r5
    144c:	4b12      	ldr	r3, [pc, #72]	; (1498 <prvNotifyQueueSetContainer+0x9c>)
    144e:	4798      	blx	r3
    1450:	4606      	mov	r6, r0
            if( cTxLock == queueUNLOCKED )
    1452:	f1b4 3fff 	cmp.w	r4, #4294967295
    1456:	d10a      	bne.n	146e <prvNotifyQueueSetContainer+0x72>
                if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    1458:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    145a:	2b00      	cmp	r3, #0
    145c:	d0ed      	beq.n	143a <prvNotifyQueueSetContainer+0x3e>
                    if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    145e:	f105 0024 	add.w	r0, r5, #36	; 0x24
    1462:	4b0e      	ldr	r3, [pc, #56]	; (149c <prvNotifyQueueSetContainer+0xa0>)
    1464:	4798      	blx	r3
    1466:	2800      	cmp	r0, #0
    1468:	d0e7      	beq.n	143a <prvNotifyQueueSetContainer+0x3e>
                        xReturn = pdTRUE;
    146a:	2601      	movs	r6, #1
        return xReturn;
    146c:	e7e5      	b.n	143a <prvNotifyQueueSetContainer+0x3e>
                prvIncrementQueueTxLock( pxQueueSetContainer, cTxLock );
    146e:	4b0c      	ldr	r3, [pc, #48]	; (14a0 <prvNotifyQueueSetContainer+0xa4>)
    1470:	4798      	blx	r3
    1472:	42a0      	cmp	r0, r4
    1474:	d9e1      	bls.n	143a <prvNotifyQueueSetContainer+0x3e>
    1476:	2c7f      	cmp	r4, #127	; 0x7f
    1478:	d108      	bne.n	148c <prvNotifyQueueSetContainer+0x90>
    147a:	f04f 0380 	mov.w	r3, #128	; 0x80
    147e:	f383 8811 	msr	BASEPRI, r3
    1482:	f3bf 8f6f 	isb	sy
    1486:	f3bf 8f4f 	dsb	sy
    148a:	e7fe      	b.n	148a <prvNotifyQueueSetContainer+0x8e>
    148c:	1c63      	adds	r3, r4, #1
    148e:	b25b      	sxtb	r3, r3
    1490:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
    1494:	e7d1      	b.n	143a <prvNotifyQueueSetContainer+0x3e>
    1496:	bf00      	nop
    1498:	00001355 	.word	0x00001355
    149c:	0000252d 	.word	0x0000252d
    14a0:	00002091 	.word	0x00002091

000014a4 <prvUnlockQueue>:
{
    14a4:	b538      	push	{r3, r4, r5, lr}
    14a6:	4605      	mov	r5, r0
    taskENTER_CRITICAL();
    14a8:	4b1f      	ldr	r3, [pc, #124]	; (1528 <prvUnlockQueue+0x84>)
    14aa:	4798      	blx	r3
        int8_t cTxLock = pxQueue->cTxLock;
    14ac:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
    14b0:	b264      	sxtb	r4, r4
        while( cTxLock > queueLOCKED_UNMODIFIED )
    14b2:	e008      	b.n	14c6 <prvUnlockQueue+0x22>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    14b4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    14b6:	b1b3      	cbz	r3, 14e6 <prvUnlockQueue+0x42>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    14b8:	f105 0024 	add.w	r0, r5, #36	; 0x24
    14bc:	4b1b      	ldr	r3, [pc, #108]	; (152c <prvUnlockQueue+0x88>)
    14be:	4798      	blx	r3
    14c0:	b970      	cbnz	r0, 14e0 <prvUnlockQueue+0x3c>
            --cTxLock;
    14c2:	3c01      	subs	r4, #1
    14c4:	b264      	sxtb	r4, r4
        while( cTxLock > queueLOCKED_UNMODIFIED )
    14c6:	2c00      	cmp	r4, #0
    14c8:	dd0d      	ble.n	14e6 <prvUnlockQueue+0x42>
                if( pxQueue->pxQueueSetContainer != NULL )
    14ca:	6cab      	ldr	r3, [r5, #72]	; 0x48
    14cc:	2b00      	cmp	r3, #0
    14ce:	d0f1      	beq.n	14b4 <prvUnlockQueue+0x10>
                    if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
    14d0:	4628      	mov	r0, r5
    14d2:	4b17      	ldr	r3, [pc, #92]	; (1530 <prvUnlockQueue+0x8c>)
    14d4:	4798      	blx	r3
    14d6:	2800      	cmp	r0, #0
    14d8:	d0f3      	beq.n	14c2 <prvUnlockQueue+0x1e>
                        vTaskMissedYield();
    14da:	4b16      	ldr	r3, [pc, #88]	; (1534 <prvUnlockQueue+0x90>)
    14dc:	4798      	blx	r3
    14de:	e7f0      	b.n	14c2 <prvUnlockQueue+0x1e>
                            vTaskMissedYield();
    14e0:	4b14      	ldr	r3, [pc, #80]	; (1534 <prvUnlockQueue+0x90>)
    14e2:	4798      	blx	r3
    14e4:	e7ed      	b.n	14c2 <prvUnlockQueue+0x1e>
        pxQueue->cTxLock = queueUNLOCKED;
    14e6:	23ff      	movs	r3, #255	; 0xff
    14e8:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
    taskEXIT_CRITICAL();
    14ec:	4b12      	ldr	r3, [pc, #72]	; (1538 <prvUnlockQueue+0x94>)
    14ee:	4798      	blx	r3
    taskENTER_CRITICAL();
    14f0:	4b0d      	ldr	r3, [pc, #52]	; (1528 <prvUnlockQueue+0x84>)
    14f2:	4798      	blx	r3
        int8_t cRxLock = pxQueue->cRxLock;
    14f4:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
    14f8:	b264      	sxtb	r4, r4
        while( cRxLock > queueLOCKED_UNMODIFIED )
    14fa:	e001      	b.n	1500 <prvUnlockQueue+0x5c>
                --cRxLock;
    14fc:	3c01      	subs	r4, #1
    14fe:	b264      	sxtb	r4, r4
        while( cRxLock > queueLOCKED_UNMODIFIED )
    1500:	2c00      	cmp	r4, #0
    1502:	dd0a      	ble.n	151a <prvUnlockQueue+0x76>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1504:	692b      	ldr	r3, [r5, #16]
    1506:	b143      	cbz	r3, 151a <prvUnlockQueue+0x76>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1508:	f105 0010 	add.w	r0, r5, #16
    150c:	4b07      	ldr	r3, [pc, #28]	; (152c <prvUnlockQueue+0x88>)
    150e:	4798      	blx	r3
    1510:	2800      	cmp	r0, #0
    1512:	d0f3      	beq.n	14fc <prvUnlockQueue+0x58>
                    vTaskMissedYield();
    1514:	4b07      	ldr	r3, [pc, #28]	; (1534 <prvUnlockQueue+0x90>)
    1516:	4798      	blx	r3
    1518:	e7f0      	b.n	14fc <prvUnlockQueue+0x58>
        pxQueue->cRxLock = queueUNLOCKED;
    151a:	23ff      	movs	r3, #255	; 0xff
    151c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
    taskEXIT_CRITICAL();
    1520:	4b05      	ldr	r3, [pc, #20]	; (1538 <prvUnlockQueue+0x94>)
    1522:	4798      	blx	r3
    1524:	bd38      	pop	{r3, r4, r5, pc}
    1526:	bf00      	nop
    1528:	00000f05 	.word	0x00000f05
    152c:	0000252d 	.word	0x0000252d
    1530:	000013fd 	.word	0x000013fd
    1534:	000026cd 	.word	0x000026cd
    1538:	00000f49 	.word	0x00000f49

0000153c <xQueueGenericReset>:
{
    153c:	b538      	push	{r3, r4, r5, lr}
    configASSERT( pxQueue );
    153e:	b160      	cbz	r0, 155a <xQueueGenericReset+0x1e>
    1540:	4604      	mov	r4, r0
        ( pxQueue->uxLength >= 1U ) &&
    1542:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
    1544:	2a00      	cmp	r2, #0
    1546:	d042      	beq.n	15ce <xQueueGenericReset+0x92>
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
    1548:	f04f 33ff 	mov.w	r3, #4294967295
    154c:	fbb3 f3f2 	udiv	r3, r3, r2
    1550:	6c02      	ldr	r2, [r0, #64]	; 0x40
        ( pxQueue->uxLength >= 1U ) &&
    1552:	4293      	cmp	r3, r2
    1554:	d20a      	bcs.n	156c <xQueueGenericReset+0x30>
        xReturn = pdFAIL;
    1556:	2000      	movs	r0, #0
    1558:	e03a      	b.n	15d0 <xQueueGenericReset+0x94>
    155a:	f04f 0380 	mov.w	r3, #128	; 0x80
    155e:	f383 8811 	msr	BASEPRI, r3
    1562:	f3bf 8f6f 	isb	sy
    1566:	f3bf 8f4f 	dsb	sy
    156a:	e7fe      	b.n	156a <xQueueGenericReset+0x2e>
    156c:	460d      	mov	r5, r1
        taskENTER_CRITICAL();
    156e:	4b1e      	ldr	r3, [pc, #120]	; (15e8 <xQueueGenericReset+0xac>)
    1570:	4798      	blx	r3
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    1572:	6821      	ldr	r1, [r4, #0]
    1574:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    1576:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1578:	fb03 1002 	mla	r0, r3, r2, r1
    157c:	60a0      	str	r0, [r4, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    157e:	2000      	movs	r0, #0
    1580:	63a0      	str	r0, [r4, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
    1582:	6061      	str	r1, [r4, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
    1584:	3a01      	subs	r2, #1
    1586:	fb02 1303 	mla	r3, r2, r3, r1
    158a:	60e3      	str	r3, [r4, #12]
            pxQueue->cRxLock = queueUNLOCKED;
    158c:	23ff      	movs	r3, #255	; 0xff
    158e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
    1592:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
            if( xNewQueue == pdFALSE )
    1596:	b995      	cbnz	r5, 15be <xQueueGenericReset+0x82>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1598:	6923      	ldr	r3, [r4, #16]
    159a:	b163      	cbz	r3, 15b6 <xQueueGenericReset+0x7a>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    159c:	f104 0010 	add.w	r0, r4, #16
    15a0:	4b12      	ldr	r3, [pc, #72]	; (15ec <xQueueGenericReset+0xb0>)
    15a2:	4798      	blx	r3
    15a4:	b138      	cbz	r0, 15b6 <xQueueGenericReset+0x7a>
                        queueYIELD_IF_USING_PREEMPTION();
    15a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    15aa:	4b11      	ldr	r3, [pc, #68]	; (15f0 <xQueueGenericReset+0xb4>)
    15ac:	601a      	str	r2, [r3, #0]
    15ae:	f3bf 8f4f 	dsb	sy
    15b2:	f3bf 8f6f 	isb	sy
        taskEXIT_CRITICAL();
    15b6:	4b0f      	ldr	r3, [pc, #60]	; (15f4 <xQueueGenericReset+0xb8>)
    15b8:	4798      	blx	r3
    BaseType_t xReturn = pdPASS;
    15ba:	2001      	movs	r0, #1
        taskEXIT_CRITICAL();
    15bc:	e008      	b.n	15d0 <xQueueGenericReset+0x94>
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    15be:	f104 0010 	add.w	r0, r4, #16
    15c2:	4d0d      	ldr	r5, [pc, #52]	; (15f8 <xQueueGenericReset+0xbc>)
    15c4:	47a8      	blx	r5
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    15c6:	f104 0024 	add.w	r0, r4, #36	; 0x24
    15ca:	47a8      	blx	r5
    15cc:	e7f3      	b.n	15b6 <xQueueGenericReset+0x7a>
        xReturn = pdFAIL;
    15ce:	2000      	movs	r0, #0
    configASSERT( xReturn != pdFAIL );
    15d0:	b940      	cbnz	r0, 15e4 <xQueueGenericReset+0xa8>
    15d2:	f04f 0380 	mov.w	r3, #128	; 0x80
    15d6:	f383 8811 	msr	BASEPRI, r3
    15da:	f3bf 8f6f 	isb	sy
    15de:	f3bf 8f4f 	dsb	sy
    15e2:	e7fe      	b.n	15e2 <xQueueGenericReset+0xa6>
}
    15e4:	bd38      	pop	{r3, r4, r5, pc}
    15e6:	bf00      	nop
    15e8:	00000f05 	.word	0x00000f05
    15ec:	0000252d 	.word	0x0000252d
    15f0:	e000ed04 	.word	0xe000ed04
    15f4:	00000f49 	.word	0x00000f49
    15f8:	00000d51 	.word	0x00000d51

000015fc <prvInitialiseNewQueue>:
{
    15fc:	b538      	push	{r3, r4, r5, lr}
    15fe:	461d      	mov	r5, r3
    1600:	9c04      	ldr	r4, [sp, #16]
    if( uxItemSize == ( UBaseType_t ) 0 )
    1602:	460b      	mov	r3, r1
    1604:	b959      	cbnz	r1, 161e <prvInitialiseNewQueue+0x22>
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    1606:	6024      	str	r4, [r4, #0]
    pxNewQueue->uxLength = uxQueueLength;
    1608:	63e0      	str	r0, [r4, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
    160a:	6423      	str	r3, [r4, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    160c:	2101      	movs	r1, #1
    160e:	4620      	mov	r0, r4
    1610:	4b04      	ldr	r3, [pc, #16]	; (1624 <prvInitialiseNewQueue+0x28>)
    1612:	4798      	blx	r3
        pxNewQueue->ucQueueType = ucQueueType;
    1614:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
        pxNewQueue->pxQueueSetContainer = NULL;
    1618:	2300      	movs	r3, #0
    161a:	64a3      	str	r3, [r4, #72]	; 0x48
    161c:	bd38      	pop	{r3, r4, r5, pc}
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    161e:	6022      	str	r2, [r4, #0]
    1620:	e7f2      	b.n	1608 <prvInitialiseNewQueue+0xc>
    1622:	bf00      	nop
    1624:	0000153d 	.word	0x0000153d

00001628 <xQueueGenericCreateStatic>:
        configASSERT( pxStaticQueue );
    1628:	b1ab      	cbz	r3, 1656 <xQueueGenericCreateStatic+0x2e>
    {
    162a:	b530      	push	{r4, r5, lr}
    162c:	b085      	sub	sp, #20
    162e:	461c      	mov	r4, r3
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
    1630:	b1d0      	cbz	r0, 1668 <xQueueGenericCreateStatic+0x40>
            ( pxStaticQueue != NULL ) &&
    1632:	b102      	cbz	r2, 1636 <xQueueGenericCreateStatic+0xe>
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0U ) ) ) &&
    1634:	b1c1      	cbz	r1, 1668 <xQueueGenericCreateStatic+0x40>
    1636:	b902      	cbnz	r2, 163a <xQueueGenericCreateStatic+0x12>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0U ) ) ) )
    1638:	b9b1      	cbnz	r1, 1668 <xQueueGenericCreateStatic+0x40>
                volatile size_t xSize = sizeof( StaticQueue_t );
    163a:	2354      	movs	r3, #84	; 0x54
    163c:	9303      	str	r3, [sp, #12]
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
    163e:	9b03      	ldr	r3, [sp, #12]
    1640:	2b54      	cmp	r3, #84	; 0x54
    1642:	d01a      	beq.n	167a <xQueueGenericCreateStatic+0x52>
    1644:	f04f 0380 	mov.w	r3, #128	; 0x80
    1648:	f383 8811 	msr	BASEPRI, r3
    164c:	f3bf 8f6f 	isb	sy
    1650:	f3bf 8f4f 	dsb	sy
    1654:	e7fe      	b.n	1654 <xQueueGenericCreateStatic+0x2c>
    1656:	f04f 0380 	mov.w	r3, #128	; 0x80
    165a:	f383 8811 	msr	BASEPRI, r3
    165e:	f3bf 8f6f 	isb	sy
    1662:	f3bf 8f4f 	dsb	sy
    1666:	e7fe      	b.n	1666 <xQueueGenericCreateStatic+0x3e>
    1668:	f04f 0380 	mov.w	r3, #128	; 0x80
    166c:	f383 8811 	msr	BASEPRI, r3
    1670:	f3bf 8f6f 	isb	sy
    1674:	f3bf 8f4f 	dsb	sy
    1678:	e7fe      	b.n	1678 <xQueueGenericCreateStatic+0x50>
                ( void ) xSize;                             /* Prevent unused variable warning when configASSERT() is not defined. */
    167a:	9b03      	ldr	r3, [sp, #12]
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
    167c:	2301      	movs	r3, #1
    167e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    1682:	9400      	str	r4, [sp, #0]
    1684:	f89d 3020 	ldrb.w	r3, [sp, #32]
    1688:	4d02      	ldr	r5, [pc, #8]	; (1694 <xQueueGenericCreateStatic+0x6c>)
    168a:	47a8      	blx	r5
    }
    168c:	4620      	mov	r0, r4
    168e:	b005      	add	sp, #20
    1690:	bd30      	pop	{r4, r5, pc}
    1692:	bf00      	nop
    1694:	000015fd 	.word	0x000015fd

00001698 <xQueueGenericCreate>:
    {
    1698:	b5f0      	push	{r4, r5, r6, r7, lr}
    169a:	b083      	sub	sp, #12
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
    169c:	b300      	cbz	r0, 16e0 <xQueueGenericCreate+0x48>
    169e:	4607      	mov	r7, r0
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
    16a0:	f04f 30ff 	mov.w	r0, #4294967295
    16a4:	fbb0 f0f7 	udiv	r0, r0, r7
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
    16a8:	4288      	cmp	r0, r1
    16aa:	d319      	bcc.n	16e0 <xQueueGenericCreate+0x48>
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
    16ac:	fb01 f007 	mul.w	r0, r1, r7
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
    16b0:	f110 0f55 	cmn.w	r0, #85	; 0x55
    16b4:	d814      	bhi.n	16e0 <xQueueGenericCreate+0x48>
    16b6:	4616      	mov	r6, r2
    16b8:	460c      	mov	r4, r1
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    16ba:	3054      	adds	r0, #84	; 0x54
    16bc:	4b0d      	ldr	r3, [pc, #52]	; (16f4 <xQueueGenericCreate+0x5c>)
    16be:	4798      	blx	r3
            if( pxNewQueue != NULL )
    16c0:	4605      	mov	r5, r0
    16c2:	b150      	cbz	r0, 16da <xQueueGenericCreate+0x42>
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
    16c4:	2300      	movs	r3, #0
    16c6:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    16ca:	9000      	str	r0, [sp, #0]
    16cc:	4633      	mov	r3, r6
    16ce:	f100 0254 	add.w	r2, r0, #84	; 0x54
    16d2:	4621      	mov	r1, r4
    16d4:	4638      	mov	r0, r7
    16d6:	4c08      	ldr	r4, [pc, #32]	; (16f8 <xQueueGenericCreate+0x60>)
    16d8:	47a0      	blx	r4
    }
    16da:	4628      	mov	r0, r5
    16dc:	b003      	add	sp, #12
    16de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    16e0:	f04f 0380 	mov.w	r3, #128	; 0x80
    16e4:	f383 8811 	msr	BASEPRI, r3
    16e8:	f3bf 8f6f 	isb	sy
    16ec:	f3bf 8f4f 	dsb	sy
    16f0:	e7fe      	b.n	16f0 <xQueueGenericCreate+0x58>
    16f2:	bf00      	nop
    16f4:	00001189 	.word	0x00001189
    16f8:	000015fd 	.word	0x000015fd

000016fc <xQueueGenericSend>:
{
    16fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    16fe:	b085      	sub	sp, #20
    1700:	9201      	str	r2, [sp, #4]
    configASSERT( pxQueue );
    1702:	b160      	cbz	r0, 171e <xQueueGenericSend+0x22>
    1704:	4604      	mov	r4, r0
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    1706:	b199      	cbz	r1, 1730 <xQueueGenericSend+0x34>
    1708:	2501      	movs	r5, #1
    170a:	b9bd      	cbnz	r5, 173c <xQueueGenericSend+0x40>
    170c:	f04f 0380 	mov.w	r3, #128	; 0x80
    1710:	f383 8811 	msr	BASEPRI, r3
    1714:	f3bf 8f6f 	isb	sy
    1718:	f3bf 8f4f 	dsb	sy
    171c:	e7fe      	b.n	171c <xQueueGenericSend+0x20>
    171e:	f04f 0380 	mov.w	r3, #128	; 0x80
    1722:	f383 8811 	msr	BASEPRI, r3
    1726:	f3bf 8f6f 	isb	sy
    172a:	f3bf 8f4f 	dsb	sy
    172e:	e7fe      	b.n	172e <xQueueGenericSend+0x32>
    1730:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1732:	b90a      	cbnz	r2, 1738 <xQueueGenericSend+0x3c>
    1734:	2501      	movs	r5, #1
    1736:	e7e8      	b.n	170a <xQueueGenericSend+0xe>
    1738:	2500      	movs	r5, #0
    173a:	e7e6      	b.n	170a <xQueueGenericSend+0xe>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    173c:	2b02      	cmp	r3, #2
    173e:	d009      	beq.n	1754 <xQueueGenericSend+0x58>
    1740:	b96d      	cbnz	r5, 175e <xQueueGenericSend+0x62>
    1742:	f04f 0380 	mov.w	r3, #128	; 0x80
    1746:	f383 8811 	msr	BASEPRI, r3
    174a:	f3bf 8f6f 	isb	sy
    174e:	f3bf 8f4f 	dsb	sy
    1752:	e7fe      	b.n	1752 <xQueueGenericSend+0x56>
    1754:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    1756:	2a01      	cmp	r2, #1
    1758:	d0f2      	beq.n	1740 <xQueueGenericSend+0x44>
    175a:	2500      	movs	r5, #0
    175c:	e7f0      	b.n	1740 <xQueueGenericSend+0x44>
    175e:	461e      	mov	r6, r3
    1760:	460f      	mov	r7, r1
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    1762:	4b51      	ldr	r3, [pc, #324]	; (18a8 <xQueueGenericSend+0x1ac>)
    1764:	4798      	blx	r3
    1766:	b910      	cbnz	r0, 176e <xQueueGenericSend+0x72>
    1768:	9b01      	ldr	r3, [sp, #4]
    176a:	b103      	cbz	r3, 176e <xQueueGenericSend+0x72>
    176c:	2500      	movs	r5, #0
    176e:	b945      	cbnz	r5, 1782 <xQueueGenericSend+0x86>
    1770:	f04f 0380 	mov.w	r3, #128	; 0x80
    1774:	f383 8811 	msr	BASEPRI, r3
    1778:	f3bf 8f6f 	isb	sy
    177c:	f3bf 8f4f 	dsb	sy
    1780:	e7fe      	b.n	1780 <xQueueGenericSend+0x84>
    1782:	2500      	movs	r5, #0
    1784:	e040      	b.n	1808 <xQueueGenericSend+0x10c>
                    const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
    1786:	6ba5      	ldr	r5, [r4, #56]	; 0x38
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1788:	4632      	mov	r2, r6
    178a:	4639      	mov	r1, r7
    178c:	4620      	mov	r0, r4
    178e:	4b47      	ldr	r3, [pc, #284]	; (18ac <xQueueGenericSend+0x1b0>)
    1790:	4798      	blx	r3
                    if( pxQueue->pxQueueSetContainer != NULL )
    1792:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1794:	b19b      	cbz	r3, 17be <xQueueGenericSend+0xc2>
                        if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
    1796:	2e02      	cmp	r6, #2
    1798:	d100      	bne.n	179c <xQueueGenericSend+0xa0>
    179a:	b95d      	cbnz	r5, 17b4 <xQueueGenericSend+0xb8>
                        else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
    179c:	4620      	mov	r0, r4
    179e:	4b44      	ldr	r3, [pc, #272]	; (18b0 <xQueueGenericSend+0x1b4>)
    17a0:	4798      	blx	r3
    17a2:	b138      	cbz	r0, 17b4 <xQueueGenericSend+0xb8>
                            queueYIELD_IF_USING_PREEMPTION();
    17a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    17a8:	4b42      	ldr	r3, [pc, #264]	; (18b4 <xQueueGenericSend+0x1b8>)
    17aa:	601a      	str	r2, [r3, #0]
    17ac:	f3bf 8f4f 	dsb	sy
    17b0:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
    17b4:	4b40      	ldr	r3, [pc, #256]	; (18b8 <xQueueGenericSend+0x1bc>)
    17b6:	4798      	blx	r3
                return pdPASS;
    17b8:	2001      	movs	r0, #1
}
    17ba:	b005      	add	sp, #20
    17bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    17be:	6a63      	ldr	r3, [r4, #36]	; 0x24
    17c0:	b173      	cbz	r3, 17e0 <xQueueGenericSend+0xe4>
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    17c2:	f104 0024 	add.w	r0, r4, #36	; 0x24
    17c6:	4b3d      	ldr	r3, [pc, #244]	; (18bc <xQueueGenericSend+0x1c0>)
    17c8:	4798      	blx	r3
    17ca:	2800      	cmp	r0, #0
    17cc:	d0f2      	beq.n	17b4 <xQueueGenericSend+0xb8>
                                queueYIELD_IF_USING_PREEMPTION();
    17ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    17d2:	4b38      	ldr	r3, [pc, #224]	; (18b4 <xQueueGenericSend+0x1b8>)
    17d4:	601a      	str	r2, [r3, #0]
    17d6:	f3bf 8f4f 	dsb	sy
    17da:	f3bf 8f6f 	isb	sy
    17de:	e7e9      	b.n	17b4 <xQueueGenericSend+0xb8>
                        else if( xYieldRequired != pdFALSE )
    17e0:	2800      	cmp	r0, #0
    17e2:	d0e7      	beq.n	17b4 <xQueueGenericSend+0xb8>
                            queueYIELD_IF_USING_PREEMPTION();
    17e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    17e8:	4b32      	ldr	r3, [pc, #200]	; (18b4 <xQueueGenericSend+0x1b8>)
    17ea:	601a      	str	r2, [r3, #0]
    17ec:	f3bf 8f4f 	dsb	sy
    17f0:	f3bf 8f6f 	isb	sy
    17f4:	e7de      	b.n	17b4 <xQueueGenericSend+0xb8>
                    taskEXIT_CRITICAL();
    17f6:	4b30      	ldr	r3, [pc, #192]	; (18b8 <xQueueGenericSend+0x1bc>)
    17f8:	4798      	blx	r3
                    return errQUEUE_FULL;
    17fa:	2000      	movs	r0, #0
    17fc:	e7dd      	b.n	17ba <xQueueGenericSend+0xbe>
                prvUnlockQueue( pxQueue );
    17fe:	4620      	mov	r0, r4
    1800:	4b2f      	ldr	r3, [pc, #188]	; (18c0 <xQueueGenericSend+0x1c4>)
    1802:	4798      	blx	r3
                ( void ) xTaskResumeAll();
    1804:	4b2f      	ldr	r3, [pc, #188]	; (18c4 <xQueueGenericSend+0x1c8>)
    1806:	4798      	blx	r3
        taskENTER_CRITICAL();
    1808:	4b2f      	ldr	r3, [pc, #188]	; (18c8 <xQueueGenericSend+0x1cc>)
    180a:	4798      	blx	r3
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    180c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    180e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1810:	429a      	cmp	r2, r3
    1812:	d3b8      	bcc.n	1786 <xQueueGenericSend+0x8a>
    1814:	2e02      	cmp	r6, #2
    1816:	d0b6      	beq.n	1786 <xQueueGenericSend+0x8a>
                if( xTicksToWait == ( TickType_t ) 0 )
    1818:	9b01      	ldr	r3, [sp, #4]
    181a:	2b00      	cmp	r3, #0
    181c:	d0eb      	beq.n	17f6 <xQueueGenericSend+0xfa>
                else if( xEntryTimeSet == pdFALSE )
    181e:	b91d      	cbnz	r5, 1828 <xQueueGenericSend+0x12c>
                    vTaskInternalSetTimeOutState( &xTimeOut );
    1820:	a802      	add	r0, sp, #8
    1822:	4b2a      	ldr	r3, [pc, #168]	; (18cc <xQueueGenericSend+0x1d0>)
    1824:	4798      	blx	r3
                    xEntryTimeSet = pdTRUE;
    1826:	2501      	movs	r5, #1
        taskEXIT_CRITICAL();
    1828:	4b23      	ldr	r3, [pc, #140]	; (18b8 <xQueueGenericSend+0x1bc>)
    182a:	4798      	blx	r3
        vTaskSuspendAll();
    182c:	4b28      	ldr	r3, [pc, #160]	; (18d0 <xQueueGenericSend+0x1d4>)
    182e:	4798      	blx	r3
        prvLockQueue( pxQueue );
    1830:	4b25      	ldr	r3, [pc, #148]	; (18c8 <xQueueGenericSend+0x1cc>)
    1832:	4798      	blx	r3
    1834:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    1838:	b25b      	sxtb	r3, r3
    183a:	f1b3 3fff 	cmp.w	r3, #4294967295
    183e:	d102      	bne.n	1846 <xQueueGenericSend+0x14a>
    1840:	2300      	movs	r3, #0
    1842:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    1846:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    184a:	b25b      	sxtb	r3, r3
    184c:	f1b3 3fff 	cmp.w	r3, #4294967295
    1850:	d102      	bne.n	1858 <xQueueGenericSend+0x15c>
    1852:	2300      	movs	r3, #0
    1854:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    1858:	4b17      	ldr	r3, [pc, #92]	; (18b8 <xQueueGenericSend+0x1bc>)
    185a:	4798      	blx	r3
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    185c:	a901      	add	r1, sp, #4
    185e:	a802      	add	r0, sp, #8
    1860:	4b1c      	ldr	r3, [pc, #112]	; (18d4 <xQueueGenericSend+0x1d8>)
    1862:	4798      	blx	r3
    1864:	b9c8      	cbnz	r0, 189a <xQueueGenericSend+0x19e>
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
    1866:	4620      	mov	r0, r4
    1868:	4b1b      	ldr	r3, [pc, #108]	; (18d8 <xQueueGenericSend+0x1dc>)
    186a:	4798      	blx	r3
    186c:	2800      	cmp	r0, #0
    186e:	d0c6      	beq.n	17fe <xQueueGenericSend+0x102>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1870:	9901      	ldr	r1, [sp, #4]
    1872:	f104 0010 	add.w	r0, r4, #16
    1876:	4b19      	ldr	r3, [pc, #100]	; (18dc <xQueueGenericSend+0x1e0>)
    1878:	4798      	blx	r3
                prvUnlockQueue( pxQueue );
    187a:	4620      	mov	r0, r4
    187c:	4b10      	ldr	r3, [pc, #64]	; (18c0 <xQueueGenericSend+0x1c4>)
    187e:	4798      	blx	r3
                if( xTaskResumeAll() == pdFALSE )
    1880:	4b10      	ldr	r3, [pc, #64]	; (18c4 <xQueueGenericSend+0x1c8>)
    1882:	4798      	blx	r3
    1884:	2800      	cmp	r0, #0
    1886:	d1bf      	bne.n	1808 <xQueueGenericSend+0x10c>
                    taskYIELD_WITHIN_API();
    1888:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    188c:	4b09      	ldr	r3, [pc, #36]	; (18b4 <xQueueGenericSend+0x1b8>)
    188e:	601a      	str	r2, [r3, #0]
    1890:	f3bf 8f4f 	dsb	sy
    1894:	f3bf 8f6f 	isb	sy
    1898:	e7b6      	b.n	1808 <xQueueGenericSend+0x10c>
            prvUnlockQueue( pxQueue );
    189a:	4620      	mov	r0, r4
    189c:	4b08      	ldr	r3, [pc, #32]	; (18c0 <xQueueGenericSend+0x1c4>)
    189e:	4798      	blx	r3
            ( void ) xTaskResumeAll();
    18a0:	4b08      	ldr	r3, [pc, #32]	; (18c4 <xQueueGenericSend+0x1c8>)
    18a2:	4798      	blx	r3
            return errQUEUE_FULL;
    18a4:	2000      	movs	r0, #0
    18a6:	e788      	b.n	17ba <xQueueGenericSend+0xbe>
    18a8:	000026dd 	.word	0x000026dd
    18ac:	00001355 	.word	0x00001355
    18b0:	000013fd 	.word	0x000013fd
    18b4:	e000ed04 	.word	0xe000ed04
    18b8:	00000f49 	.word	0x00000f49
    18bc:	0000252d 	.word	0x0000252d
    18c0:	000014a5 	.word	0x000014a5
    18c4:	00002221 	.word	0x00002221
    18c8:	00000f05 	.word	0x00000f05
    18cc:	00002629 	.word	0x00002629
    18d0:	00002071 	.word	0x00002071
    18d4:	0000263d 	.word	0x0000263d
    18d8:	00001309 	.word	0x00001309
    18dc:	0000248d 	.word	0x0000248d

000018e0 <prvInitialiseMutex>:
        if( pxNewQueue != NULL )
    18e0:	b148      	cbz	r0, 18f6 <prvInitialiseMutex+0x16>
    {
    18e2:	b510      	push	{r4, lr}
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
    18e4:	2100      	movs	r1, #0
    18e6:	6081      	str	r1, [r0, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    18e8:	6001      	str	r1, [r0, #0]
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
    18ea:	60c1      	str	r1, [r0, #12]
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    18ec:	460b      	mov	r3, r1
    18ee:	460a      	mov	r2, r1
    18f0:	4c01      	ldr	r4, [pc, #4]	; (18f8 <prvInitialiseMutex+0x18>)
    18f2:	47a0      	blx	r4
    18f4:	bd10      	pop	{r4, pc}
    18f6:	4770      	bx	lr
    18f8:	000016fd 	.word	0x000016fd

000018fc <xQueueCreateMutex>:
    {
    18fc:	b510      	push	{r4, lr}
        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
    18fe:	4602      	mov	r2, r0
    1900:	2100      	movs	r1, #0
    1902:	2001      	movs	r0, #1
    1904:	4b03      	ldr	r3, [pc, #12]	; (1914 <xQueueCreateMutex+0x18>)
    1906:	4798      	blx	r3
    1908:	4604      	mov	r4, r0
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
    190a:	4b03      	ldr	r3, [pc, #12]	; (1918 <xQueueCreateMutex+0x1c>)
    190c:	4798      	blx	r3
    }
    190e:	4620      	mov	r0, r4
    1910:	bd10      	pop	{r4, pc}
    1912:	bf00      	nop
    1914:	00001699 	.word	0x00001699
    1918:	000018e1 	.word	0x000018e1

0000191c <xQueueReceive>:
{
    191c:	b5f0      	push	{r4, r5, r6, r7, lr}
    191e:	b085      	sub	sp, #20
    1920:	9201      	str	r2, [sp, #4]
    configASSERT( ( pxQueue ) );
    1922:	b160      	cbz	r0, 193e <xQueueReceive+0x22>
    1924:	4604      	mov	r4, r0
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    1926:	b199      	cbz	r1, 1950 <xQueueReceive+0x34>
    1928:	2501      	movs	r5, #1
    192a:	b9bd      	cbnz	r5, 195c <xQueueReceive+0x40>
    192c:	f04f 0380 	mov.w	r3, #128	; 0x80
    1930:	f383 8811 	msr	BASEPRI, r3
    1934:	f3bf 8f6f 	isb	sy
    1938:	f3bf 8f4f 	dsb	sy
    193c:	e7fe      	b.n	193c <xQueueReceive+0x20>
    193e:	f04f 0380 	mov.w	r3, #128	; 0x80
    1942:	f383 8811 	msr	BASEPRI, r3
    1946:	f3bf 8f6f 	isb	sy
    194a:	f3bf 8f4f 	dsb	sy
    194e:	e7fe      	b.n	194e <xQueueReceive+0x32>
    1950:	6c03      	ldr	r3, [r0, #64]	; 0x40
    1952:	b90b      	cbnz	r3, 1958 <xQueueReceive+0x3c>
    1954:	2501      	movs	r5, #1
    1956:	e7e8      	b.n	192a <xQueueReceive+0xe>
    1958:	2500      	movs	r5, #0
    195a:	e7e6      	b.n	192a <xQueueReceive+0xe>
    195c:	460e      	mov	r6, r1
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    195e:	4b45      	ldr	r3, [pc, #276]	; (1a74 <xQueueReceive+0x158>)
    1960:	4798      	blx	r3
    1962:	b910      	cbnz	r0, 196a <xQueueReceive+0x4e>
    1964:	9b01      	ldr	r3, [sp, #4]
    1966:	b103      	cbz	r3, 196a <xQueueReceive+0x4e>
    1968:	2500      	movs	r5, #0
    196a:	b945      	cbnz	r5, 197e <xQueueReceive+0x62>
    196c:	f04f 0380 	mov.w	r3, #128	; 0x80
    1970:	f383 8811 	msr	BASEPRI, r3
    1974:	f3bf 8f6f 	isb	sy
    1978:	f3bf 8f4f 	dsb	sy
    197c:	e7fe      	b.n	197c <xQueueReceive+0x60>
    197e:	2700      	movs	r7, #0
    1980:	e02f      	b.n	19e2 <xQueueReceive+0xc6>
                prvCopyDataFromQueue( pxQueue, pvBuffer );
    1982:	4631      	mov	r1, r6
    1984:	4620      	mov	r0, r4
    1986:	4b3c      	ldr	r3, [pc, #240]	; (1a78 <xQueueReceive+0x15c>)
    1988:	4798      	blx	r3
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
    198a:	3d01      	subs	r5, #1
    198c:	63a5      	str	r5, [r4, #56]	; 0x38
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    198e:	6923      	ldr	r3, [r4, #16]
    1990:	b163      	cbz	r3, 19ac <xQueueReceive+0x90>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1992:	f104 0010 	add.w	r0, r4, #16
    1996:	4b39      	ldr	r3, [pc, #228]	; (1a7c <xQueueReceive+0x160>)
    1998:	4798      	blx	r3
    199a:	b138      	cbz	r0, 19ac <xQueueReceive+0x90>
                        queueYIELD_IF_USING_PREEMPTION();
    199c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    19a0:	4b37      	ldr	r3, [pc, #220]	; (1a80 <xQueueReceive+0x164>)
    19a2:	601a      	str	r2, [r3, #0]
    19a4:	f3bf 8f4f 	dsb	sy
    19a8:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
    19ac:	4b35      	ldr	r3, [pc, #212]	; (1a84 <xQueueReceive+0x168>)
    19ae:	4798      	blx	r3
                return pdPASS;
    19b0:	2001      	movs	r0, #1
}
    19b2:	b005      	add	sp, #20
    19b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    taskEXIT_CRITICAL();
    19b6:	4b33      	ldr	r3, [pc, #204]	; (1a84 <xQueueReceive+0x168>)
    19b8:	4798      	blx	r3
                    return errQUEUE_EMPTY;
    19ba:	2000      	movs	r0, #0
    19bc:	e7f9      	b.n	19b2 <xQueueReceive+0x96>
                    vTaskInternalSetTimeOutState( &xTimeOut );
    19be:	a802      	add	r0, sp, #8
    19c0:	4b31      	ldr	r3, [pc, #196]	; (1a88 <xQueueReceive+0x16c>)
    19c2:	4798      	blx	r3
                    xEntryTimeSet = pdTRUE;
    19c4:	2701      	movs	r7, #1
    19c6:	e016      	b.n	19f6 <xQueueReceive+0xda>
        prvLockQueue( pxQueue );
    19c8:	2300      	movs	r3, #0
    19ca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    19ce:	e01e      	b.n	1a0e <xQueueReceive+0xf2>
    19d0:	2300      	movs	r3, #0
    19d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    19d6:	e020      	b.n	1a1a <xQueueReceive+0xfe>
                prvUnlockQueue( pxQueue );
    19d8:	4620      	mov	r0, r4
    19da:	4b2c      	ldr	r3, [pc, #176]	; (1a8c <xQueueReceive+0x170>)
    19dc:	4798      	blx	r3
                ( void ) xTaskResumeAll();
    19de:	4b2c      	ldr	r3, [pc, #176]	; (1a90 <xQueueReceive+0x174>)
    19e0:	4798      	blx	r3
        taskENTER_CRITICAL();
    19e2:	4b2c      	ldr	r3, [pc, #176]	; (1a94 <xQueueReceive+0x178>)
    19e4:	4798      	blx	r3
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    19e6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    19e8:	2d00      	cmp	r5, #0
    19ea:	d1ca      	bne.n	1982 <xQueueReceive+0x66>
                if( xTicksToWait == ( TickType_t ) 0 )
    19ec:	9b01      	ldr	r3, [sp, #4]
    19ee:	2b00      	cmp	r3, #0
    19f0:	d0e1      	beq.n	19b6 <xQueueReceive+0x9a>
                else if( xEntryTimeSet == pdFALSE )
    19f2:	2f00      	cmp	r7, #0
    19f4:	d0e3      	beq.n	19be <xQueueReceive+0xa2>
        taskEXIT_CRITICAL();
    19f6:	4b23      	ldr	r3, [pc, #140]	; (1a84 <xQueueReceive+0x168>)
    19f8:	4798      	blx	r3
        vTaskSuspendAll();
    19fa:	4b27      	ldr	r3, [pc, #156]	; (1a98 <xQueueReceive+0x17c>)
    19fc:	4798      	blx	r3
        prvLockQueue( pxQueue );
    19fe:	4b25      	ldr	r3, [pc, #148]	; (1a94 <xQueueReceive+0x178>)
    1a00:	4798      	blx	r3
    1a02:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    1a06:	b25b      	sxtb	r3, r3
    1a08:	f1b3 3fff 	cmp.w	r3, #4294967295
    1a0c:	d0dc      	beq.n	19c8 <xQueueReceive+0xac>
    1a0e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    1a12:	b25b      	sxtb	r3, r3
    1a14:	f1b3 3fff 	cmp.w	r3, #4294967295
    1a18:	d0da      	beq.n	19d0 <xQueueReceive+0xb4>
    1a1a:	4b1a      	ldr	r3, [pc, #104]	; (1a84 <xQueueReceive+0x168>)
    1a1c:	4798      	blx	r3
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1a1e:	a901      	add	r1, sp, #4
    1a20:	a802      	add	r0, sp, #8
    1a22:	4b1e      	ldr	r3, [pc, #120]	; (1a9c <xQueueReceive+0x180>)
    1a24:	4798      	blx	r3
    1a26:	b9c8      	cbnz	r0, 1a5c <xQueueReceive+0x140>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1a28:	4620      	mov	r0, r4
    1a2a:	4b1d      	ldr	r3, [pc, #116]	; (1aa0 <xQueueReceive+0x184>)
    1a2c:	4798      	blx	r3
    1a2e:	2800      	cmp	r0, #0
    1a30:	d0d2      	beq.n	19d8 <xQueueReceive+0xbc>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1a32:	9901      	ldr	r1, [sp, #4]
    1a34:	f104 0024 	add.w	r0, r4, #36	; 0x24
    1a38:	4b1a      	ldr	r3, [pc, #104]	; (1aa4 <xQueueReceive+0x188>)
    1a3a:	4798      	blx	r3
                prvUnlockQueue( pxQueue );
    1a3c:	4620      	mov	r0, r4
    1a3e:	4b13      	ldr	r3, [pc, #76]	; (1a8c <xQueueReceive+0x170>)
    1a40:	4798      	blx	r3
                if( xTaskResumeAll() == pdFALSE )
    1a42:	4b13      	ldr	r3, [pc, #76]	; (1a90 <xQueueReceive+0x174>)
    1a44:	4798      	blx	r3
    1a46:	2800      	cmp	r0, #0
    1a48:	d1cb      	bne.n	19e2 <xQueueReceive+0xc6>
                    taskYIELD_WITHIN_API();
    1a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1a4e:	4b0c      	ldr	r3, [pc, #48]	; (1a80 <xQueueReceive+0x164>)
    1a50:	601a      	str	r2, [r3, #0]
    1a52:	f3bf 8f4f 	dsb	sy
    1a56:	f3bf 8f6f 	isb	sy
    1a5a:	e7c2      	b.n	19e2 <xQueueReceive+0xc6>
            prvUnlockQueue( pxQueue );
    1a5c:	4620      	mov	r0, r4
    1a5e:	4b0b      	ldr	r3, [pc, #44]	; (1a8c <xQueueReceive+0x170>)
    1a60:	4798      	blx	r3
            ( void ) xTaskResumeAll();
    1a62:	4b0b      	ldr	r3, [pc, #44]	; (1a90 <xQueueReceive+0x174>)
    1a64:	4798      	blx	r3
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1a66:	4620      	mov	r0, r4
    1a68:	4b0d      	ldr	r3, [pc, #52]	; (1aa0 <xQueueReceive+0x184>)
    1a6a:	4798      	blx	r3
    1a6c:	2800      	cmp	r0, #0
    1a6e:	d0b8      	beq.n	19e2 <xQueueReceive+0xc6>
                return errQUEUE_EMPTY;
    1a70:	2000      	movs	r0, #0
    1a72:	e79e      	b.n	19b2 <xQueueReceive+0x96>
    1a74:	000026dd 	.word	0x000026dd
    1a78:	000013d5 	.word	0x000013d5
    1a7c:	0000252d 	.word	0x0000252d
    1a80:	e000ed04 	.word	0xe000ed04
    1a84:	00000f49 	.word	0x00000f49
    1a88:	00002629 	.word	0x00002629
    1a8c:	000014a5 	.word	0x000014a5
    1a90:	00002221 	.word	0x00002221
    1a94:	00000f05 	.word	0x00000f05
    1a98:	00002071 	.word	0x00002071
    1a9c:	0000263d 	.word	0x0000263d
    1aa0:	00001331 	.word	0x00001331
    1aa4:	0000248d 	.word	0x0000248d

00001aa8 <xQueueSemaphoreTake>:
{
    1aa8:	b570      	push	{r4, r5, r6, lr}
    1aaa:	b084      	sub	sp, #16
    1aac:	9101      	str	r1, [sp, #4]
    configASSERT( ( pxQueue ) );
    1aae:	b158      	cbz	r0, 1ac8 <xQueueSemaphoreTake+0x20>
    1ab0:	4604      	mov	r4, r0
    configASSERT( pxQueue->uxItemSize == 0 );
    1ab2:	6c03      	ldr	r3, [r0, #64]	; 0x40
    1ab4:	b18b      	cbz	r3, 1ada <xQueueSemaphoreTake+0x32>
    1ab6:	f04f 0380 	mov.w	r3, #128	; 0x80
    1aba:	f383 8811 	msr	BASEPRI, r3
    1abe:	f3bf 8f6f 	isb	sy
    1ac2:	f3bf 8f4f 	dsb	sy
    1ac6:	e7fe      	b.n	1ac6 <xQueueSemaphoreTake+0x1e>
    1ac8:	f04f 0380 	mov.w	r3, #128	; 0x80
    1acc:	f383 8811 	msr	BASEPRI, r3
    1ad0:	f3bf 8f6f 	isb	sy
    1ad4:	f3bf 8f4f 	dsb	sy
    1ad8:	e7fe      	b.n	1ad8 <xQueueSemaphoreTake+0x30>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    1ada:	4b56      	ldr	r3, [pc, #344]	; (1c34 <xQueueSemaphoreTake+0x18c>)
    1adc:	4798      	blx	r3
    1ade:	b960      	cbnz	r0, 1afa <xQueueSemaphoreTake+0x52>
    1ae0:	9b01      	ldr	r3, [sp, #4]
    1ae2:	b963      	cbnz	r3, 1afe <xQueueSemaphoreTake+0x56>
    1ae4:	2301      	movs	r3, #1
    1ae6:	b963      	cbnz	r3, 1b02 <xQueueSemaphoreTake+0x5a>
    1ae8:	f04f 0380 	mov.w	r3, #128	; 0x80
    1aec:	f383 8811 	msr	BASEPRI, r3
    1af0:	f3bf 8f6f 	isb	sy
    1af4:	f3bf 8f4f 	dsb	sy
    1af8:	e7fe      	b.n	1af8 <xQueueSemaphoreTake+0x50>
    1afa:	2301      	movs	r3, #1
    1afc:	e7f3      	b.n	1ae6 <xQueueSemaphoreTake+0x3e>
    1afe:	2300      	movs	r3, #0
    1b00:	e7f1      	b.n	1ae6 <xQueueSemaphoreTake+0x3e>
    1b02:	2500      	movs	r5, #0
    1b04:	462e      	mov	r6, r5
    1b06:	e045      	b.n	1b94 <xQueueSemaphoreTake+0xec>
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
    1b08:	3b01      	subs	r3, #1
    1b0a:	63a3      	str	r3, [r4, #56]	; 0x38
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1b0c:	6823      	ldr	r3, [r4, #0]
    1b0e:	b913      	cbnz	r3, 1b16 <xQueueSemaphoreTake+0x6e>
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
    1b10:	4b49      	ldr	r3, [pc, #292]	; (1c38 <xQueueSemaphoreTake+0x190>)
    1b12:	4798      	blx	r3
    1b14:	60a0      	str	r0, [r4, #8]
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1b16:	6923      	ldr	r3, [r4, #16]
    1b18:	b163      	cbz	r3, 1b34 <xQueueSemaphoreTake+0x8c>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1b1a:	f104 0010 	add.w	r0, r4, #16
    1b1e:	4b47      	ldr	r3, [pc, #284]	; (1c3c <xQueueSemaphoreTake+0x194>)
    1b20:	4798      	blx	r3
    1b22:	b138      	cbz	r0, 1b34 <xQueueSemaphoreTake+0x8c>
                        queueYIELD_IF_USING_PREEMPTION();
    1b24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1b28:	4b45      	ldr	r3, [pc, #276]	; (1c40 <xQueueSemaphoreTake+0x198>)
    1b2a:	601a      	str	r2, [r3, #0]
    1b2c:	f3bf 8f4f 	dsb	sy
    1b30:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
    1b34:	4b43      	ldr	r3, [pc, #268]	; (1c44 <xQueueSemaphoreTake+0x19c>)
    1b36:	4798      	blx	r3
                return pdPASS;
    1b38:	2501      	movs	r5, #1
}
    1b3a:	4628      	mov	r0, r5
    1b3c:	b004      	add	sp, #16
    1b3e:	bd70      	pop	{r4, r5, r6, pc}
                    taskEXIT_CRITICAL();
    1b40:	4b40      	ldr	r3, [pc, #256]	; (1c44 <xQueueSemaphoreTake+0x19c>)
    1b42:	4798      	blx	r3
                    return errQUEUE_EMPTY;
    1b44:	2500      	movs	r5, #0
    1b46:	e7f8      	b.n	1b3a <xQueueSemaphoreTake+0x92>
                    vTaskInternalSetTimeOutState( &xTimeOut );
    1b48:	a802      	add	r0, sp, #8
    1b4a:	4b3f      	ldr	r3, [pc, #252]	; (1c48 <xQueueSemaphoreTake+0x1a0>)
    1b4c:	4798      	blx	r3
                    xEntryTimeSet = pdTRUE;
    1b4e:	2601      	movs	r6, #1
    1b50:	e02a      	b.n	1ba8 <xQueueSemaphoreTake+0x100>
        prvLockQueue( pxQueue );
    1b52:	2300      	movs	r3, #0
    1b54:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    1b58:	e032      	b.n	1bc0 <xQueueSemaphoreTake+0x118>
    1b5a:	2300      	movs	r3, #0
    1b5c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    1b60:	e034      	b.n	1bcc <xQueueSemaphoreTake+0x124>
                        taskENTER_CRITICAL();
    1b62:	4b3a      	ldr	r3, [pc, #232]	; (1c4c <xQueueSemaphoreTake+0x1a4>)
    1b64:	4798      	blx	r3
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
    1b66:	68a0      	ldr	r0, [r4, #8]
    1b68:	4b39      	ldr	r3, [pc, #228]	; (1c50 <xQueueSemaphoreTake+0x1a8>)
    1b6a:	4798      	blx	r3
    1b6c:	4605      	mov	r5, r0
                        taskEXIT_CRITICAL();
    1b6e:	4b35      	ldr	r3, [pc, #212]	; (1c44 <xQueueSemaphoreTake+0x19c>)
    1b70:	4798      	blx	r3
    1b72:	e03b      	b.n	1bec <xQueueSemaphoreTake+0x144>
                prvUnlockQueue( pxQueue );
    1b74:	4620      	mov	r0, r4
    1b76:	4b37      	ldr	r3, [pc, #220]	; (1c54 <xQueueSemaphoreTake+0x1ac>)
    1b78:	4798      	blx	r3
                ( void ) xTaskResumeAll();
    1b7a:	4b37      	ldr	r3, [pc, #220]	; (1c58 <xQueueSemaphoreTake+0x1b0>)
    1b7c:	4798      	blx	r3
    1b7e:	e009      	b.n	1b94 <xQueueSemaphoreTake+0xec>
            prvUnlockQueue( pxQueue );
    1b80:	4620      	mov	r0, r4
    1b82:	4b34      	ldr	r3, [pc, #208]	; (1c54 <xQueueSemaphoreTake+0x1ac>)
    1b84:	4798      	blx	r3
            ( void ) xTaskResumeAll();
    1b86:	4b34      	ldr	r3, [pc, #208]	; (1c58 <xQueueSemaphoreTake+0x1b0>)
    1b88:	4798      	blx	r3
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1b8a:	4620      	mov	r0, r4
    1b8c:	4b33      	ldr	r3, [pc, #204]	; (1c5c <xQueueSemaphoreTake+0x1b4>)
    1b8e:	4798      	blx	r3
    1b90:	2800      	cmp	r0, #0
    1b92:	d140      	bne.n	1c16 <xQueueSemaphoreTake+0x16e>
        taskENTER_CRITICAL();
    1b94:	4b2d      	ldr	r3, [pc, #180]	; (1c4c <xQueueSemaphoreTake+0x1a4>)
    1b96:	4798      	blx	r3
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    1b98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    1b9a:	2b00      	cmp	r3, #0
    1b9c:	d1b4      	bne.n	1b08 <xQueueSemaphoreTake+0x60>
                if( xTicksToWait == ( TickType_t ) 0 )
    1b9e:	9b01      	ldr	r3, [sp, #4]
    1ba0:	2b00      	cmp	r3, #0
    1ba2:	d0cd      	beq.n	1b40 <xQueueSemaphoreTake+0x98>
                else if( xEntryTimeSet == pdFALSE )
    1ba4:	2e00      	cmp	r6, #0
    1ba6:	d0cf      	beq.n	1b48 <xQueueSemaphoreTake+0xa0>
        taskEXIT_CRITICAL();
    1ba8:	4b26      	ldr	r3, [pc, #152]	; (1c44 <xQueueSemaphoreTake+0x19c>)
    1baa:	4798      	blx	r3
        vTaskSuspendAll();
    1bac:	4b2c      	ldr	r3, [pc, #176]	; (1c60 <xQueueSemaphoreTake+0x1b8>)
    1bae:	4798      	blx	r3
        prvLockQueue( pxQueue );
    1bb0:	4b26      	ldr	r3, [pc, #152]	; (1c4c <xQueueSemaphoreTake+0x1a4>)
    1bb2:	4798      	blx	r3
    1bb4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    1bb8:	b25b      	sxtb	r3, r3
    1bba:	f1b3 3fff 	cmp.w	r3, #4294967295
    1bbe:	d0c8      	beq.n	1b52 <xQueueSemaphoreTake+0xaa>
    1bc0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    1bc4:	b25b      	sxtb	r3, r3
    1bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
    1bca:	d0c6      	beq.n	1b5a <xQueueSemaphoreTake+0xb2>
    1bcc:	4b1d      	ldr	r3, [pc, #116]	; (1c44 <xQueueSemaphoreTake+0x19c>)
    1bce:	4798      	blx	r3
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1bd0:	a901      	add	r1, sp, #4
    1bd2:	a802      	add	r0, sp, #8
    1bd4:	4b23      	ldr	r3, [pc, #140]	; (1c64 <xQueueSemaphoreTake+0x1bc>)
    1bd6:	4798      	blx	r3
    1bd8:	2800      	cmp	r0, #0
    1bda:	d1d1      	bne.n	1b80 <xQueueSemaphoreTake+0xd8>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1bdc:	4620      	mov	r0, r4
    1bde:	4b1f      	ldr	r3, [pc, #124]	; (1c5c <xQueueSemaphoreTake+0x1b4>)
    1be0:	4798      	blx	r3
    1be2:	2800      	cmp	r0, #0
    1be4:	d0c6      	beq.n	1b74 <xQueueSemaphoreTake+0xcc>
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1be6:	6823      	ldr	r3, [r4, #0]
    1be8:	2b00      	cmp	r3, #0
    1bea:	d0ba      	beq.n	1b62 <xQueueSemaphoreTake+0xba>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1bec:	9901      	ldr	r1, [sp, #4]
    1bee:	f104 0024 	add.w	r0, r4, #36	; 0x24
    1bf2:	4b1d      	ldr	r3, [pc, #116]	; (1c68 <xQueueSemaphoreTake+0x1c0>)
    1bf4:	4798      	blx	r3
                prvUnlockQueue( pxQueue );
    1bf6:	4620      	mov	r0, r4
    1bf8:	4b16      	ldr	r3, [pc, #88]	; (1c54 <xQueueSemaphoreTake+0x1ac>)
    1bfa:	4798      	blx	r3
                if( xTaskResumeAll() == pdFALSE )
    1bfc:	4b16      	ldr	r3, [pc, #88]	; (1c58 <xQueueSemaphoreTake+0x1b0>)
    1bfe:	4798      	blx	r3
    1c00:	2800      	cmp	r0, #0
    1c02:	d1c7      	bne.n	1b94 <xQueueSemaphoreTake+0xec>
                    taskYIELD_WITHIN_API();
    1c04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1c08:	4b0d      	ldr	r3, [pc, #52]	; (1c40 <xQueueSemaphoreTake+0x198>)
    1c0a:	601a      	str	r2, [r3, #0]
    1c0c:	f3bf 8f4f 	dsb	sy
    1c10:	f3bf 8f6f 	isb	sy
    1c14:	e7be      	b.n	1b94 <xQueueSemaphoreTake+0xec>
                    if( xInheritanceOccurred != pdFALSE )
    1c16:	2d00      	cmp	r5, #0
    1c18:	d08f      	beq.n	1b3a <xQueueSemaphoreTake+0x92>
                        taskENTER_CRITICAL();
    1c1a:	4b0c      	ldr	r3, [pc, #48]	; (1c4c <xQueueSemaphoreTake+0x1a4>)
    1c1c:	4798      	blx	r3
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
    1c1e:	4620      	mov	r0, r4
    1c20:	4b12      	ldr	r3, [pc, #72]	; (1c6c <xQueueSemaphoreTake+0x1c4>)
    1c22:	4798      	blx	r3
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
    1c24:	4601      	mov	r1, r0
    1c26:	68a0      	ldr	r0, [r4, #8]
    1c28:	4b11      	ldr	r3, [pc, #68]	; (1c70 <xQueueSemaphoreTake+0x1c8>)
    1c2a:	4798      	blx	r3
                        taskEXIT_CRITICAL();
    1c2c:	4b05      	ldr	r3, [pc, #20]	; (1c44 <xQueueSemaphoreTake+0x19c>)
    1c2e:	4798      	blx	r3
                return errQUEUE_EMPTY;
    1c30:	2500      	movs	r5, #0
    1c32:	e782      	b.n	1b3a <xQueueSemaphoreTake+0x92>
    1c34:	000026dd 	.word	0x000026dd
    1c38:	00002949 	.word	0x00002949
    1c3c:	0000252d 	.word	0x0000252d
    1c40:	e000ed04 	.word	0xe000ed04
    1c44:	00000f49 	.word	0x00000f49
    1c48:	00002629 	.word	0x00002629
    1c4c:	00000f05 	.word	0x00000f05
    1c50:	000026fd 	.word	0x000026fd
    1c54:	000014a5 	.word	0x000014a5
    1c58:	00002221 	.word	0x00002221
    1c5c:	00001331 	.word	0x00001331
    1c60:	00002071 	.word	0x00002071
    1c64:	0000263d 	.word	0x0000263d
    1c68:	0000248d 	.word	0x0000248d
    1c6c:	000012f5 	.word	0x000012f5
    1c70:	0000287d 	.word	0x0000287d

00001c74 <vQueueWaitForMessageRestricted>:
    {
    1c74:	b570      	push	{r4, r5, r6, lr}
    1c76:	4604      	mov	r4, r0
    1c78:	460d      	mov	r5, r1
    1c7a:	4616      	mov	r6, r2
        prvLockQueue( pxQueue );
    1c7c:	4b12      	ldr	r3, [pc, #72]	; (1cc8 <vQueueWaitForMessageRestricted+0x54>)
    1c7e:	4798      	blx	r3
    1c80:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    1c84:	b25b      	sxtb	r3, r3
    1c86:	f1b3 3fff 	cmp.w	r3, #4294967295
    1c8a:	d00d      	beq.n	1ca8 <vQueueWaitForMessageRestricted+0x34>
    1c8c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    1c90:	b25b      	sxtb	r3, r3
    1c92:	f1b3 3fff 	cmp.w	r3, #4294967295
    1c96:	d00b      	beq.n	1cb0 <vQueueWaitForMessageRestricted+0x3c>
    1c98:	4b0c      	ldr	r3, [pc, #48]	; (1ccc <vQueueWaitForMessageRestricted+0x58>)
    1c9a:	4798      	blx	r3
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1c9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1c9e:	b15b      	cbz	r3, 1cb8 <vQueueWaitForMessageRestricted+0x44>
        prvUnlockQueue( pxQueue );
    1ca0:	4620      	mov	r0, r4
    1ca2:	4b0b      	ldr	r3, [pc, #44]	; (1cd0 <vQueueWaitForMessageRestricted+0x5c>)
    1ca4:	4798      	blx	r3
    1ca6:	bd70      	pop	{r4, r5, r6, pc}
        prvLockQueue( pxQueue );
    1ca8:	2300      	movs	r3, #0
    1caa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    1cae:	e7ed      	b.n	1c8c <vQueueWaitForMessageRestricted+0x18>
    1cb0:	2300      	movs	r3, #0
    1cb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    1cb6:	e7ef      	b.n	1c98 <vQueueWaitForMessageRestricted+0x24>
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1cb8:	4632      	mov	r2, r6
    1cba:	4629      	mov	r1, r5
    1cbc:	f104 0024 	add.w	r0, r4, #36	; 0x24
    1cc0:	4b04      	ldr	r3, [pc, #16]	; (1cd4 <vQueueWaitForMessageRestricted+0x60>)
    1cc2:	4798      	blx	r3
    1cc4:	e7ec      	b.n	1ca0 <vQueueWaitForMessageRestricted+0x2c>
    1cc6:	bf00      	nop
    1cc8:	00000f05 	.word	0x00000f05
    1ccc:	00000f49 	.word	0x00000f49
    1cd0:	000014a5 	.word	0x000014a5
    1cd4:	000024c9 	.word	0x000024c9

00001cd8 <prvIdleTask>:
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
    1cd8:	4b06      	ldr	r3, [pc, #24]	; (1cf4 <prvIdleTask+0x1c>)
    1cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1cdc:	2b01      	cmp	r3, #1
    1cde:	d9fb      	bls.n	1cd8 <prvIdleTask>
            {
                taskYIELD();
    1ce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1ce4:	4b04      	ldr	r3, [pc, #16]	; (1cf8 <prvIdleTask+0x20>)
    1ce6:	601a      	str	r2, [r3, #0]
    1ce8:	f3bf 8f4f 	dsb	sy
    1cec:	f3bf 8f6f 	isb	sy
    1cf0:	e7f2      	b.n	1cd8 <prvIdleTask>
    1cf2:	bf00      	nop
    1cf4:	20003b14 	.word	0x20003b14
    1cf8:	e000ed04 	.word	0xe000ed04

00001cfc <prvResetNextTaskUnblockTime>:
#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    1cfc:	4b09      	ldr	r3, [pc, #36]	; (1d24 <prvResetNextTaskUnblockTime+0x28>)
    1cfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    1d02:	681b      	ldr	r3, [r3, #0]
    1d04:	b13b      	cbz	r3, 1d16 <prvResetNextTaskUnblockTime+0x1a>
    {
        /* The new current delayed list is not empty, get the value of
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    1d06:	4b07      	ldr	r3, [pc, #28]	; (1d24 <prvResetNextTaskUnblockTime+0x28>)
    1d08:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    1d0c:	68d2      	ldr	r2, [r2, #12]
    1d0e:	6812      	ldr	r2, [r2, #0]
    1d10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    1d14:	4770      	bx	lr
        xNextTaskUnblockTime = portMAX_DELAY;
    1d16:	f04f 32ff 	mov.w	r2, #4294967295
    1d1a:	4b02      	ldr	r3, [pc, #8]	; (1d24 <prvResetNextTaskUnblockTime+0x28>)
    1d1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    1d20:	4770      	bx	lr
    1d22:	bf00      	nop
    1d24:	20003b14 	.word	0x20003b14

00001d28 <prvInitialiseNewTask>:
{
    1d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1d2c:	4680      	mov	r8, r0
    1d2e:	468a      	mov	sl, r1
    1d30:	4616      	mov	r6, r2
    1d32:	4699      	mov	r9, r3
    1d34:	9d08      	ldr	r5, [sp, #32]
    1d36:	9f09      	ldr	r7, [sp, #36]	; 0x24
    1d38:	9c0a      	ldr	r4, [sp, #40]	; 0x28
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
    1d3a:	0092      	lsls	r2, r2, #2
    1d3c:	21a5      	movs	r1, #165	; 0xa5
    1d3e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    1d40:	4b1f      	ldr	r3, [pc, #124]	; (1dc0 <prvInitialiseNewTask+0x98>)
    1d42:	4798      	blx	r3
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
    1d44:	6b22      	ldr	r2, [r4, #48]	; 0x30
    1d46:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
    1d4a:	3b01      	subs	r3, #1
    1d4c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    1d50:	f023 0607 	bic.w	r6, r3, #7
    if( pcName != NULL )
    1d54:	f1ba 0f00 	cmp.w	sl, #0
    1d58:	d00f      	beq.n	1d7a <prvInitialiseNewTask+0x52>
    1d5a:	2300      	movs	r3, #0
    1d5c:	e008      	b.n	1d70 <prvInitialiseNewTask+0x48>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    1d5e:	f81a 1003 	ldrb.w	r1, [sl, r3]
    1d62:	18e2      	adds	r2, r4, r3
    1d64:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
            if( pcName[ x ] == ( char ) 0x00 )
    1d68:	f81a 2003 	ldrb.w	r2, [sl, r3]
    1d6c:	b112      	cbz	r2, 1d74 <prvInitialiseNewTask+0x4c>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    1d6e:	3301      	adds	r3, #1
    1d70:	2b07      	cmp	r3, #7
    1d72:	d9f4      	bls.n	1d5e <prvInitialiseNewTask+0x36>
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
    1d74:	2300      	movs	r3, #0
    1d76:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
    configASSERT( uxPriority < configMAX_PRIORITIES );
    1d7a:	2d04      	cmp	r5, #4
    1d7c:	d908      	bls.n	1d90 <prvInitialiseNewTask+0x68>
    1d7e:	f04f 0380 	mov.w	r3, #128	; 0x80
    1d82:	f383 8811 	msr	BASEPRI, r3
    1d86:	f3bf 8f6f 	isb	sy
    1d8a:	f3bf 8f4f 	dsb	sy
    1d8e:	e7fe      	b.n	1d8e <prvInitialiseNewTask+0x66>
    pxNewTCB->uxPriority = uxPriority;
    1d90:	62e5      	str	r5, [r4, #44]	; 0x2c
        pxNewTCB->uxBasePriority = uxPriority;
    1d92:	6465      	str	r5, [r4, #68]	; 0x44
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    1d94:	1d20      	adds	r0, r4, #4
    1d96:	f8df a030 	ldr.w	sl, [pc, #48]	; 1dc8 <prvInitialiseNewTask+0xa0>
    1d9a:	47d0      	blx	sl
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    1d9c:	f104 0018 	add.w	r0, r4, #24
    1da0:	47d0      	blx	sl
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    1da2:	6124      	str	r4, [r4, #16]
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
    1da4:	f1c5 0505 	rsb	r5, r5, #5
    1da8:	61a5      	str	r5, [r4, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    1daa:	6264      	str	r4, [r4, #36]	; 0x24
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    1dac:	464a      	mov	r2, r9
    1dae:	4641      	mov	r1, r8
    1db0:	4630      	mov	r0, r6
    1db2:	4b04      	ldr	r3, [pc, #16]	; (1dc4 <prvInitialiseNewTask+0x9c>)
    1db4:	4798      	blx	r3
    1db6:	6020      	str	r0, [r4, #0]
    if( pxCreatedTask != NULL )
    1db8:	b107      	cbz	r7, 1dbc <prvInitialiseNewTask+0x94>
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    1dba:	603c      	str	r4, [r7, #0]
    1dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1dc0:	00002ecf 	.word	0x00002ecf
    1dc4:	00000ed9 	.word	0x00000ed9
    1dc8:	00000d67 	.word	0x00000d67

00001dcc <prvCreateStaticTask>:
    {
    1dcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1dd0:	b087      	sub	sp, #28
    1dd2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    1dd4:	9c10      	ldr	r4, [sp, #64]	; 0x40
        configASSERT( puxStackBuffer != NULL );
    1dd6:	b176      	cbz	r6, 1df6 <prvCreateStaticTask+0x2a>
        configASSERT( pxTaskBuffer != NULL );
    1dd8:	b1b4      	cbz	r4, 1e08 <prvCreateStaticTask+0x3c>
            volatile size_t xSize = sizeof( StaticTask_t );
    1dda:	2554      	movs	r5, #84	; 0x54
    1ddc:	9505      	str	r5, [sp, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
    1dde:	9d05      	ldr	r5, [sp, #20]
    1de0:	2d54      	cmp	r5, #84	; 0x54
    1de2:	d01a      	beq.n	1e1a <prvCreateStaticTask+0x4e>
    1de4:	f04f 0380 	mov.w	r3, #128	; 0x80
    1de8:	f383 8811 	msr	BASEPRI, r3
    1dec:	f3bf 8f6f 	isb	sy
    1df0:	f3bf 8f4f 	dsb	sy
    1df4:	e7fe      	b.n	1df4 <prvCreateStaticTask+0x28>
    1df6:	f04f 0380 	mov.w	r3, #128	; 0x80
    1dfa:	f383 8811 	msr	BASEPRI, r3
    1dfe:	f3bf 8f6f 	isb	sy
    1e02:	f3bf 8f4f 	dsb	sy
    1e06:	e7fe      	b.n	1e06 <prvCreateStaticTask+0x3a>
    1e08:	f04f 0380 	mov.w	r3, #128	; 0x80
    1e0c:	f383 8811 	msr	BASEPRI, r3
    1e10:	f3bf 8f6f 	isb	sy
    1e14:	f3bf 8f4f 	dsb	sy
    1e18:	e7fe      	b.n	1e18 <prvCreateStaticTask+0x4c>
    1e1a:	4698      	mov	r8, r3
    1e1c:	4617      	mov	r7, r2
    1e1e:	4689      	mov	r9, r1
    1e20:	4605      	mov	r5, r0
            ( void ) xSize; /* Prevent unused variable warning when configASSERT() is not used. */
    1e22:	9b05      	ldr	r3, [sp, #20]
            ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
    1e24:	2254      	movs	r2, #84	; 0x54
    1e26:	2100      	movs	r1, #0
    1e28:	4620      	mov	r0, r4
    1e2a:	4b0b      	ldr	r3, [pc, #44]	; (1e58 <prvCreateStaticTask+0x8c>)
    1e2c:	4798      	blx	r3
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
    1e2e:	6326      	str	r6, [r4, #48]	; 0x30
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
    1e30:	2302      	movs	r3, #2
    1e32:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    1e36:	2300      	movs	r3, #0
    1e38:	9303      	str	r3, [sp, #12]
    1e3a:	9402      	str	r4, [sp, #8]
    1e3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1e3e:	9301      	str	r3, [sp, #4]
    1e40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1e42:	9300      	str	r3, [sp, #0]
    1e44:	4643      	mov	r3, r8
    1e46:	463a      	mov	r2, r7
    1e48:	4649      	mov	r1, r9
    1e4a:	4628      	mov	r0, r5
    1e4c:	4d03      	ldr	r5, [pc, #12]	; (1e5c <prvCreateStaticTask+0x90>)
    1e4e:	47a8      	blx	r5
    }
    1e50:	4620      	mov	r0, r4
    1e52:	b007      	add	sp, #28
    1e54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1e58:	00002ecf 	.word	0x00002ecf
    1e5c:	00001d29 	.word	0x00001d29

00001e60 <prvInitialiseTaskLists>:
{
    1e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    1e62:	2400      	movs	r4, #0
    1e64:	e007      	b.n	1e76 <prvInitialiseTaskLists+0x16>
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    1e66:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    1e6a:	0093      	lsls	r3, r2, #2
    1e6c:	480d      	ldr	r0, [pc, #52]	; (1ea4 <prvInitialiseTaskLists+0x44>)
    1e6e:	4418      	add	r0, r3
    1e70:	4b0d      	ldr	r3, [pc, #52]	; (1ea8 <prvInitialiseTaskLists+0x48>)
    1e72:	4798      	blx	r3
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    1e74:	3401      	adds	r4, #1
    1e76:	2c04      	cmp	r4, #4
    1e78:	d9f5      	bls.n	1e66 <prvInitialiseTaskLists+0x6>
    vListInitialise( &xDelayedTaskList1 );
    1e7a:	4c0c      	ldr	r4, [pc, #48]	; (1eac <prvInitialiseTaskLists+0x4c>)
    1e7c:	f104 0794 	add.w	r7, r4, #148	; 0x94
    1e80:	4638      	mov	r0, r7
    1e82:	4d09      	ldr	r5, [pc, #36]	; (1ea8 <prvInitialiseTaskLists+0x48>)
    1e84:	47a8      	blx	r5
    vListInitialise( &xDelayedTaskList2 );
    1e86:	f104 06a8 	add.w	r6, r4, #168	; 0xa8
    1e8a:	4630      	mov	r0, r6
    1e8c:	47a8      	blx	r5
    vListInitialise( &xPendingReadyList );
    1e8e:	f104 0014 	add.w	r0, r4, #20
    1e92:	47a8      	blx	r5
        vListInitialise( &xSuspendedTaskList );
    1e94:	4620      	mov	r0, r4
    1e96:	47a8      	blx	r5
    pxDelayedTaskList = &xDelayedTaskList1;
    1e98:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
    1e9c:	f8c4 60bc 	str.w	r6, [r4, #188]	; 0xbc
    1ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ea2:	bf00      	nop
    1ea4:	20003b3c 	.word	0x20003b3c
    1ea8:	00000d51 	.word	0x00000d51
    1eac:	20003b14 	.word	0x20003b14

00001eb0 <prvAddNewTaskToReadyList>:
    {
    1eb0:	b570      	push	{r4, r5, r6, lr}
    1eb2:	4604      	mov	r4, r0
        taskENTER_CRITICAL();
    1eb4:	4b31      	ldr	r3, [pc, #196]	; (1f7c <prvAddNewTaskToReadyList+0xcc>)
    1eb6:	4798      	blx	r3
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
    1eb8:	4b31      	ldr	r3, [pc, #196]	; (1f80 <prvAddNewTaskToReadyList+0xd0>)
    1eba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    1ebe:	3201      	adds	r2, #1
    1ec0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
            if( pxCurrentTCB == NULL )
    1ec4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    1ec8:	2b00      	cmp	r3, #0
    1eca:	d04d      	beq.n	1f68 <prvAddNewTaskToReadyList+0xb8>
                if( xSchedulerRunning == pdFALSE )
    1ecc:	4b2c      	ldr	r3, [pc, #176]	; (1f80 <prvAddNewTaskToReadyList+0xd0>)
    1ece:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
    1ed2:	b94b      	cbnz	r3, 1ee8 <prvAddNewTaskToReadyList+0x38>
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    1ed4:	4b2a      	ldr	r3, [pc, #168]	; (1f80 <prvAddNewTaskToReadyList+0xd0>)
    1ed6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    1eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1edc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1ede:	429a      	cmp	r2, r3
    1ee0:	d802      	bhi.n	1ee8 <prvAddNewTaskToReadyList+0x38>
                        pxCurrentTCB = pxNewTCB;
    1ee2:	4b27      	ldr	r3, [pc, #156]	; (1f80 <prvAddNewTaskToReadyList+0xd0>)
    1ee4:	f8c3 40c4 	str.w	r4, [r3, #196]	; 0xc4
            uxTaskNumber++;
    1ee8:	4a25      	ldr	r2, [pc, #148]	; (1f80 <prvAddNewTaskToReadyList+0xd0>)
    1eea:	f8d2 30cc 	ldr.w	r3, [r2, #204]	; 0xcc
    1eee:	3301      	adds	r3, #1
    1ef0:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
                pxNewTCB->uxTCBNumber = uxTaskNumber;
    1ef4:	63e3      	str	r3, [r4, #60]	; 0x3c
            prvAddTaskToReadyList( pxNewTCB );
    1ef6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1ef8:	f8d2 20d0 	ldr.w	r2, [r2, #208]	; 0xd0
    1efc:	4293      	cmp	r3, r2
    1efe:	d902      	bls.n	1f06 <prvAddNewTaskToReadyList+0x56>
    1f00:	4a1f      	ldr	r2, [pc, #124]	; (1f80 <prvAddNewTaskToReadyList+0xd0>)
    1f02:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
    1f06:	4d1e      	ldr	r5, [pc, #120]	; (1f80 <prvAddNewTaskToReadyList+0xd0>)
    1f08:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1f0c:	009a      	lsls	r2, r3, #2
    1f0e:	442a      	add	r2, r5
    1f10:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1f12:	60a3      	str	r3, [r4, #8]
    1f14:	689a      	ldr	r2, [r3, #8]
    1f16:	60e2      	str	r2, [r4, #12]
    1f18:	6899      	ldr	r1, [r3, #8]
    1f1a:	1d22      	adds	r2, r4, #4
    1f1c:	604a      	str	r2, [r1, #4]
    1f1e:	609a      	str	r2, [r3, #8]
    1f20:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1f22:	f105 0128 	add.w	r1, r5, #40	; 0x28
    1f26:	0093      	lsls	r3, r2, #2
    1f28:	189e      	adds	r6, r3, r2
    1f2a:	00b0      	lsls	r0, r6, #2
    1f2c:	4606      	mov	r6, r0
    1f2e:	4401      	add	r1, r0
    1f30:	6161      	str	r1, [r4, #20]
    1f32:	4631      	mov	r1, r6
    1f34:	4429      	add	r1, r5
    1f36:	6a89      	ldr	r1, [r1, #40]	; 0x28
    1f38:	3101      	adds	r1, #1
    1f3a:	4632      	mov	r2, r6
    1f3c:	442a      	add	r2, r5
    1f3e:	6291      	str	r1, [r2, #40]	; 0x28
        taskEXIT_CRITICAL();
    1f40:	4b10      	ldr	r3, [pc, #64]	; (1f84 <prvAddNewTaskToReadyList+0xd4>)
    1f42:	4798      	blx	r3
        if( xSchedulerRunning != pdFALSE )
    1f44:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    1f48:	b16b      	cbz	r3, 1f66 <prvAddNewTaskToReadyList+0xb6>
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
    1f4a:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    1f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1f50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1f52:	429a      	cmp	r2, r3
    1f54:	d207      	bcs.n	1f66 <prvAddNewTaskToReadyList+0xb6>
    1f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1f5a:	4b0b      	ldr	r3, [pc, #44]	; (1f88 <prvAddNewTaskToReadyList+0xd8>)
    1f5c:	601a      	str	r2, [r3, #0]
    1f5e:	f3bf 8f4f 	dsb	sy
    1f62:	f3bf 8f6f 	isb	sy
    1f66:	bd70      	pop	{r4, r5, r6, pc}
                pxCurrentTCB = pxNewTCB;
    1f68:	4b05      	ldr	r3, [pc, #20]	; (1f80 <prvAddNewTaskToReadyList+0xd0>)
    1f6a:	f8c3 40c4 	str.w	r4, [r3, #196]	; 0xc4
                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    1f6e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    1f72:	2b01      	cmp	r3, #1
    1f74:	d1b8      	bne.n	1ee8 <prvAddNewTaskToReadyList+0x38>
                    prvInitialiseTaskLists();
    1f76:	4b05      	ldr	r3, [pc, #20]	; (1f8c <prvAddNewTaskToReadyList+0xdc>)
    1f78:	4798      	blx	r3
    1f7a:	e7b5      	b.n	1ee8 <prvAddNewTaskToReadyList+0x38>
    1f7c:	00000f05 	.word	0x00000f05
    1f80:	20003b14 	.word	0x20003b14
    1f84:	00000f49 	.word	0x00000f49
    1f88:	e000ed04 	.word	0xe000ed04
    1f8c:	00001e61 	.word	0x00001e61

00001f90 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
    1f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1f94:	4604      	mov	r4, r0
    1f96:	4688      	mov	r8, r1
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
    1f98:	4b25      	ldr	r3, [pc, #148]	; (2030 <prvAddCurrentTaskToDelayedList+0xa0>)
    1f9a:	f8d3 50d4 	ldr.w	r5, [r3, #212]	; 0xd4
    List_t * const pxDelayedList = pxDelayedTaskList;
    1f9e:	f8d3 608c 	ldr.w	r6, [r3, #140]	; 0x8c
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
    1fa2:	f8d3 70bc 	ldr.w	r7, [r3, #188]	; 0xbc
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1fa6:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
    1faa:	3004      	adds	r0, #4
    1fac:	4b21      	ldr	r3, [pc, #132]	; (2034 <prvAddCurrentTaskToDelayedList+0xa4>)
    1fae:	4798      	blx	r3
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    1fb0:	f1b4 3fff 	cmp.w	r4, #4294967295
    1fb4:	d015      	beq.n	1fe2 <prvAddCurrentTaskToDelayedList+0x52>
        else
        {
            /* Calculate the time at which the task should be woken if the event
             * does not occur.  This may overflow but this doesn't matter, the
             * kernel will manage it correctly. */
            xTimeToWake = xConstTickCount + xTicksToWait;
    1fb6:	442c      	add	r4, r5

            /* The list item will be inserted in wake time order. */
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    1fb8:	4b1d      	ldr	r3, [pc, #116]	; (2030 <prvAddCurrentTaskToDelayedList+0xa0>)
    1fba:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    1fbe:	605c      	str	r4, [r3, #4]

            if( xTimeToWake < xConstTickCount )
    1fc0:	42a5      	cmp	r5, r4
    1fc2:	d82b      	bhi.n	201c <prvAddCurrentTaskToDelayedList+0x8c>
            else
            {
                /* The wake time has not overflowed, so the current block list
                 * is used. */
                traceMOVED_TASK_TO_DELAYED_LIST();
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
    1fc4:	4d1a      	ldr	r5, [pc, #104]	; (2030 <prvAddCurrentTaskToDelayedList+0xa0>)
    1fc6:	f8d5 10c4 	ldr.w	r1, [r5, #196]	; 0xc4
    1fca:	3104      	adds	r1, #4
    1fcc:	4630      	mov	r0, r6
    1fce:	4b1a      	ldr	r3, [pc, #104]	; (2038 <prvAddCurrentTaskToDelayedList+0xa8>)
    1fd0:	4798      	blx	r3

                /* If the task entering the blocked state was placed at the
                 * head of the list of blocked tasks then xNextTaskUnblockTime
                 * needs to be updated too. */
                if( xTimeToWake < xNextTaskUnblockTime )
    1fd2:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
    1fd6:	429c      	cmp	r4, r3
    1fd8:	d201      	bcs.n	1fde <prvAddCurrentTaskToDelayedList+0x4e>
                {
                    xNextTaskUnblockTime = xTimeToWake;
    1fda:	f8c5 4090 	str.w	r4, [r5, #144]	; 0x90
    1fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    1fe2:	f1b8 0f00 	cmp.w	r8, #0
    1fe6:	d0e6      	beq.n	1fb6 <prvAddCurrentTaskToDelayedList+0x26>
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    1fe8:	4b11      	ldr	r3, [pc, #68]	; (2030 <prvAddCurrentTaskToDelayedList+0xa0>)
    1fea:	685a      	ldr	r2, [r3, #4]
    1fec:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
    1ff0:	608a      	str	r2, [r1, #8]
    1ff2:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
    1ff6:	6890      	ldr	r0, [r2, #8]
    1ff8:	60c8      	str	r0, [r1, #12]
    1ffa:	6890      	ldr	r0, [r2, #8]
    1ffc:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
    2000:	3104      	adds	r1, #4
    2002:	6041      	str	r1, [r0, #4]
    2004:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
    2008:	3104      	adds	r1, #4
    200a:	6091      	str	r1, [r2, #8]
    200c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
    2010:	6153      	str	r3, [r2, #20]
    2012:	681a      	ldr	r2, [r3, #0]
    2014:	3201      	adds	r2, #1
    2016:	601a      	str	r2, [r3, #0]
    2018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
    201c:	4b04      	ldr	r3, [pc, #16]	; (2030 <prvAddCurrentTaskToDelayedList+0xa0>)
    201e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
    2022:	3104      	adds	r1, #4
    2024:	4638      	mov	r0, r7
    2026:	4b04      	ldr	r3, [pc, #16]	; (2038 <prvAddCurrentTaskToDelayedList+0xa8>)
    2028:	4798      	blx	r3
    202a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    202e:	bf00      	nop
    2030:	20003b14 	.word	0x20003b14
    2034:	00000da1 	.word	0x00000da1
    2038:	00000d6d 	.word	0x00000d6d

0000203c <xTaskCreateStatic>:
    {
    203c:	b530      	push	{r4, r5, lr}
    203e:	b087      	sub	sp, #28
        TaskHandle_t xReturn = NULL;
    2040:	ac06      	add	r4, sp, #24
    2042:	2500      	movs	r5, #0
    2044:	f844 5d04 	str.w	r5, [r4, #-4]!
        pxNewTCB = prvCreateStaticTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer, &xReturn );
    2048:	9403      	str	r4, [sp, #12]
    204a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    204c:	9402      	str	r4, [sp, #8]
    204e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    2050:	9401      	str	r4, [sp, #4]
    2052:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    2054:	9400      	str	r4, [sp, #0]
    2056:	4c04      	ldr	r4, [pc, #16]	; (2068 <xTaskCreateStatic+0x2c>)
    2058:	47a0      	blx	r4
        if( pxNewTCB != NULL )
    205a:	b108      	cbz	r0, 2060 <xTaskCreateStatic+0x24>
            prvAddNewTaskToReadyList( pxNewTCB );
    205c:	4b03      	ldr	r3, [pc, #12]	; (206c <xTaskCreateStatic+0x30>)
    205e:	4798      	blx	r3
    }
    2060:	9805      	ldr	r0, [sp, #20]
    2062:	b007      	add	sp, #28
    2064:	bd30      	pop	{r4, r5, pc}
    2066:	bf00      	nop
    2068:	00001dcd 	.word	0x00001dcd
    206c:	00001eb1 	.word	0x00001eb1

00002070 <vTaskSuspendAll>:
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
    2070:	4a03      	ldr	r2, [pc, #12]	; (2080 <vTaskSuspendAll+0x10>)
    2072:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
    2076:	3301      	adds	r3, #1
    2078:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
        portMEMORY_BARRIER();
    207c:	4770      	bx	lr
    207e:	bf00      	nop
    2080:	20003b14 	.word	0x20003b14

00002084 <xTaskGetTickCount>:
        xTicks = xTickCount;
    2084:	4b01      	ldr	r3, [pc, #4]	; (208c <xTaskGetTickCount+0x8>)
    2086:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
}
    208a:	4770      	bx	lr
    208c:	20003b14 	.word	0x20003b14

00002090 <uxTaskGetNumberOfTasks>:
    return uxCurrentNumberOfTasks;
    2090:	4b01      	ldr	r3, [pc, #4]	; (2098 <uxTaskGetNumberOfTasks+0x8>)
    2092:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
}
    2096:	4770      	bx	lr
    2098:	20003b14 	.word	0x20003b14

0000209c <xTaskIncrementTick>:
{
    209c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
    209e:	4b5e      	ldr	r3, [pc, #376]	; (2218 <xTaskIncrementTick+0x17c>)
    20a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    20a4:	2b00      	cmp	r3, #0
    20a6:	f040 80ad 	bne.w	2204 <xTaskIncrementTick+0x168>
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    20aa:	4b5b      	ldr	r3, [pc, #364]	; (2218 <xTaskIncrementTick+0x17c>)
    20ac:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
    20b0:	3401      	adds	r4, #1
        xTickCount = xConstTickCount;
    20b2:	f8c3 40d4 	str.w	r4, [r3, #212]	; 0xd4
        if( xConstTickCount == ( TickType_t ) 0U )
    20b6:	b9e4      	cbnz	r4, 20f2 <xTaskIncrementTick+0x56>
            taskSWITCH_DELAYED_LISTS();
    20b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    20bc:	681b      	ldr	r3, [r3, #0]
    20be:	b143      	cbz	r3, 20d2 <xTaskIncrementTick+0x36>
    20c0:	f04f 0380 	mov.w	r3, #128	; 0x80
    20c4:	f383 8811 	msr	BASEPRI, r3
    20c8:	f3bf 8f6f 	isb	sy
    20cc:	f3bf 8f4f 	dsb	sy
    20d0:	e7fe      	b.n	20d0 <xTaskIncrementTick+0x34>
    20d2:	4b51      	ldr	r3, [pc, #324]	; (2218 <xTaskIncrementTick+0x17c>)
    20d4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    20d8:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
    20dc:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
    20e0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    20e4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    20e8:	3201      	adds	r2, #1
    20ea:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    20ee:	4b4b      	ldr	r3, [pc, #300]	; (221c <xTaskIncrementTick+0x180>)
    20f0:	4798      	blx	r3
        if( xConstTickCount >= xNextTaskUnblockTime )
    20f2:	4b49      	ldr	r3, [pc, #292]	; (2218 <xTaskIncrementTick+0x17c>)
    20f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    20f8:	429c      	cmp	r4, r3
    20fa:	d271      	bcs.n	21e0 <xTaskIncrementTick+0x144>
    BaseType_t xSwitchRequired = pdFALSE;
    20fc:	2000      	movs	r0, #0
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
    20fe:	4a46      	ldr	r2, [pc, #280]	; (2218 <xTaskIncrementTick+0x17c>)
    2100:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
    2104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2106:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    210a:	0099      	lsls	r1, r3, #2
    210c:	440a      	add	r2, r1
    210e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2110:	2b01      	cmp	r3, #1
    2112:	d900      	bls.n	2116 <xTaskIncrementTick+0x7a>
                    xSwitchRequired = pdTRUE;
    2114:	2001      	movs	r0, #1
                if( xYieldPendings[ 0 ] != pdFALSE )
    2116:	4b40      	ldr	r3, [pc, #256]	; (2218 <xTaskIncrementTick+0x17c>)
    2118:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
    211c:	2b00      	cmp	r3, #0
    211e:	d179      	bne.n	2214 <xTaskIncrementTick+0x178>
    2120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                                xSwitchRequired = pdTRUE;
    2122:	2001      	movs	r0, #1
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    2124:	4b3c      	ldr	r3, [pc, #240]	; (2218 <xTaskIncrementTick+0x17c>)
    2126:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    212a:	681b      	ldr	r3, [r3, #0]
    212c:	2b00      	cmp	r3, #0
    212e:	d059      	beq.n	21e4 <xTaskIncrementTick+0x148>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    2130:	4b39      	ldr	r3, [pc, #228]	; (2218 <xTaskIncrementTick+0x17c>)
    2132:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    2136:	68db      	ldr	r3, [r3, #12]
    2138:	68db      	ldr	r3, [r3, #12]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    213a:	685a      	ldr	r2, [r3, #4]
                    if( xConstTickCount < xItemValue )
    213c:	4294      	cmp	r4, r2
    213e:	d357      	bcc.n	21f0 <xTaskIncrementTick+0x154>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
    2140:	695a      	ldr	r2, [r3, #20]
    2142:	6899      	ldr	r1, [r3, #8]
    2144:	68dd      	ldr	r5, [r3, #12]
    2146:	608d      	str	r5, [r1, #8]
    2148:	68d9      	ldr	r1, [r3, #12]
    214a:	689d      	ldr	r5, [r3, #8]
    214c:	604d      	str	r5, [r1, #4]
    214e:	6851      	ldr	r1, [r2, #4]
    2150:	1d1e      	adds	r6, r3, #4
    2152:	42b1      	cmp	r1, r6
    2154:	d050      	beq.n	21f8 <xTaskIncrementTick+0x15c>
    2156:	2100      	movs	r1, #0
    2158:	6159      	str	r1, [r3, #20]
    215a:	6811      	ldr	r1, [r2, #0]
    215c:	3901      	subs	r1, #1
    215e:	6011      	str	r1, [r2, #0]
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    2160:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2162:	b17a      	cbz	r2, 2184 <xTaskIncrementTick+0xe8>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
    2164:	69d9      	ldr	r1, [r3, #28]
    2166:	6a1d      	ldr	r5, [r3, #32]
    2168:	608d      	str	r5, [r1, #8]
    216a:	6a19      	ldr	r1, [r3, #32]
    216c:	69dd      	ldr	r5, [r3, #28]
    216e:	604d      	str	r5, [r1, #4]
    2170:	6855      	ldr	r5, [r2, #4]
    2172:	f103 0118 	add.w	r1, r3, #24
    2176:	428d      	cmp	r5, r1
    2178:	d041      	beq.n	21fe <xTaskIncrementTick+0x162>
    217a:	2100      	movs	r1, #0
    217c:	6299      	str	r1, [r3, #40]	; 0x28
    217e:	6811      	ldr	r1, [r2, #0]
    2180:	3901      	subs	r1, #1
    2182:	6011      	str	r1, [r2, #0]
                    prvAddTaskToReadyList( pxTCB );
    2184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2186:	4924      	ldr	r1, [pc, #144]	; (2218 <xTaskIncrementTick+0x17c>)
    2188:	f8d1 10d0 	ldr.w	r1, [r1, #208]	; 0xd0
    218c:	428a      	cmp	r2, r1
    218e:	d902      	bls.n	2196 <xTaskIncrementTick+0xfa>
    2190:	4921      	ldr	r1, [pc, #132]	; (2218 <xTaskIncrementTick+0x17c>)
    2192:	f8c1 20d0 	str.w	r2, [r1, #208]	; 0xd0
    2196:	4920      	ldr	r1, [pc, #128]	; (2218 <xTaskIncrementTick+0x17c>)
    2198:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    219c:	0095      	lsls	r5, r2, #2
    219e:	440d      	add	r5, r1
    21a0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    21a2:	609a      	str	r2, [r3, #8]
    21a4:	6895      	ldr	r5, [r2, #8]
    21a6:	60dd      	str	r5, [r3, #12]
    21a8:	6895      	ldr	r5, [r2, #8]
    21aa:	606e      	str	r6, [r5, #4]
    21ac:	6096      	str	r6, [r2, #8]
    21ae:	6add      	ldr	r5, [r3, #44]	; 0x2c
    21b0:	f101 0628 	add.w	r6, r1, #40	; 0x28
    21b4:	00aa      	lsls	r2, r5, #2
    21b6:	eb02 0e05 	add.w	lr, r2, r5
    21ba:	ea4f 078e 	mov.w	r7, lr, lsl #2
    21be:	46be      	mov	lr, r7
    21c0:	443e      	add	r6, r7
    21c2:	615e      	str	r6, [r3, #20]
    21c4:	4676      	mov	r6, lr
    21c6:	440e      	add	r6, r1
    21c8:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    21ca:	3601      	adds	r6, #1
    21cc:	4675      	mov	r5, lr
    21ce:	440d      	add	r5, r1
    21d0:	62ae      	str	r6, [r5, #40]	; 0x28
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    21d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    21d4:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
    21d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    21da:	429a      	cmp	r2, r3
    21dc:	d8a1      	bhi.n	2122 <xTaskIncrementTick+0x86>
    21de:	e7a1      	b.n	2124 <xTaskIncrementTick+0x88>
    21e0:	2000      	movs	r0, #0
    21e2:	e79f      	b.n	2124 <xTaskIncrementTick+0x88>
                    xNextTaskUnblockTime = portMAX_DELAY;
    21e4:	f04f 32ff 	mov.w	r2, #4294967295
    21e8:	4b0b      	ldr	r3, [pc, #44]	; (2218 <xTaskIncrementTick+0x17c>)
    21ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
                    break;
    21ee:	e786      	b.n	20fe <xTaskIncrementTick+0x62>
                        xNextTaskUnblockTime = xItemValue;
    21f0:	4b09      	ldr	r3, [pc, #36]	; (2218 <xTaskIncrementTick+0x17c>)
    21f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
                        break;
    21f6:	e782      	b.n	20fe <xTaskIncrementTick+0x62>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
    21f8:	68d9      	ldr	r1, [r3, #12]
    21fa:	6051      	str	r1, [r2, #4]
    21fc:	e7ab      	b.n	2156 <xTaskIncrementTick+0xba>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
    21fe:	6a19      	ldr	r1, [r3, #32]
    2200:	6051      	str	r1, [r2, #4]
    2202:	e7ba      	b.n	217a <xTaskIncrementTick+0xde>
        xPendedTicks += 1U;
    2204:	4a04      	ldr	r2, [pc, #16]	; (2218 <xTaskIncrementTick+0x17c>)
    2206:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    220a:	3301      	adds	r3, #1
    220c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    BaseType_t xSwitchRequired = pdFALSE;
    2210:	2000      	movs	r0, #0
    2212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    xSwitchRequired = pdTRUE;
    2214:	2001      	movs	r0, #1
}
    2216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2218:	20003b14 	.word	0x20003b14
    221c:	00001cfd 	.word	0x00001cfd

00002220 <xTaskResumeAll>:
{
    2220:	b570      	push	{r4, r5, r6, lr}
        taskENTER_CRITICAL();
    2222:	4b57      	ldr	r3, [pc, #348]	; (2380 <xTaskResumeAll+0x160>)
    2224:	4798      	blx	r3
            configASSERT( uxSchedulerSuspended != 0U );
    2226:	4b57      	ldr	r3, [pc, #348]	; (2384 <xTaskResumeAll+0x164>)
    2228:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    222c:	b943      	cbnz	r3, 2240 <xTaskResumeAll+0x20>
    222e:	f04f 0380 	mov.w	r3, #128	; 0x80
    2232:	f383 8811 	msr	BASEPRI, r3
    2236:	f3bf 8f6f 	isb	sy
    223a:	f3bf 8f4f 	dsb	sy
    223e:	e7fe      	b.n	223e <xTaskResumeAll+0x1e>
            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
    2240:	4b50      	ldr	r3, [pc, #320]	; (2384 <xTaskResumeAll+0x164>)
    2242:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    2246:	3a01      	subs	r2, #1
    2248:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
    224c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    2250:	2b00      	cmp	r3, #0
    2252:	f040 8091 	bne.w	2378 <xTaskResumeAll+0x158>
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    2256:	4b4b      	ldr	r3, [pc, #300]	; (2384 <xTaskResumeAll+0x164>)
    2258:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    225c:	2b00      	cmp	r3, #0
    225e:	d058      	beq.n	2312 <xTaskResumeAll+0xf2>
    2260:	2300      	movs	r3, #0
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    2262:	4a48      	ldr	r2, [pc, #288]	; (2384 <xTaskResumeAll+0x164>)
    2264:	6952      	ldr	r2, [r2, #20]
    2266:	2a00      	cmp	r2, #0
    2268:	d05e      	beq.n	2328 <xTaskResumeAll+0x108>
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    226a:	4b46      	ldr	r3, [pc, #280]	; (2384 <xTaskResumeAll+0x164>)
    226c:	6a1b      	ldr	r3, [r3, #32]
    226e:	68db      	ldr	r3, [r3, #12]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
    2270:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2272:	69d9      	ldr	r1, [r3, #28]
    2274:	6a18      	ldr	r0, [r3, #32]
    2276:	6088      	str	r0, [r1, #8]
    2278:	6a19      	ldr	r1, [r3, #32]
    227a:	69d8      	ldr	r0, [r3, #28]
    227c:	6048      	str	r0, [r1, #4]
    227e:	6850      	ldr	r0, [r2, #4]
    2280:	f103 0118 	add.w	r1, r3, #24
    2284:	4288      	cmp	r0, r1
    2286:	d049      	beq.n	231c <xTaskResumeAll+0xfc>
    2288:	2100      	movs	r1, #0
    228a:	6299      	str	r1, [r3, #40]	; 0x28
    228c:	6811      	ldr	r1, [r2, #0]
    228e:	3901      	subs	r1, #1
    2290:	6011      	str	r1, [r2, #0]
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
    2292:	695a      	ldr	r2, [r3, #20]
    2294:	6899      	ldr	r1, [r3, #8]
    2296:	68d8      	ldr	r0, [r3, #12]
    2298:	6088      	str	r0, [r1, #8]
    229a:	68d9      	ldr	r1, [r3, #12]
    229c:	6898      	ldr	r0, [r3, #8]
    229e:	6048      	str	r0, [r1, #4]
    22a0:	6851      	ldr	r1, [r2, #4]
    22a2:	1d1c      	adds	r4, r3, #4
    22a4:	42a1      	cmp	r1, r4
    22a6:	d03c      	beq.n	2322 <xTaskResumeAll+0x102>
    22a8:	2100      	movs	r1, #0
    22aa:	6159      	str	r1, [r3, #20]
    22ac:	6811      	ldr	r1, [r2, #0]
    22ae:	3901      	subs	r1, #1
    22b0:	6011      	str	r1, [r2, #0]
                        prvAddTaskToReadyList( pxTCB );
    22b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    22b4:	4933      	ldr	r1, [pc, #204]	; (2384 <xTaskResumeAll+0x164>)
    22b6:	f8d1 10d0 	ldr.w	r1, [r1, #208]	; 0xd0
    22ba:	428a      	cmp	r2, r1
    22bc:	d902      	bls.n	22c4 <xTaskResumeAll+0xa4>
    22be:	4931      	ldr	r1, [pc, #196]	; (2384 <xTaskResumeAll+0x164>)
    22c0:	f8c1 20d0 	str.w	r2, [r1, #208]	; 0xd0
    22c4:	492f      	ldr	r1, [pc, #188]	; (2384 <xTaskResumeAll+0x164>)
    22c6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    22ca:	0090      	lsls	r0, r2, #2
    22cc:	4408      	add	r0, r1
    22ce:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    22d0:	609a      	str	r2, [r3, #8]
    22d2:	6890      	ldr	r0, [r2, #8]
    22d4:	60d8      	str	r0, [r3, #12]
    22d6:	6890      	ldr	r0, [r2, #8]
    22d8:	6044      	str	r4, [r0, #4]
    22da:	6094      	str	r4, [r2, #8]
    22dc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    22de:	f101 0428 	add.w	r4, r1, #40	; 0x28
    22e2:	0082      	lsls	r2, r0, #2
    22e4:	1816      	adds	r6, r2, r0
    22e6:	00b5      	lsls	r5, r6, #2
    22e8:	462e      	mov	r6, r5
    22ea:	442c      	add	r4, r5
    22ec:	615c      	str	r4, [r3, #20]
    22ee:	4634      	mov	r4, r6
    22f0:	440c      	add	r4, r1
    22f2:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    22f4:	3401      	adds	r4, #1
    22f6:	4630      	mov	r0, r6
    22f8:	4408      	add	r0, r1
    22fa:	6284      	str	r4, [r0, #40]	; 0x28
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    22fc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    22fe:	f8d1 20c4 	ldr.w	r2, [r1, #196]	; 0xc4
    2302:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    2304:	4290      	cmp	r0, r2
    2306:	d9ac      	bls.n	2262 <xTaskResumeAll+0x42>
                                xYieldPendings[ xCoreID ] = pdTRUE;
    2308:	2101      	movs	r1, #1
    230a:	4a1e      	ldr	r2, [pc, #120]	; (2384 <xTaskResumeAll+0x164>)
    230c:	f8c2 10dc 	str.w	r1, [r2, #220]	; 0xdc
    2310:	e7a7      	b.n	2262 <xTaskResumeAll+0x42>
    BaseType_t xAlreadyYielded = pdFALSE;
    2312:	2400      	movs	r4, #0
        taskEXIT_CRITICAL();
    2314:	4b1c      	ldr	r3, [pc, #112]	; (2388 <xTaskResumeAll+0x168>)
    2316:	4798      	blx	r3
}
    2318:	4620      	mov	r0, r4
    231a:	bd70      	pop	{r4, r5, r6, pc}
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
    231c:	6a19      	ldr	r1, [r3, #32]
    231e:	6051      	str	r1, [r2, #4]
    2320:	e7b2      	b.n	2288 <xTaskResumeAll+0x68>
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
    2322:	68d9      	ldr	r1, [r3, #12]
    2324:	6051      	str	r1, [r2, #4]
    2326:	e7bf      	b.n	22a8 <xTaskResumeAll+0x88>
                    if( pxTCB != NULL )
    2328:	b10b      	cbz	r3, 232e <xTaskResumeAll+0x10e>
                        prvResetNextTaskUnblockTime();
    232a:	4b18      	ldr	r3, [pc, #96]	; (238c <xTaskResumeAll+0x16c>)
    232c:	4798      	blx	r3
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
    232e:	4b15      	ldr	r3, [pc, #84]	; (2384 <xTaskResumeAll+0x164>)
    2330:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
                        if( xPendedCounts > ( TickType_t ) 0U )
    2334:	b994      	cbnz	r4, 235c <xTaskResumeAll+0x13c>
                    if( xYieldPendings[ xCoreID ] != pdFALSE )
    2336:	4b13      	ldr	r3, [pc, #76]	; (2384 <xTaskResumeAll+0x164>)
    2338:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
    233c:	b1f3      	cbz	r3, 237c <xTaskResumeAll+0x15c>
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
    233e:	4b11      	ldr	r3, [pc, #68]	; (2384 <xTaskResumeAll+0x164>)
    2340:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    2344:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2348:	4b11      	ldr	r3, [pc, #68]	; (2390 <xTaskResumeAll+0x170>)
    234a:	601a      	str	r2, [r3, #0]
    234c:	f3bf 8f4f 	dsb	sy
    2350:	f3bf 8f6f 	isb	sy
                            xAlreadyYielded = pdTRUE;
    2354:	2401      	movs	r4, #1
    2356:	e7dd      	b.n	2314 <xTaskResumeAll+0xf4>
                            } while( xPendedCounts > ( TickType_t ) 0U );
    2358:	3c01      	subs	r4, #1
    235a:	d008      	beq.n	236e <xTaskResumeAll+0x14e>
                                if( xTaskIncrementTick() != pdFALSE )
    235c:	4b0d      	ldr	r3, [pc, #52]	; (2394 <xTaskResumeAll+0x174>)
    235e:	4798      	blx	r3
    2360:	2800      	cmp	r0, #0
    2362:	d0f9      	beq.n	2358 <xTaskResumeAll+0x138>
                                    xYieldPendings[ xCoreID ] = pdTRUE;
    2364:	2201      	movs	r2, #1
    2366:	4b07      	ldr	r3, [pc, #28]	; (2384 <xTaskResumeAll+0x164>)
    2368:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    236c:	e7f4      	b.n	2358 <xTaskResumeAll+0x138>
                            xPendedTicks = 0;
    236e:	2200      	movs	r2, #0
    2370:	4b04      	ldr	r3, [pc, #16]	; (2384 <xTaskResumeAll+0x164>)
    2372:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    2376:	e7de      	b.n	2336 <xTaskResumeAll+0x116>
    BaseType_t xAlreadyYielded = pdFALSE;
    2378:	2400      	movs	r4, #0
    237a:	e7cb      	b.n	2314 <xTaskResumeAll+0xf4>
    237c:	2400      	movs	r4, #0
    237e:	e7c9      	b.n	2314 <xTaskResumeAll+0xf4>
    2380:	00000f05 	.word	0x00000f05
    2384:	20003b14 	.word	0x20003b14
    2388:	00000f49 	.word	0x00000f49
    238c:	00001cfd 	.word	0x00001cfd
    2390:	e000ed04 	.word	0xe000ed04
    2394:	0000209d 	.word	0x0000209d

00002398 <vTaskDelay>:
    {
    2398:	b510      	push	{r4, lr}
        if( xTicksToDelay > ( TickType_t ) 0U )
    239a:	b950      	cbnz	r0, 23b2 <vTaskDelay+0x1a>
        BaseType_t xAlreadyYielded = pdFALSE;
    239c:	2000      	movs	r0, #0
        if( xAlreadyYielded == pdFALSE )
    239e:	b938      	cbnz	r0, 23b0 <vTaskDelay+0x18>
            taskYIELD_WITHIN_API();
    23a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    23a4:	4b0f      	ldr	r3, [pc, #60]	; (23e4 <vTaskDelay+0x4c>)
    23a6:	601a      	str	r2, [r3, #0]
    23a8:	f3bf 8f4f 	dsb	sy
    23ac:	f3bf 8f6f 	isb	sy
    23b0:	bd10      	pop	{r4, pc}
    23b2:	4604      	mov	r4, r0
            vTaskSuspendAll();
    23b4:	4b0c      	ldr	r3, [pc, #48]	; (23e8 <vTaskDelay+0x50>)
    23b6:	4798      	blx	r3
                configASSERT( uxSchedulerSuspended == 1U );
    23b8:	4b0c      	ldr	r3, [pc, #48]	; (23ec <vTaskDelay+0x54>)
    23ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    23be:	2b01      	cmp	r3, #1
    23c0:	d008      	beq.n	23d4 <vTaskDelay+0x3c>
    23c2:	f04f 0380 	mov.w	r3, #128	; 0x80
    23c6:	f383 8811 	msr	BASEPRI, r3
    23ca:	f3bf 8f6f 	isb	sy
    23ce:	f3bf 8f4f 	dsb	sy
    23d2:	e7fe      	b.n	23d2 <vTaskDelay+0x3a>
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    23d4:	2100      	movs	r1, #0
    23d6:	4620      	mov	r0, r4
    23d8:	4b05      	ldr	r3, [pc, #20]	; (23f0 <vTaskDelay+0x58>)
    23da:	4798      	blx	r3
            xAlreadyYielded = xTaskResumeAll();
    23dc:	4b05      	ldr	r3, [pc, #20]	; (23f4 <vTaskDelay+0x5c>)
    23de:	4798      	blx	r3
    23e0:	e7dd      	b.n	239e <vTaskDelay+0x6>
    23e2:	bf00      	nop
    23e4:	e000ed04 	.word	0xe000ed04
    23e8:	00002071 	.word	0x00002071
    23ec:	20003b14 	.word	0x20003b14
    23f0:	00001f91 	.word	0x00001f91
    23f4:	00002221 	.word	0x00002221

000023f8 <vTaskSwitchContext>:
        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
    23f8:	4b23      	ldr	r3, [pc, #140]	; (2488 <vTaskSwitchContext+0x90>)
    23fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    23fe:	b97b      	cbnz	r3, 2420 <vTaskSwitchContext+0x28>
            xYieldPendings[ 0 ] = pdFALSE;
    2400:	4b21      	ldr	r3, [pc, #132]	; (2488 <vTaskSwitchContext+0x90>)
    2402:	2200      	movs	r2, #0
    2404:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
            taskSELECT_HIGHEST_PRIORITY_TASK();
    2408:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    240c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    2410:	0091      	lsls	r1, r2, #2
    2412:	4a1d      	ldr	r2, [pc, #116]	; (2488 <vTaskSwitchContext+0x90>)
    2414:	440a      	add	r2, r1
    2416:	6a92      	ldr	r2, [r2, #40]	; 0x28
    2418:	b982      	cbnz	r2, 243c <vTaskSwitchContext+0x44>
    241a:	b133      	cbz	r3, 242a <vTaskSwitchContext+0x32>
    241c:	3b01      	subs	r3, #1
    241e:	e7f5      	b.n	240c <vTaskSwitchContext+0x14>
            xYieldPendings[ 0 ] = pdTRUE;
    2420:	2201      	movs	r2, #1
    2422:	4b19      	ldr	r3, [pc, #100]	; (2488 <vTaskSwitchContext+0x90>)
    2424:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    2428:	4770      	bx	lr
    242a:	f04f 0380 	mov.w	r3, #128	; 0x80
    242e:	f383 8811 	msr	BASEPRI, r3
    2432:	f3bf 8f6f 	isb	sy
    2436:	f3bf 8f4f 	dsb	sy
    243a:	e7fe      	b.n	243a <vTaskSwitchContext+0x42>
    {
    243c:	b410      	push	{r4}
            taskSELECT_HIGHEST_PRIORITY_TASK();
    243e:	4a12      	ldr	r2, [pc, #72]	; (2488 <vTaskSwitchContext+0x90>)
    2440:	0099      	lsls	r1, r3, #2
    2442:	18cc      	adds	r4, r1, r3
    2444:	00a0      	lsls	r0, r4, #2
    2446:	4410      	add	r0, r2
    2448:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    244a:	6864      	ldr	r4, [r4, #4]
    244c:	62c4      	str	r4, [r0, #44]	; 0x2c
    244e:	3228      	adds	r2, #40	; 0x28
    2450:	4419      	add	r1, r3
    2452:	0088      	lsls	r0, r1, #2
    2454:	4601      	mov	r1, r0
    2456:	3008      	adds	r0, #8
    2458:	4402      	add	r2, r0
    245a:	4294      	cmp	r4, r2
    245c:	d00f      	beq.n	247e <vTaskSwitchContext+0x86>
    245e:	4a0a      	ldr	r2, [pc, #40]	; (2488 <vTaskSwitchContext+0x90>)
    2460:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    2464:	0081      	lsls	r1, r0, #2
    2466:	4411      	add	r1, r2
    2468:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    246a:	68c9      	ldr	r1, [r1, #12]
    246c:	f8c2 10c4 	str.w	r1, [r2, #196]	; 0xc4
    2470:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
            portTASK_SWITCH_HOOK( pxCurrentTCB );
    2474:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
    }
    2478:	f85d 4b04 	ldr.w	r4, [sp], #4
    247c:	4770      	bx	lr
            taskSELECT_HIGHEST_PRIORITY_TASK();
    247e:	4a02      	ldr	r2, [pc, #8]	; (2488 <vTaskSwitchContext+0x90>)
    2480:	440a      	add	r2, r1
    2482:	6b51      	ldr	r1, [r2, #52]	; 0x34
    2484:	62d1      	str	r1, [r2, #44]	; 0x2c
    2486:	e7ea      	b.n	245e <vTaskSwitchContext+0x66>
    2488:	20003b14 	.word	0x20003b14

0000248c <vTaskPlaceOnEventList>:
    configASSERT( pxEventList );
    248c:	b940      	cbnz	r0, 24a0 <vTaskPlaceOnEventList+0x14>
    248e:	f04f 0380 	mov.w	r3, #128	; 0x80
    2492:	f383 8811 	msr	BASEPRI, r3
    2496:	f3bf 8f6f 	isb	sy
    249a:	f3bf 8f4f 	dsb	sy
    249e:	e7fe      	b.n	249e <vTaskPlaceOnEventList+0x12>
{
    24a0:	b510      	push	{r4, lr}
    24a2:	460c      	mov	r4, r1
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    24a4:	4b05      	ldr	r3, [pc, #20]	; (24bc <vTaskPlaceOnEventList+0x30>)
    24a6:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
    24aa:	3118      	adds	r1, #24
    24ac:	4b04      	ldr	r3, [pc, #16]	; (24c0 <vTaskPlaceOnEventList+0x34>)
    24ae:	4798      	blx	r3
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    24b0:	2101      	movs	r1, #1
    24b2:	4620      	mov	r0, r4
    24b4:	4b03      	ldr	r3, [pc, #12]	; (24c4 <vTaskPlaceOnEventList+0x38>)
    24b6:	4798      	blx	r3
    24b8:	bd10      	pop	{r4, pc}
    24ba:	bf00      	nop
    24bc:	20003b14 	.word	0x20003b14
    24c0:	00000d6d 	.word	0x00000d6d
    24c4:	00001f91 	.word	0x00001f91

000024c8 <vTaskPlaceOnEventListRestricted>:
        configASSERT( pxEventList );
    24c8:	b310      	cbz	r0, 2510 <vTaskPlaceOnEventListRestricted+0x48>
    {
    24ca:	b570      	push	{r4, r5, r6, lr}
    24cc:	460e      	mov	r6, r1
    24ce:	4604      	mov	r4, r0
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    24d0:	6840      	ldr	r0, [r0, #4]
    24d2:	4b14      	ldr	r3, [pc, #80]	; (2524 <vTaskPlaceOnEventListRestricted+0x5c>)
    24d4:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
    24d8:	61c8      	str	r0, [r1, #28]
    24da:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
    24de:	6885      	ldr	r5, [r0, #8]
    24e0:	620d      	str	r5, [r1, #32]
    24e2:	6881      	ldr	r1, [r0, #8]
    24e4:	f8d3 50c4 	ldr.w	r5, [r3, #196]	; 0xc4
    24e8:	3518      	adds	r5, #24
    24ea:	604d      	str	r5, [r1, #4]
    24ec:	f8d3 50c4 	ldr.w	r5, [r3, #196]	; 0xc4
    24f0:	3518      	adds	r5, #24
    24f2:	6085      	str	r5, [r0, #8]
    24f4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    24f8:	629c      	str	r4, [r3, #40]	; 0x28
    24fa:	6823      	ldr	r3, [r4, #0]
    24fc:	3301      	adds	r3, #1
    24fe:	6023      	str	r3, [r4, #0]
        if( xWaitIndefinitely != pdFALSE )
    2500:	b10a      	cbz	r2, 2506 <vTaskPlaceOnEventListRestricted+0x3e>
            xTicksToWait = portMAX_DELAY;
    2502:	f04f 36ff 	mov.w	r6, #4294967295
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    2506:	4611      	mov	r1, r2
    2508:	4630      	mov	r0, r6
    250a:	4b07      	ldr	r3, [pc, #28]	; (2528 <vTaskPlaceOnEventListRestricted+0x60>)
    250c:	4798      	blx	r3
    250e:	bd70      	pop	{r4, r5, r6, pc}
    2510:	f04f 0380 	mov.w	r3, #128	; 0x80
    2514:	f383 8811 	msr	BASEPRI, r3
    2518:	f3bf 8f6f 	isb	sy
    251c:	f3bf 8f4f 	dsb	sy
    2520:	e7fe      	b.n	2520 <vTaskPlaceOnEventListRestricted+0x58>
    2522:	bf00      	nop
    2524:	20003b14 	.word	0x20003b14
    2528:	00001f91 	.word	0x00001f91

0000252c <xTaskRemoveFromEventList>:
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    252c:	68c3      	ldr	r3, [r0, #12]
    252e:	68db      	ldr	r3, [r3, #12]
    configASSERT( pxUnblockedTCB );
    2530:	2b00      	cmp	r3, #0
    2532:	d057      	beq.n	25e4 <xTaskRemoveFromEventList+0xb8>
{
    2534:	b470      	push	{r4, r5, r6}
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
    2536:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2538:	69d9      	ldr	r1, [r3, #28]
    253a:	6a18      	ldr	r0, [r3, #32]
    253c:	6088      	str	r0, [r1, #8]
    253e:	6a19      	ldr	r1, [r3, #32]
    2540:	69d8      	ldr	r0, [r3, #28]
    2542:	6048      	str	r0, [r1, #4]
    2544:	6851      	ldr	r1, [r2, #4]
    2546:	f103 0018 	add.w	r0, r3, #24
    254a:	4281      	cmp	r1, r0
    254c:	d053      	beq.n	25f6 <xTaskRemoveFromEventList+0xca>
    254e:	2100      	movs	r1, #0
    2550:	6299      	str	r1, [r3, #40]	; 0x28
    2552:	6811      	ldr	r1, [r2, #0]
    2554:	3901      	subs	r1, #1
    2556:	6011      	str	r1, [r2, #0]
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
    2558:	4a32      	ldr	r2, [pc, #200]	; (2624 <xTaskRemoveFromEventList+0xf8>)
    255a:	f8d2 20d8 	ldr.w	r2, [r2, #216]	; 0xd8
    255e:	2a00      	cmp	r2, #0
    2560:	d14f      	bne.n	2602 <xTaskRemoveFromEventList+0xd6>
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
    2562:	695a      	ldr	r2, [r3, #20]
    2564:	6899      	ldr	r1, [r3, #8]
    2566:	68d8      	ldr	r0, [r3, #12]
    2568:	6088      	str	r0, [r1, #8]
    256a:	68d9      	ldr	r1, [r3, #12]
    256c:	6898      	ldr	r0, [r3, #8]
    256e:	6048      	str	r0, [r1, #4]
    2570:	6851      	ldr	r1, [r2, #4]
    2572:	1d1c      	adds	r4, r3, #4
    2574:	42a1      	cmp	r1, r4
    2576:	d041      	beq.n	25fc <xTaskRemoveFromEventList+0xd0>
    2578:	2100      	movs	r1, #0
    257a:	6159      	str	r1, [r3, #20]
    257c:	6811      	ldr	r1, [r2, #0]
    257e:	3901      	subs	r1, #1
    2580:	6011      	str	r1, [r2, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
    2582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2584:	4927      	ldr	r1, [pc, #156]	; (2624 <xTaskRemoveFromEventList+0xf8>)
    2586:	f8d1 10d0 	ldr.w	r1, [r1, #208]	; 0xd0
    258a:	428a      	cmp	r2, r1
    258c:	d902      	bls.n	2594 <xTaskRemoveFromEventList+0x68>
    258e:	4925      	ldr	r1, [pc, #148]	; (2624 <xTaskRemoveFromEventList+0xf8>)
    2590:	f8c1 20d0 	str.w	r2, [r1, #208]	; 0xd0
    2594:	4923      	ldr	r1, [pc, #140]	; (2624 <xTaskRemoveFromEventList+0xf8>)
    2596:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    259a:	0090      	lsls	r0, r2, #2
    259c:	4408      	add	r0, r1
    259e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    25a0:	609a      	str	r2, [r3, #8]
    25a2:	6890      	ldr	r0, [r2, #8]
    25a4:	60d8      	str	r0, [r3, #12]
    25a6:	6890      	ldr	r0, [r2, #8]
    25a8:	6044      	str	r4, [r0, #4]
    25aa:	6094      	str	r4, [r2, #8]
    25ac:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    25ae:	f101 0428 	add.w	r4, r1, #40	; 0x28
    25b2:	0082      	lsls	r2, r0, #2
    25b4:	1816      	adds	r6, r2, r0
    25b6:	00b5      	lsls	r5, r6, #2
    25b8:	462e      	mov	r6, r5
    25ba:	442c      	add	r4, r5
    25bc:	615c      	str	r4, [r3, #20]
    25be:	4634      	mov	r4, r6
    25c0:	440c      	add	r4, r1
    25c2:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    25c4:	3401      	adds	r4, #1
    25c6:	4431      	add	r1, r6
    25c8:	628c      	str	r4, [r1, #40]	; 0x28
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    25ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25cc:	4b15      	ldr	r3, [pc, #84]	; (2624 <xTaskRemoveFromEventList+0xf8>)
    25ce:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    25d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    25d4:	429a      	cmp	r2, r3
    25d6:	d923      	bls.n	2620 <xTaskRemoveFromEventList+0xf4>
            xYieldPendings[ 0 ] = pdTRUE;
    25d8:	2001      	movs	r0, #1
    25da:	4b12      	ldr	r3, [pc, #72]	; (2624 <xTaskRemoveFromEventList+0xf8>)
    25dc:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
}
    25e0:	bc70      	pop	{r4, r5, r6}
    25e2:	4770      	bx	lr
    25e4:	f04f 0380 	mov.w	r3, #128	; 0x80
    25e8:	f383 8811 	msr	BASEPRI, r3
    25ec:	f3bf 8f6f 	isb	sy
    25f0:	f3bf 8f4f 	dsb	sy
    25f4:	e7fe      	b.n	25f4 <xTaskRemoveFromEventList+0xc8>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
    25f6:	6a19      	ldr	r1, [r3, #32]
    25f8:	6051      	str	r1, [r2, #4]
    25fa:	e7a8      	b.n	254e <xTaskRemoveFromEventList+0x22>
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
    25fc:	68d9      	ldr	r1, [r3, #12]
    25fe:	6051      	str	r1, [r2, #4]
    2600:	e7ba      	b.n	2578 <xTaskRemoveFromEventList+0x4c>
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    2602:	4a08      	ldr	r2, [pc, #32]	; (2624 <xTaskRemoveFromEventList+0xf8>)
    2604:	6991      	ldr	r1, [r2, #24]
    2606:	61d9      	str	r1, [r3, #28]
    2608:	688c      	ldr	r4, [r1, #8]
    260a:	621c      	str	r4, [r3, #32]
    260c:	688c      	ldr	r4, [r1, #8]
    260e:	6060      	str	r0, [r4, #4]
    2610:	6088      	str	r0, [r1, #8]
    2612:	f102 0114 	add.w	r1, r2, #20
    2616:	6299      	str	r1, [r3, #40]	; 0x28
    2618:	6951      	ldr	r1, [r2, #20]
    261a:	3101      	adds	r1, #1
    261c:	6151      	str	r1, [r2, #20]
    261e:	e7d4      	b.n	25ca <xTaskRemoveFromEventList+0x9e>
            xReturn = pdFALSE;
    2620:	2000      	movs	r0, #0
    return xReturn;
    2622:	e7dd      	b.n	25e0 <xTaskRemoveFromEventList+0xb4>
    2624:	20003b14 	.word	0x20003b14

00002628 <vTaskInternalSetTimeOutState>:
    pxTimeOut->xOverflowCount = xNumOfOverflows;
    2628:	4b03      	ldr	r3, [pc, #12]	; (2638 <vTaskInternalSetTimeOutState+0x10>)
    262a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    262e:	6002      	str	r2, [r0, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
    2630:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    2634:	6043      	str	r3, [r0, #4]
    2636:	4770      	bx	lr
    2638:	20003b14 	.word	0x20003b14

0000263c <xTaskCheckForTimeOut>:
{
    263c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    configASSERT( pxTimeOut );
    263e:	b1d8      	cbz	r0, 2678 <xTaskCheckForTimeOut+0x3c>
    2640:	4605      	mov	r5, r0
    configASSERT( pxTicksToWait );
    2642:	b311      	cbz	r1, 268a <xTaskCheckForTimeOut+0x4e>
    2644:	460c      	mov	r4, r1
    taskENTER_CRITICAL();
    2646:	4b1d      	ldr	r3, [pc, #116]	; (26bc <xTaskCheckForTimeOut+0x80>)
    2648:	4798      	blx	r3
        const TickType_t xConstTickCount = xTickCount;
    264a:	4b1d      	ldr	r3, [pc, #116]	; (26c0 <xTaskCheckForTimeOut+0x84>)
    264c:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    2650:	6869      	ldr	r1, [r5, #4]
    2652:	1a42      	subs	r2, r0, r1
            if( *pxTicksToWait == portMAX_DELAY )
    2654:	6823      	ldr	r3, [r4, #0]
    2656:	f1b3 3fff 	cmp.w	r3, #4294967295
    265a:	d02d      	beq.n	26b8 <xTaskCheckForTimeOut+0x7c>
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
    265c:	682f      	ldr	r7, [r5, #0]
    265e:	4e18      	ldr	r6, [pc, #96]	; (26c0 <xTaskCheckForTimeOut+0x84>)
    2660:	f8d6 60e0 	ldr.w	r6, [r6, #224]	; 0xe0
    2664:	42b7      	cmp	r7, r6
    2666:	d001      	beq.n	266c <xTaskCheckForTimeOut+0x30>
    2668:	4288      	cmp	r0, r1
    266a:	d217      	bcs.n	269c <xTaskCheckForTimeOut+0x60>
        else if( xElapsedTime < *pxTicksToWait )
    266c:	429a      	cmp	r2, r3
    266e:	d31c      	bcc.n	26aa <xTaskCheckForTimeOut+0x6e>
            *pxTicksToWait = ( TickType_t ) 0;
    2670:	2300      	movs	r3, #0
    2672:	6023      	str	r3, [r4, #0]
            xReturn = pdTRUE;
    2674:	2401      	movs	r4, #1
    2676:	e014      	b.n	26a2 <xTaskCheckForTimeOut+0x66>
    2678:	f04f 0380 	mov.w	r3, #128	; 0x80
    267c:	f383 8811 	msr	BASEPRI, r3
    2680:	f3bf 8f6f 	isb	sy
    2684:	f3bf 8f4f 	dsb	sy
    2688:	e7fe      	b.n	2688 <xTaskCheckForTimeOut+0x4c>
    268a:	f04f 0380 	mov.w	r3, #128	; 0x80
    268e:	f383 8811 	msr	BASEPRI, r3
    2692:	f3bf 8f6f 	isb	sy
    2696:	f3bf 8f4f 	dsb	sy
    269a:	e7fe      	b.n	269a <xTaskCheckForTimeOut+0x5e>
            *pxTicksToWait = ( TickType_t ) 0;
    269c:	2300      	movs	r3, #0
    269e:	6023      	str	r3, [r4, #0]
            xReturn = pdTRUE;
    26a0:	2401      	movs	r4, #1
    taskEXIT_CRITICAL();
    26a2:	4b08      	ldr	r3, [pc, #32]	; (26c4 <xTaskCheckForTimeOut+0x88>)
    26a4:	4798      	blx	r3
}
    26a6:	4620      	mov	r0, r4
    26a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            *pxTicksToWait -= xElapsedTime;
    26aa:	1a9b      	subs	r3, r3, r2
    26ac:	6023      	str	r3, [r4, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
    26ae:	4628      	mov	r0, r5
    26b0:	4b05      	ldr	r3, [pc, #20]	; (26c8 <xTaskCheckForTimeOut+0x8c>)
    26b2:	4798      	blx	r3
            xReturn = pdFALSE;
    26b4:	2400      	movs	r4, #0
    26b6:	e7f4      	b.n	26a2 <xTaskCheckForTimeOut+0x66>
                xReturn = pdFALSE;
    26b8:	2400      	movs	r4, #0
    26ba:	e7f2      	b.n	26a2 <xTaskCheckForTimeOut+0x66>
    26bc:	00000f05 	.word	0x00000f05
    26c0:	20003b14 	.word	0x20003b14
    26c4:	00000f49 	.word	0x00000f49
    26c8:	00002629 	.word	0x00002629

000026cc <vTaskMissedYield>:
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
    26cc:	2201      	movs	r2, #1
    26ce:	4b02      	ldr	r3, [pc, #8]	; (26d8 <vTaskMissedYield+0xc>)
    26d0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    26d4:	4770      	bx	lr
    26d6:	bf00      	nop
    26d8:	20003b14 	.word	0x20003b14

000026dc <xTaskGetSchedulerState>:
        if( xSchedulerRunning == pdFALSE )
    26dc:	4b06      	ldr	r3, [pc, #24]	; (26f8 <xTaskGetSchedulerState+0x1c>)
    26de:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
    26e2:	b12b      	cbz	r3, 26f0 <xTaskGetSchedulerState+0x14>
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
    26e4:	4b04      	ldr	r3, [pc, #16]	; (26f8 <xTaskGetSchedulerState+0x1c>)
    26e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    26ea:	b91b      	cbnz	r3, 26f4 <xTaskGetSchedulerState+0x18>
                    xReturn = taskSCHEDULER_RUNNING;
    26ec:	2002      	movs	r0, #2
    26ee:	4770      	bx	lr
            xReturn = taskSCHEDULER_NOT_STARTED;
    26f0:	2001      	movs	r0, #1
    26f2:	4770      	bx	lr
                    xReturn = taskSCHEDULER_SUSPENDED;
    26f4:	2000      	movs	r0, #0
    }
    26f6:	4770      	bx	lr
    26f8:	20003b14 	.word	0x20003b14

000026fc <xTaskPriorityInherit>:
        if( pxMutexHolder != NULL )
    26fc:	2800      	cmp	r0, #0
    26fe:	d058      	beq.n	27b2 <xTaskPriorityInherit+0xb6>
    {
    2700:	b570      	push	{r4, r5, r6, lr}
    2702:	4604      	mov	r4, r0
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
    2704:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    2706:	492c      	ldr	r1, [pc, #176]	; (27b8 <xTaskPriorityInherit+0xbc>)
    2708:	f8d1 10c4 	ldr.w	r1, [r1, #196]	; 0xc4
    270c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    270e:	428a      	cmp	r2, r1
    2710:	d244      	bcs.n	279c <xTaskPriorityInherit+0xa0>
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
    2712:	6981      	ldr	r1, [r0, #24]
    2714:	2900      	cmp	r1, #0
    2716:	db06      	blt.n	2726 <xTaskPriorityInherit+0x2a>
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority );
    2718:	4927      	ldr	r1, [pc, #156]	; (27b8 <xTaskPriorityInherit+0xbc>)
    271a:	f8d1 10c4 	ldr.w	r1, [r1, #196]	; 0xc4
    271e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    2720:	f1c1 0105 	rsb	r1, r1, #5
    2724:	6181      	str	r1, [r0, #24]
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
    2726:	6960      	ldr	r0, [r4, #20]
    2728:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    272c:	0091      	lsls	r1, r2, #2
    272e:	4a23      	ldr	r2, [pc, #140]	; (27bc <xTaskPriorityInherit+0xc0>)
    2730:	440a      	add	r2, r1
    2732:	4290      	cmp	r0, r2
    2734:	d006      	beq.n	2744 <xTaskPriorityInherit+0x48>
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    2736:	4a20      	ldr	r2, [pc, #128]	; (27b8 <xTaskPriorityInherit+0xbc>)
    2738:	f8d2 20c4 	ldr.w	r2, [r2, #196]	; 0xc4
    273c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    273e:	62e2      	str	r2, [r4, #44]	; 0x2c
                xReturn = pdTRUE;
    2740:	2001      	movs	r0, #1
    2742:	bd70      	pop	{r4, r5, r6, pc}
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2744:	1d25      	adds	r5, r4, #4
    2746:	4628      	mov	r0, r5
    2748:	4b1d      	ldr	r3, [pc, #116]	; (27c0 <xTaskPriorityInherit+0xc4>)
    274a:	4798      	blx	r3
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    274c:	4a1a      	ldr	r2, [pc, #104]	; (27b8 <xTaskPriorityInherit+0xbc>)
    274e:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
    2752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2754:	62e3      	str	r3, [r4, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
    2756:	f8d2 20d0 	ldr.w	r2, [r2, #208]	; 0xd0
    275a:	4293      	cmp	r3, r2
    275c:	d902      	bls.n	2764 <xTaskPriorityInherit+0x68>
    275e:	4a16      	ldr	r2, [pc, #88]	; (27b8 <xTaskPriorityInherit+0xbc>)
    2760:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
    2764:	4a14      	ldr	r2, [pc, #80]	; (27b8 <xTaskPriorityInherit+0xbc>)
    2766:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    276a:	0099      	lsls	r1, r3, #2
    276c:	4411      	add	r1, r2
    276e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    2770:	60a3      	str	r3, [r4, #8]
    2772:	6899      	ldr	r1, [r3, #8]
    2774:	60e1      	str	r1, [r4, #12]
    2776:	6899      	ldr	r1, [r3, #8]
    2778:	604d      	str	r5, [r1, #4]
    277a:	609d      	str	r5, [r3, #8]
    277c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    277e:	f102 0028 	add.w	r0, r2, #40	; 0x28
    2782:	008b      	lsls	r3, r1, #2
    2784:	185e      	adds	r6, r3, r1
    2786:	00b5      	lsls	r5, r6, #2
    2788:	4428      	add	r0, r5
    278a:	6160      	str	r0, [r4, #20]
    278c:	4628      	mov	r0, r5
    278e:	4410      	add	r0, r2
    2790:	6a80      	ldr	r0, [r0, #40]	; 0x28
    2792:	3001      	adds	r0, #1
    2794:	442a      	add	r2, r5
    2796:	6290      	str	r0, [r2, #40]	; 0x28
                xReturn = pdTRUE;
    2798:	2001      	movs	r0, #1
    279a:	bd70      	pop	{r4, r5, r6, pc}
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
    279c:	6c42      	ldr	r2, [r0, #68]	; 0x44
    279e:	4b06      	ldr	r3, [pc, #24]	; (27b8 <xTaskPriorityInherit+0xbc>)
    27a0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    27a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    27a6:	429a      	cmp	r2, r3
    27a8:	d201      	bcs.n	27ae <xTaskPriorityInherit+0xb2>
                    xReturn = pdTRUE;
    27aa:	2001      	movs	r0, #1
    }
    27ac:	bd70      	pop	{r4, r5, r6, pc}
        BaseType_t xReturn = pdFALSE;
    27ae:	2000      	movs	r0, #0
    27b0:	bd70      	pop	{r4, r5, r6, pc}
    27b2:	2000      	movs	r0, #0
    27b4:	4770      	bx	lr
    27b6:	bf00      	nop
    27b8:	20003b14 	.word	0x20003b14
    27bc:	20003b3c 	.word	0x20003b3c
    27c0:	00000da1 	.word	0x00000da1

000027c4 <xTaskPriorityDisinherit>:
        if( pxMutexHolder != NULL )
    27c4:	2800      	cmp	r0, #0
    27c6:	d04f      	beq.n	2868 <xTaskPriorityDisinherit+0xa4>
    {
    27c8:	b570      	push	{r4, r5, r6, lr}
    27ca:	4604      	mov	r4, r0
            configASSERT( pxTCB == pxCurrentTCB );
    27cc:	4b29      	ldr	r3, [pc, #164]	; (2874 <xTaskPriorityDisinherit+0xb0>)
    27ce:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    27d2:	4298      	cmp	r0, r3
    27d4:	d008      	beq.n	27e8 <xTaskPriorityDisinherit+0x24>
    27d6:	f04f 0380 	mov.w	r3, #128	; 0x80
    27da:	f383 8811 	msr	BASEPRI, r3
    27de:	f3bf 8f6f 	isb	sy
    27e2:	f3bf 8f4f 	dsb	sy
    27e6:	e7fe      	b.n	27e6 <xTaskPriorityDisinherit+0x22>
            configASSERT( pxTCB->uxMutexesHeld );
    27e8:	6c83      	ldr	r3, [r0, #72]	; 0x48
    27ea:	b943      	cbnz	r3, 27fe <xTaskPriorityDisinherit+0x3a>
    27ec:	f04f 0380 	mov.w	r3, #128	; 0x80
    27f0:	f383 8811 	msr	BASEPRI, r3
    27f4:	f3bf 8f6f 	isb	sy
    27f8:	f3bf 8f4f 	dsb	sy
    27fc:	e7fe      	b.n	27fc <xTaskPriorityDisinherit+0x38>
            ( pxTCB->uxMutexesHeld )--;
    27fe:	3b01      	subs	r3, #1
    2800:	6483      	str	r3, [r0, #72]	; 0x48
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    2802:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    2804:	6c42      	ldr	r2, [r0, #68]	; 0x44
    2806:	4291      	cmp	r1, r2
    2808:	d030      	beq.n	286c <xTaskPriorityDisinherit+0xa8>
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    280a:	2b00      	cmp	r3, #0
    280c:	d130      	bne.n	2870 <xTaskPriorityDisinherit+0xac>
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    280e:	1d05      	adds	r5, r0, #4
    2810:	4628      	mov	r0, r5
    2812:	4b19      	ldr	r3, [pc, #100]	; (2878 <xTaskPriorityDisinherit+0xb4>)
    2814:	4798      	blx	r3
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
    2816:	6c63      	ldr	r3, [r4, #68]	; 0x44
    2818:	62e3      	str	r3, [r4, #44]	; 0x2c
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
    281a:	f1c3 0205 	rsb	r2, r3, #5
    281e:	61a2      	str	r2, [r4, #24]
                    prvAddTaskToReadyList( pxTCB );
    2820:	4a14      	ldr	r2, [pc, #80]	; (2874 <xTaskPriorityDisinherit+0xb0>)
    2822:	f8d2 20d0 	ldr.w	r2, [r2, #208]	; 0xd0
    2826:	4293      	cmp	r3, r2
    2828:	d902      	bls.n	2830 <xTaskPriorityDisinherit+0x6c>
    282a:	4a12      	ldr	r2, [pc, #72]	; (2874 <xTaskPriorityDisinherit+0xb0>)
    282c:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
    2830:	4a10      	ldr	r2, [pc, #64]	; (2874 <xTaskPriorityDisinherit+0xb0>)
    2832:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2836:	0099      	lsls	r1, r3, #2
    2838:	4411      	add	r1, r2
    283a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    283c:	60a3      	str	r3, [r4, #8]
    283e:	6899      	ldr	r1, [r3, #8]
    2840:	60e1      	str	r1, [r4, #12]
    2842:	6899      	ldr	r1, [r3, #8]
    2844:	604d      	str	r5, [r1, #4]
    2846:	609d      	str	r5, [r3, #8]
    2848:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    284a:	f102 0028 	add.w	r0, r2, #40	; 0x28
    284e:	008b      	lsls	r3, r1, #2
    2850:	185e      	adds	r6, r3, r1
    2852:	00b5      	lsls	r5, r6, #2
    2854:	4428      	add	r0, r5
    2856:	6160      	str	r0, [r4, #20]
    2858:	4628      	mov	r0, r5
    285a:	4410      	add	r0, r2
    285c:	6a80      	ldr	r0, [r0, #40]	; 0x28
    285e:	3001      	adds	r0, #1
    2860:	442a      	add	r2, r5
    2862:	6290      	str	r0, [r2, #40]	; 0x28
                    xReturn = pdTRUE;
    2864:	2001      	movs	r0, #1
    2866:	bd70      	pop	{r4, r5, r6, pc}
        BaseType_t xReturn = pdFALSE;
    2868:	2000      	movs	r0, #0
    286a:	4770      	bx	lr
    286c:	2000      	movs	r0, #0
    286e:	bd70      	pop	{r4, r5, r6, pc}
    2870:	2000      	movs	r0, #0
    }
    2872:	bd70      	pop	{r4, r5, r6, pc}
    2874:	20003b14 	.word	0x20003b14
    2878:	00000da1 	.word	0x00000da1

0000287c <vTaskPriorityDisinheritAfterTimeout>:
        if( pxMutexHolder != NULL )
    287c:	2800      	cmp	r0, #0
    287e:	d05b      	beq.n	2938 <vTaskPriorityDisinheritAfterTimeout+0xbc>
    {
    2880:	b570      	push	{r4, r5, r6, lr}
    2882:	4604      	mov	r4, r0
            configASSERT( pxTCB->uxMutexesHeld );
    2884:	6c80      	ldr	r0, [r0, #72]	; 0x48
    2886:	b940      	cbnz	r0, 289a <vTaskPriorityDisinheritAfterTimeout+0x1e>
    2888:	f04f 0380 	mov.w	r3, #128	; 0x80
    288c:	f383 8811 	msr	BASEPRI, r3
    2890:	f3bf 8f6f 	isb	sy
    2894:	f3bf 8f4f 	dsb	sy
    2898:	e7fe      	b.n	2898 <vTaskPriorityDisinheritAfterTimeout+0x1c>
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
    289a:	6c62      	ldr	r2, [r4, #68]	; 0x44
    289c:	428a      	cmp	r2, r1
    289e:	d200      	bcs.n	28a2 <vTaskPriorityDisinheritAfterTimeout+0x26>
                uxPriorityToUse = uxHighestPriorityWaitingTask;
    28a0:	460a      	mov	r2, r1
            if( pxTCB->uxPriority != uxPriorityToUse )
    28a2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    28a4:	428a      	cmp	r2, r1
    28a6:	d001      	beq.n	28ac <vTaskPriorityDisinheritAfterTimeout+0x30>
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
    28a8:	2801      	cmp	r0, #1
    28aa:	d000      	beq.n	28ae <vTaskPriorityDisinheritAfterTimeout+0x32>
    28ac:	bd70      	pop	{r4, r5, r6, pc}
                    configASSERT( pxTCB != pxCurrentTCB );
    28ae:	4823      	ldr	r0, [pc, #140]	; (293c <vTaskPriorityDisinheritAfterTimeout+0xc0>)
    28b0:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
    28b4:	4284      	cmp	r4, r0
    28b6:	d108      	bne.n	28ca <vTaskPriorityDisinheritAfterTimeout+0x4e>
    28b8:	f04f 0380 	mov.w	r3, #128	; 0x80
    28bc:	f383 8811 	msr	BASEPRI, r3
    28c0:	f3bf 8f6f 	isb	sy
    28c4:	f3bf 8f4f 	dsb	sy
    28c8:	e7fe      	b.n	28c8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
                    pxTCB->uxPriority = uxPriorityToUse;
    28ca:	62e2      	str	r2, [r4, #44]	; 0x2c
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
    28cc:	69a0      	ldr	r0, [r4, #24]
    28ce:	2800      	cmp	r0, #0
    28d0:	db02      	blt.n	28d8 <vTaskPriorityDisinheritAfterTimeout+0x5c>
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
    28d2:	f1c2 0205 	rsb	r2, r2, #5
    28d6:	61a2      	str	r2, [r4, #24]
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    28d8:	6963      	ldr	r3, [r4, #20]
    28da:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    28de:	0088      	lsls	r0, r1, #2
    28e0:	4a17      	ldr	r2, [pc, #92]	; (2940 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
    28e2:	4402      	add	r2, r0
    28e4:	4293      	cmp	r3, r2
    28e6:	d1e1      	bne.n	28ac <vTaskPriorityDisinheritAfterTimeout+0x30>
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    28e8:	1d25      	adds	r5, r4, #4
    28ea:	4628      	mov	r0, r5
    28ec:	4b15      	ldr	r3, [pc, #84]	; (2944 <vTaskPriorityDisinheritAfterTimeout+0xc8>)
    28ee:	4798      	blx	r3
                        prvAddTaskToReadyList( pxTCB );
    28f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    28f2:	4a12      	ldr	r2, [pc, #72]	; (293c <vTaskPriorityDisinheritAfterTimeout+0xc0>)
    28f4:	f8d2 20d0 	ldr.w	r2, [r2, #208]	; 0xd0
    28f8:	4293      	cmp	r3, r2
    28fa:	d902      	bls.n	2902 <vTaskPriorityDisinheritAfterTimeout+0x86>
    28fc:	4a0f      	ldr	r2, [pc, #60]	; (293c <vTaskPriorityDisinheritAfterTimeout+0xc0>)
    28fe:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
    2902:	4a0e      	ldr	r2, [pc, #56]	; (293c <vTaskPriorityDisinheritAfterTimeout+0xc0>)
    2904:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2908:	0099      	lsls	r1, r3, #2
    290a:	4411      	add	r1, r2
    290c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    290e:	60a3      	str	r3, [r4, #8]
    2910:	6899      	ldr	r1, [r3, #8]
    2912:	60e1      	str	r1, [r4, #12]
    2914:	6899      	ldr	r1, [r3, #8]
    2916:	604d      	str	r5, [r1, #4]
    2918:	609d      	str	r5, [r3, #8]
    291a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    291c:	f102 0028 	add.w	r0, r2, #40	; 0x28
    2920:	008b      	lsls	r3, r1, #2
    2922:	185e      	adds	r6, r3, r1
    2924:	00b5      	lsls	r5, r6, #2
    2926:	4428      	add	r0, r5
    2928:	6160      	str	r0, [r4, #20]
    292a:	4628      	mov	r0, r5
    292c:	4410      	add	r0, r2
    292e:	6a80      	ldr	r0, [r0, #40]	; 0x28
    2930:	3001      	adds	r0, #1
    2932:	442a      	add	r2, r5
    2934:	6290      	str	r0, [r2, #40]	; 0x28
    }
    2936:	e7b9      	b.n	28ac <vTaskPriorityDisinheritAfterTimeout+0x30>
    2938:	4770      	bx	lr
    293a:	bf00      	nop
    293c:	20003b14 	.word	0x20003b14
    2940:	20003b3c 	.word	0x20003b3c
    2944:	00000da1 	.word	0x00000da1

00002948 <pvTaskIncrementMutexHeldCount>:
        pxTCB = pxCurrentTCB;
    2948:	4b03      	ldr	r3, [pc, #12]	; (2958 <pvTaskIncrementMutexHeldCount+0x10>)
    294a:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
        if( pxTCB != NULL )
    294e:	b110      	cbz	r0, 2956 <pvTaskIncrementMutexHeldCount+0xe>
            ( pxTCB->uxMutexesHeld )++;
    2950:	6c83      	ldr	r3, [r0, #72]	; 0x48
    2952:	3301      	adds	r3, #1
    2954:	6483      	str	r3, [r0, #72]	; 0x48
    }
    2956:	4770      	bx	lr
    2958:	20003b14 	.word	0x20003b14

0000295c <vApplicationGetIdleTaskMemory>:
 * configKERNEL_PROVIDED_STATIC_MEMORY to 0 or leaving it undefined.
 */
    void vApplicationGetIdleTaskMemory( StaticTask_t ** ppxIdleTaskTCBBuffer,
                                        StackType_t ** ppxIdleTaskStackBuffer,
                                        configSTACK_DEPTH_TYPE * puxIdleTaskStackSize )
    {
    295c:	b410      	push	{r4}
        static StaticTask_t xIdleTaskTCB;
        static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

        *ppxIdleTaskTCBBuffer = &( xIdleTaskTCB );
    295e:	4b06      	ldr	r3, [pc, #24]	; (2978 <vApplicationGetIdleTaskMemory+0x1c>)
    2960:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
    2964:	6004      	str	r4, [r0, #0]
        *ppxIdleTaskStackBuffer = &( uxIdleTaskStack[ 0 ] );
    2966:	f503 739e 	add.w	r3, r3, #316	; 0x13c
    296a:	600b      	str	r3, [r1, #0]
        *puxIdleTaskStackSize = configMINIMAL_STACK_SIZE;
    296c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2970:	6013      	str	r3, [r2, #0]
    }
    2972:	f85d 4b04 	ldr.w	r4, [sp], #4
    2976:	4770      	bx	lr
    2978:	20003b14 	.word	0x20003b14

0000297c <prvCreateIdleTasks>:
{
    297c:	b530      	push	{r4, r5, lr}
    297e:	b08b      	sub	sp, #44	; 0x2c
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
    2980:	2300      	movs	r3, #0
    2982:	2b07      	cmp	r3, #7
    2984:	dc08      	bgt.n	2998 <prvCreateIdleTasks+0x1c>
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
    2986:	4a15      	ldr	r2, [pc, #84]	; (29dc <prvCreateIdleTasks+0x60>)
    2988:	5cd2      	ldrb	r2, [r2, r3]
    298a:	a90a      	add	r1, sp, #40	; 0x28
    298c:	4419      	add	r1, r3
    298e:	f801 2c08 	strb.w	r2, [r1, #-8]
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
    2992:	b10a      	cbz	r2, 2998 <prvCreateIdleTasks+0x1c>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
    2994:	3301      	adds	r3, #1
    2996:	e7f4      	b.n	2982 <prvCreateIdleTasks+0x6>
                xReturn = pdFAIL;
    2998:	2500      	movs	r5, #0
    299a:	2001      	movs	r0, #1
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
    299c:	2d00      	cmp	r5, #0
    299e:	dd01      	ble.n	29a4 <prvCreateIdleTasks+0x28>
}
    29a0:	b00b      	add	sp, #44	; 0x2c
    29a2:	bd30      	pop	{r4, r5, pc}
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
    29a4:	2400      	movs	r4, #0
    29a6:	9405      	str	r4, [sp, #20]
            StackType_t * pxIdleTaskStackBuffer = NULL;
    29a8:	9406      	str	r4, [sp, #24]
                vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize );
    29aa:	aa07      	add	r2, sp, #28
    29ac:	a906      	add	r1, sp, #24
    29ae:	a805      	add	r0, sp, #20
    29b0:	4b0b      	ldr	r3, [pc, #44]	; (29e0 <prvCreateIdleTasks+0x64>)
    29b2:	4798      	blx	r3
            xIdleTaskHandles[ xCoreID ] = xTaskCreateStatic( pxIdleTaskFunction,
    29b4:	9b05      	ldr	r3, [sp, #20]
    29b6:	9302      	str	r3, [sp, #8]
    29b8:	9b06      	ldr	r3, [sp, #24]
    29ba:	9301      	str	r3, [sp, #4]
    29bc:	9400      	str	r4, [sp, #0]
    29be:	4623      	mov	r3, r4
    29c0:	9a07      	ldr	r2, [sp, #28]
    29c2:	a908      	add	r1, sp, #32
    29c4:	4807      	ldr	r0, [pc, #28]	; (29e4 <prvCreateIdleTasks+0x68>)
    29c6:	4c08      	ldr	r4, [pc, #32]	; (29e8 <prvCreateIdleTasks+0x6c>)
    29c8:	47a0      	blx	r4
            if( xIdleTaskHandles[ xCoreID ] != NULL )
    29ca:	b120      	cbz	r0, 29d6 <prvCreateIdleTasks+0x5a>
                xReturn = pdPASS;
    29cc:	2001      	movs	r0, #1
        if( xReturn == pdFAIL )
    29ce:	2800      	cmp	r0, #0
    29d0:	d0e6      	beq.n	29a0 <prvCreateIdleTasks+0x24>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
    29d2:	3501      	adds	r5, #1
    29d4:	e7e2      	b.n	299c <prvCreateIdleTasks+0x20>
                xReturn = pdFAIL;
    29d6:	2000      	movs	r0, #0
    29d8:	e7f9      	b.n	29ce <prvCreateIdleTasks+0x52>
    29da:	bf00      	nop
    29dc:	000041c4 	.word	0x000041c4
    29e0:	0000295d 	.word	0x0000295d
    29e4:	00001cd9 	.word	0x00001cd9
    29e8:	0000203d 	.word	0x0000203d

000029ec <vTaskStartScheduler>:
{
    29ec:	b508      	push	{r3, lr}
    xReturn = prvCreateIdleTasks();
    29ee:	4b17      	ldr	r3, [pc, #92]	; (2a4c <vTaskStartScheduler+0x60>)
    29f0:	4798      	blx	r3
        if( xReturn == pdPASS )
    29f2:	2801      	cmp	r0, #1
    29f4:	d007      	beq.n	2a06 <vTaskStartScheduler+0x1a>
    if( xReturn == pdPASS )
    29f6:	2801      	cmp	r0, #1
    29f8:	d008      	beq.n	2a0c <vTaskStartScheduler+0x20>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    29fa:	f1b0 3fff 	cmp.w	r0, #4294967295
    29fe:	d01b      	beq.n	2a38 <vTaskStartScheduler+0x4c>
    ( void ) uxTopUsedPriority;
    2a00:	4b13      	ldr	r3, [pc, #76]	; (2a50 <vTaskStartScheduler+0x64>)
    2a02:	681b      	ldr	r3, [r3, #0]
    2a04:	bd08      	pop	{r3, pc}
            xReturn = xTimerCreateTimerTask();
    2a06:	4b13      	ldr	r3, [pc, #76]	; (2a54 <vTaskStartScheduler+0x68>)
    2a08:	4798      	blx	r3
    2a0a:	e7f4      	b.n	29f6 <vTaskStartScheduler+0xa>
    2a0c:	f04f 0380 	mov.w	r3, #128	; 0x80
    2a10:	f383 8811 	msr	BASEPRI, r3
    2a14:	f3bf 8f6f 	isb	sy
    2a18:	f3bf 8f4f 	dsb	sy
        xNextTaskUnblockTime = portMAX_DELAY;
    2a1c:	4b0e      	ldr	r3, [pc, #56]	; (2a58 <vTaskStartScheduler+0x6c>)
    2a1e:	f04f 32ff 	mov.w	r2, #4294967295
    2a22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        xSchedulerRunning = pdTRUE;
    2a26:	2201      	movs	r2, #1
    2a28:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
    2a2c:	2200      	movs	r2, #0
    2a2e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        ( void ) xPortStartScheduler();
    2a32:	4b0a      	ldr	r3, [pc, #40]	; (2a5c <vTaskStartScheduler+0x70>)
    2a34:	4798      	blx	r3
    2a36:	e7e3      	b.n	2a00 <vTaskStartScheduler+0x14>
    2a38:	f04f 0380 	mov.w	r3, #128	; 0x80
    2a3c:	f383 8811 	msr	BASEPRI, r3
    2a40:	f3bf 8f6f 	isb	sy
    2a44:	f3bf 8f4f 	dsb	sy
    2a48:	e7fe      	b.n	2a48 <vTaskStartScheduler+0x5c>
    2a4a:	bf00      	nop
    2a4c:	0000297d 	.word	0x0000297d
    2a50:	20000008 	.word	0x20000008
    2a54:	00002dd1 	.word	0x00002dd1
    2a58:	20003b14 	.word	0x20003b14
    2a5c:	00000fc9 	.word	0x00000fc9

00002a60 <vApplicationGetTimerTaskMemory>:
 * configKERNEL_PROVIDED_STATIC_MEMORY to 0 or leaving it undefined.
 */
    void vApplicationGetTimerTaskMemory( StaticTask_t ** ppxTimerTaskTCBBuffer,
                                         StackType_t ** ppxTimerTaskStackBuffer,
                                         configSTACK_DEPTH_TYPE * puxTimerTaskStackSize )
    {
    2a60:	b410      	push	{r4}
        static StaticTask_t xTimerTaskTCB;
        static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

        *ppxTimerTaskTCBBuffer = &( xTimerTaskTCB );
    2a62:	4b05      	ldr	r3, [pc, #20]	; (2a78 <vApplicationGetTimerTaskMemory+0x18>)
    2a64:	f103 0444 	add.w	r4, r3, #68	; 0x44
    2a68:	6004      	str	r4, [r0, #0]
        *ppxTimerTaskStackBuffer = &( uxTimerTaskStack[ 0 ] );
    2a6a:	3398      	adds	r3, #152	; 0x98
    2a6c:	600b      	str	r3, [r1, #0]
        *puxTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
    2a6e:	2340      	movs	r3, #64	; 0x40
    2a70:	6013      	str	r3, [r2, #0]
    }
    2a72:	f85d 4b04 	ldr.w	r4, [sp], #4
    2a76:	4770      	bx	lr
    2a78:	20004c0c 	.word	0x20004c0c

00002a7c <prvGetNextExpireTime>:
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    2a7c:	4b06      	ldr	r3, [pc, #24]	; (2a98 <prvGetNextExpireTime+0x1c>)
    2a7e:	681a      	ldr	r2, [r3, #0]
    2a80:	6813      	ldr	r3, [r2, #0]
    2a82:	b92b      	cbnz	r3, 2a90 <prvGetNextExpireTime+0x14>
    2a84:	2301      	movs	r3, #1
    2a86:	6003      	str	r3, [r0, #0]

        if( *pxListWasEmpty == pdFALSE )
    2a88:	b923      	cbnz	r3, 2a94 <prvGetNextExpireTime+0x18>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2a8a:	68d3      	ldr	r3, [r2, #12]
    2a8c:	6818      	ldr	r0, [r3, #0]
    2a8e:	4770      	bx	lr
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    2a90:	2300      	movs	r3, #0
    2a92:	e7f8      	b.n	2a86 <prvGetNextExpireTime+0xa>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
    2a94:	2000      	movs	r0, #0
        }

        return xNextExpireTime;
    }
    2a96:	4770      	bx	lr
    2a98:	20004da4 	.word	0x20004da4

00002a9c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
    2a9c:	b508      	push	{r3, lr}
        BaseType_t xProcessTimerNow = pdFALSE;

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    2a9e:	6041      	str	r1, [r0, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2aa0:	6100      	str	r0, [r0, #16]

        if( xNextExpiryTime <= xTimeNow )
    2aa2:	4291      	cmp	r1, r2
    2aa4:	d80c      	bhi.n	2ac0 <prvInsertTimerInActiveList+0x24>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
    2aa6:	1ad2      	subs	r2, r2, r3
    2aa8:	6983      	ldr	r3, [r0, #24]
    2aaa:	429a      	cmp	r2, r3
    2aac:	d301      	bcc.n	2ab2 <prvInsertTimerInActiveList+0x16>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
    2aae:	2001      	movs	r0, #1
    2ab0:	bd08      	pop	{r3, pc}
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    2ab2:	1d01      	adds	r1, r0, #4
    2ab4:	4b09      	ldr	r3, [pc, #36]	; (2adc <prvInsertTimerInActiveList+0x40>)
    2ab6:	6858      	ldr	r0, [r3, #4]
    2ab8:	4b09      	ldr	r3, [pc, #36]	; (2ae0 <prvInsertTimerInActiveList+0x44>)
    2aba:	4798      	blx	r3
        BaseType_t xProcessTimerNow = pdFALSE;
    2abc:	2000      	movs	r0, #0
    2abe:	bd08      	pop	{r3, pc}
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    2ac0:	429a      	cmp	r2, r3
    2ac2:	d201      	bcs.n	2ac8 <prvInsertTimerInActiveList+0x2c>
    2ac4:	4299      	cmp	r1, r3
    2ac6:	d206      	bcs.n	2ad6 <prvInsertTimerInActiveList+0x3a>
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2ac8:	1d01      	adds	r1, r0, #4
    2aca:	4b04      	ldr	r3, [pc, #16]	; (2adc <prvInsertTimerInActiveList+0x40>)
    2acc:	6818      	ldr	r0, [r3, #0]
    2ace:	4b04      	ldr	r3, [pc, #16]	; (2ae0 <prvInsertTimerInActiveList+0x44>)
    2ad0:	4798      	blx	r3
        BaseType_t xProcessTimerNow = pdFALSE;
    2ad2:	2000      	movs	r0, #0
    2ad4:	bd08      	pop	{r3, pc}
                xProcessTimerNow = pdTRUE;
    2ad6:	2001      	movs	r0, #1
            }
        }

        return xProcessTimerNow;
    }
    2ad8:	bd08      	pop	{r3, pc}
    2ada:	bf00      	nop
    2adc:	20004da4 	.word	0x20004da4
    2ae0:	00000d6d 	.word	0x00000d6d

00002ae4 <prvReloadTimer>:
    {
    2ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ae6:	4604      	mov	r4, r0
    2ae8:	460d      	mov	r5, r1
    2aea:	4617      	mov	r7, r2
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
    2aec:	e004      	b.n	2af8 <prvReloadTimer+0x14>
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
    2aee:	69a3      	ldr	r3, [r4, #24]
    2af0:	441d      	add	r5, r3
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2af2:	6a23      	ldr	r3, [r4, #32]
    2af4:	4620      	mov	r0, r4
    2af6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
    2af8:	69a1      	ldr	r1, [r4, #24]
    2afa:	462b      	mov	r3, r5
    2afc:	463a      	mov	r2, r7
    2afe:	4429      	add	r1, r5
    2b00:	4620      	mov	r0, r4
    2b02:	4e02      	ldr	r6, [pc, #8]	; (2b0c <prvReloadTimer+0x28>)
    2b04:	47b0      	blx	r6
    2b06:	2800      	cmp	r0, #0
    2b08:	d1f1      	bne.n	2aee <prvReloadTimer+0xa>
    }
    2b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b0c:	00002a9d 	.word	0x00002a9d

00002b10 <prvProcessExpiredTimer>:
    {
    2b10:	b570      	push	{r4, r5, r6, lr}
    2b12:	4605      	mov	r5, r0
    2b14:	460e      	mov	r6, r1
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    2b16:	4b0d      	ldr	r3, [pc, #52]	; (2b4c <prvProcessExpiredTimer+0x3c>)
    2b18:	681b      	ldr	r3, [r3, #0]
    2b1a:	68db      	ldr	r3, [r3, #12]
    2b1c:	68dc      	ldr	r4, [r3, #12]
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2b1e:	1d20      	adds	r0, r4, #4
    2b20:	4b0b      	ldr	r3, [pc, #44]	; (2b50 <prvProcessExpiredTimer+0x40>)
    2b22:	4798      	blx	r3
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
    2b24:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    2b28:	f013 0f04 	tst.w	r3, #4
    2b2c:	d107      	bne.n	2b3e <prvProcessExpiredTimer+0x2e>
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    2b2e:	f023 0301 	bic.w	r3, r3, #1
    2b32:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2b36:	6a23      	ldr	r3, [r4, #32]
    2b38:	4620      	mov	r0, r4
    2b3a:	4798      	blx	r3
    2b3c:	bd70      	pop	{r4, r5, r6, pc}
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
    2b3e:	4632      	mov	r2, r6
    2b40:	4629      	mov	r1, r5
    2b42:	4620      	mov	r0, r4
    2b44:	4b03      	ldr	r3, [pc, #12]	; (2b54 <prvProcessExpiredTimer+0x44>)
    2b46:	4798      	blx	r3
    2b48:	e7f5      	b.n	2b36 <prvProcessExpiredTimer+0x26>
    2b4a:	bf00      	nop
    2b4c:	20004da4 	.word	0x20004da4
    2b50:	00000da1 	.word	0x00000da1
    2b54:	00002ae5 	.word	0x00002ae5

00002b58 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    2b58:	b508      	push	{r3, lr}

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2b5a:	e005      	b.n	2b68 <prvSwitchTimerLists+0x10>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2b5c:	68db      	ldr	r3, [r3, #12]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
    2b5e:	f04f 31ff 	mov.w	r1, #4294967295
    2b62:	6818      	ldr	r0, [r3, #0]
    2b64:	4b05      	ldr	r3, [pc, #20]	; (2b7c <prvSwitchTimerLists+0x24>)
    2b66:	4798      	blx	r3
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2b68:	4b05      	ldr	r3, [pc, #20]	; (2b80 <prvSwitchTimerLists+0x28>)
    2b6a:	681b      	ldr	r3, [r3, #0]
    2b6c:	681a      	ldr	r2, [r3, #0]
    2b6e:	2a00      	cmp	r2, #0
    2b70:	d1f4      	bne.n	2b5c <prvSwitchTimerLists+0x4>
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    2b72:	4a03      	ldr	r2, [pc, #12]	; (2b80 <prvSwitchTimerLists+0x28>)
    2b74:	6851      	ldr	r1, [r2, #4]
    2b76:	6011      	str	r1, [r2, #0]
        pxOverflowTimerList = pxTemp;
    2b78:	6053      	str	r3, [r2, #4]
    2b7a:	bd08      	pop	{r3, pc}
    2b7c:	00002b11 	.word	0x00002b11
    2b80:	20004da4 	.word	0x20004da4

00002b84 <prvSampleTimeNow>:
    {
    2b84:	b538      	push	{r3, r4, r5, lr}
    2b86:	4605      	mov	r5, r0
        xTimeNow = xTaskGetTickCount();
    2b88:	4b08      	ldr	r3, [pc, #32]	; (2bac <prvSampleTimeNow+0x28>)
    2b8a:	4798      	blx	r3
    2b8c:	4604      	mov	r4, r0
        if( xTimeNow < xLastTime )
    2b8e:	4b08      	ldr	r3, [pc, #32]	; (2bb0 <prvSampleTimeNow+0x2c>)
    2b90:	689b      	ldr	r3, [r3, #8]
    2b92:	4298      	cmp	r0, r3
    2b94:	d305      	bcc.n	2ba2 <prvSampleTimeNow+0x1e>
            *pxTimerListsWereSwitched = pdFALSE;
    2b96:	2300      	movs	r3, #0
    2b98:	602b      	str	r3, [r5, #0]
        xLastTime = xTimeNow;
    2b9a:	4b05      	ldr	r3, [pc, #20]	; (2bb0 <prvSampleTimeNow+0x2c>)
    2b9c:	609c      	str	r4, [r3, #8]
    }
    2b9e:	4620      	mov	r0, r4
    2ba0:	bd38      	pop	{r3, r4, r5, pc}
            prvSwitchTimerLists();
    2ba2:	4b04      	ldr	r3, [pc, #16]	; (2bb4 <prvSampleTimeNow+0x30>)
    2ba4:	4798      	blx	r3
            *pxTimerListsWereSwitched = pdTRUE;
    2ba6:	2301      	movs	r3, #1
    2ba8:	602b      	str	r3, [r5, #0]
    2baa:	e7f6      	b.n	2b9a <prvSampleTimeNow+0x16>
    2bac:	00002085 	.word	0x00002085
    2bb0:	20004da4 	.word	0x20004da4
    2bb4:	00002b59 	.word	0x00002b59

00002bb8 <prvProcessTimerOrBlockTask>:
    {
    2bb8:	b570      	push	{r4, r5, r6, lr}
    2bba:	b082      	sub	sp, #8
    2bbc:	4606      	mov	r6, r0
    2bbe:	460c      	mov	r4, r1
        vTaskSuspendAll();
    2bc0:	4b17      	ldr	r3, [pc, #92]	; (2c20 <prvProcessTimerOrBlockTask+0x68>)
    2bc2:	4798      	blx	r3
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2bc4:	a801      	add	r0, sp, #4
    2bc6:	4b17      	ldr	r3, [pc, #92]	; (2c24 <prvProcessTimerOrBlockTask+0x6c>)
    2bc8:	4798      	blx	r3
            if( xTimerListsWereSwitched == pdFALSE )
    2bca:	9b01      	ldr	r3, [sp, #4]
    2bcc:	bb2b      	cbnz	r3, 2c1a <prvProcessTimerOrBlockTask+0x62>
    2bce:	4605      	mov	r5, r0
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2bd0:	b90c      	cbnz	r4, 2bd6 <prvProcessTimerOrBlockTask+0x1e>
    2bd2:	42b0      	cmp	r0, r6
    2bd4:	d218      	bcs.n	2c08 <prvProcessTimerOrBlockTask+0x50>
                    if( xListWasEmpty != pdFALSE )
    2bd6:	b124      	cbz	r4, 2be2 <prvProcessTimerOrBlockTask+0x2a>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2bd8:	4b13      	ldr	r3, [pc, #76]	; (2c28 <prvProcessTimerOrBlockTask+0x70>)
    2bda:	685b      	ldr	r3, [r3, #4]
    2bdc:	681b      	ldr	r3, [r3, #0]
    2bde:	b9d3      	cbnz	r3, 2c16 <prvProcessTimerOrBlockTask+0x5e>
    2be0:	2401      	movs	r4, #1
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2be2:	4622      	mov	r2, r4
    2be4:	1b71      	subs	r1, r6, r5
    2be6:	4b10      	ldr	r3, [pc, #64]	; (2c28 <prvProcessTimerOrBlockTask+0x70>)
    2be8:	68d8      	ldr	r0, [r3, #12]
    2bea:	4b10      	ldr	r3, [pc, #64]	; (2c2c <prvProcessTimerOrBlockTask+0x74>)
    2bec:	4798      	blx	r3
                    if( xTaskResumeAll() == pdFALSE )
    2bee:	4b10      	ldr	r3, [pc, #64]	; (2c30 <prvProcessTimerOrBlockTask+0x78>)
    2bf0:	4798      	blx	r3
    2bf2:	b938      	cbnz	r0, 2c04 <prvProcessTimerOrBlockTask+0x4c>
                        taskYIELD_WITHIN_API();
    2bf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2bf8:	4b0e      	ldr	r3, [pc, #56]	; (2c34 <prvProcessTimerOrBlockTask+0x7c>)
    2bfa:	601a      	str	r2, [r3, #0]
    2bfc:	f3bf 8f4f 	dsb	sy
    2c00:	f3bf 8f6f 	isb	sy
    }
    2c04:	b002      	add	sp, #8
    2c06:	bd70      	pop	{r4, r5, r6, pc}
                    ( void ) xTaskResumeAll();
    2c08:	4b09      	ldr	r3, [pc, #36]	; (2c30 <prvProcessTimerOrBlockTask+0x78>)
    2c0a:	4798      	blx	r3
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    2c0c:	4629      	mov	r1, r5
    2c0e:	4630      	mov	r0, r6
    2c10:	4b09      	ldr	r3, [pc, #36]	; (2c38 <prvProcessTimerOrBlockTask+0x80>)
    2c12:	4798      	blx	r3
    2c14:	e7f6      	b.n	2c04 <prvProcessTimerOrBlockTask+0x4c>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2c16:	2400      	movs	r4, #0
    2c18:	e7e3      	b.n	2be2 <prvProcessTimerOrBlockTask+0x2a>
                ( void ) xTaskResumeAll();
    2c1a:	4b05      	ldr	r3, [pc, #20]	; (2c30 <prvProcessTimerOrBlockTask+0x78>)
    2c1c:	4798      	blx	r3
    }
    2c1e:	e7f1      	b.n	2c04 <prvProcessTimerOrBlockTask+0x4c>
    2c20:	00002071 	.word	0x00002071
    2c24:	00002b85 	.word	0x00002b85
    2c28:	20004da4 	.word	0x20004da4
    2c2c:	00001c75 	.word	0x00001c75
    2c30:	00002221 	.word	0x00002221
    2c34:	e000ed04 	.word	0xe000ed04
    2c38:	00002b11 	.word	0x00002b11

00002c3c <prvProcessReceivedCommands>:
    {
    2c3c:	b570      	push	{r4, r5, r6, lr}
    2c3e:	b084      	sub	sp, #16
        DaemonTaskMessage_t xMessage = { 0 };
    2c40:	2300      	movs	r3, #0
    2c42:	9301      	str	r3, [sp, #4]
    2c44:	9302      	str	r3, [sp, #8]
    2c46:	9303      	str	r3, [sp, #12]
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
    2c48:	2200      	movs	r2, #0
    2c4a:	a901      	add	r1, sp, #4
    2c4c:	4b39      	ldr	r3, [pc, #228]	; (2d34 <prvProcessReceivedCommands+0xf8>)
    2c4e:	68d8      	ldr	r0, [r3, #12]
    2c50:	4b39      	ldr	r3, [pc, #228]	; (2d38 <prvProcessReceivedCommands+0xfc>)
    2c52:	4798      	blx	r3
    2c54:	2800      	cmp	r0, #0
    2c56:	d06a      	beq.n	2d2e <prvProcessReceivedCommands+0xf2>
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2c58:	9b01      	ldr	r3, [sp, #4]
    2c5a:	2b00      	cmp	r3, #0
    2c5c:	dbf4      	blt.n	2c48 <prvProcessReceivedCommands+0xc>
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2c5e:	9c03      	ldr	r4, [sp, #12]
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    2c60:	6963      	ldr	r3, [r4, #20]
    2c62:	b113      	cbz	r3, 2c6a <prvProcessReceivedCommands+0x2e>
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2c64:	1d20      	adds	r0, r4, #4
    2c66:	4b35      	ldr	r3, [pc, #212]	; (2d3c <prvProcessReceivedCommands+0x100>)
    2c68:	4798      	blx	r3
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2c6a:	4668      	mov	r0, sp
    2c6c:	4b34      	ldr	r3, [pc, #208]	; (2d40 <prvProcessReceivedCommands+0x104>)
    2c6e:	4798      	blx	r3
    2c70:	4605      	mov	r5, r0
                switch( xMessage.xMessageID )
    2c72:	9b01      	ldr	r3, [sp, #4]
    2c74:	3b01      	subs	r3, #1
    2c76:	2b08      	cmp	r3, #8
    2c78:	d8e6      	bhi.n	2c48 <prvProcessReceivedCommands+0xc>
    2c7a:	e8df f003 	tbb	[pc, r3]
    2c7e:	0505      	.short	0x0505
    2c80:	054a312a 	.word	0x054a312a
    2c84:	2a05      	.short	0x2a05
    2c86:	31          	.byte	0x31
    2c87:	00          	.byte	0x00
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
    2c88:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    2c8c:	f043 0301 	orr.w	r3, r3, #1
    2c90:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    2c94:	9902      	ldr	r1, [sp, #8]
    2c96:	69a0      	ldr	r0, [r4, #24]
    2c98:	460b      	mov	r3, r1
    2c9a:	462a      	mov	r2, r5
    2c9c:	4401      	add	r1, r0
    2c9e:	4620      	mov	r0, r4
    2ca0:	4e28      	ldr	r6, [pc, #160]	; (2d44 <prvProcessReceivedCommands+0x108>)
    2ca2:	47b0      	blx	r6
    2ca4:	2800      	cmp	r0, #0
    2ca6:	d0cf      	beq.n	2c48 <prvProcessReceivedCommands+0xc>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
    2ca8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    2cac:	f013 0f04 	tst.w	r3, #4
    2cb0:	d107      	bne.n	2cc2 <prvProcessReceivedCommands+0x86>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    2cb2:	f023 0301 	bic.w	r3, r3, #1
    2cb6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2cba:	6a23      	ldr	r3, [r4, #32]
    2cbc:	4620      	mov	r0, r4
    2cbe:	4798      	blx	r3
    2cc0:	e7c2      	b.n	2c48 <prvProcessReceivedCommands+0xc>
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
    2cc2:	69a3      	ldr	r3, [r4, #24]
    2cc4:	462a      	mov	r2, r5
    2cc6:	9902      	ldr	r1, [sp, #8]
    2cc8:	4419      	add	r1, r3
    2cca:	4620      	mov	r0, r4
    2ccc:	4b1e      	ldr	r3, [pc, #120]	; (2d48 <prvProcessReceivedCommands+0x10c>)
    2cce:	4798      	blx	r3
    2cd0:	e7f3      	b.n	2cba <prvProcessReceivedCommands+0x7e>
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    2cd2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    2cd6:	f023 0301 	bic.w	r3, r3, #1
    2cda:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
                        break;
    2cde:	e7b3      	b.n	2c48 <prvProcessReceivedCommands+0xc>
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
    2ce0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    2ce4:	f043 0301 	orr.w	r3, r3, #1
    2ce8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2cec:	9902      	ldr	r1, [sp, #8]
    2cee:	61a1      	str	r1, [r4, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    2cf0:	b131      	cbz	r1, 2d00 <prvProcessReceivedCommands+0xc4>
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    2cf2:	4603      	mov	r3, r0
    2cf4:	4602      	mov	r2, r0
    2cf6:	4401      	add	r1, r0
    2cf8:	4620      	mov	r0, r4
    2cfa:	4c12      	ldr	r4, [pc, #72]	; (2d44 <prvProcessReceivedCommands+0x108>)
    2cfc:	47a0      	blx	r4
                        break;
    2cfe:	e7a3      	b.n	2c48 <prvProcessReceivedCommands+0xc>
    2d00:	f04f 0380 	mov.w	r3, #128	; 0x80
    2d04:	f383 8811 	msr	BASEPRI, r3
    2d08:	f3bf 8f6f 	isb	sy
    2d0c:	f3bf 8f4f 	dsb	sy
    2d10:	e7fe      	b.n	2d10 <prvProcessReceivedCommands+0xd4>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    2d12:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    2d16:	f013 0f02 	tst.w	r3, #2
    2d1a:	d004      	beq.n	2d26 <prvProcessReceivedCommands+0xea>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    2d1c:	f023 0301 	bic.w	r3, r3, #1
    2d20:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    2d24:	e790      	b.n	2c48 <prvProcessReceivedCommands+0xc>
                                vPortFree( pxTimer );
    2d26:	4620      	mov	r0, r4
    2d28:	4b08      	ldr	r3, [pc, #32]	; (2d4c <prvProcessReceivedCommands+0x110>)
    2d2a:	4798      	blx	r3
    2d2c:	e78c      	b.n	2c48 <prvProcessReceivedCommands+0xc>
    }
    2d2e:	b004      	add	sp, #16
    2d30:	bd70      	pop	{r4, r5, r6, pc}
    2d32:	bf00      	nop
    2d34:	20004da4 	.word	0x20004da4
    2d38:	0000191d 	.word	0x0000191d
    2d3c:	00000da1 	.word	0x00000da1
    2d40:	00002b85 	.word	0x00002b85
    2d44:	00002a9d 	.word	0x00002a9d
    2d48:	00002ae5 	.word	0x00002ae5
    2d4c:	0000126d 	.word	0x0000126d

00002d50 <prvTimerTask>:
    {
    2d50:	b500      	push	{lr}
    2d52:	b083      	sub	sp, #12
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    2d54:	a801      	add	r0, sp, #4
    2d56:	4b04      	ldr	r3, [pc, #16]	; (2d68 <prvTimerTask+0x18>)
    2d58:	4798      	blx	r3
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    2d5a:	9901      	ldr	r1, [sp, #4]
    2d5c:	4b03      	ldr	r3, [pc, #12]	; (2d6c <prvTimerTask+0x1c>)
    2d5e:	4798      	blx	r3
            prvProcessReceivedCommands();
    2d60:	4b03      	ldr	r3, [pc, #12]	; (2d70 <prvTimerTask+0x20>)
    2d62:	4798      	blx	r3
    2d64:	e7f6      	b.n	2d54 <prvTimerTask+0x4>
    2d66:	bf00      	nop
    2d68:	00002a7d 	.word	0x00002a7d
    2d6c:	00002bb9 	.word	0x00002bb9
    2d70:	00002c3d 	.word	0x00002c3d

00002d74 <prvCheckForValidListAndQueue>:
    }
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
    2d74:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d76:	b083      	sub	sp, #12
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
    2d78:	4b10      	ldr	r3, [pc, #64]	; (2dbc <prvCheckForValidListAndQueue+0x48>)
    2d7a:	4798      	blx	r3
        {
            if( xTimerQueue == NULL )
    2d7c:	4b10      	ldr	r3, [pc, #64]	; (2dc0 <prvCheckForValidListAndQueue+0x4c>)
    2d7e:	68db      	ldr	r3, [r3, #12]
    2d80:	b11b      	cbz	r3, 2d8a <prvCheckForValidListAndQueue+0x16>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    2d82:	4b10      	ldr	r3, [pc, #64]	; (2dc4 <prvCheckForValidListAndQueue+0x50>)
    2d84:	4798      	blx	r3
    }
    2d86:	b003      	add	sp, #12
    2d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
                vListInitialise( &xActiveTimerList1 );
    2d8a:	4c0d      	ldr	r4, [pc, #52]	; (2dc0 <prvCheckForValidListAndQueue+0x4c>)
    2d8c:	f104 0610 	add.w	r6, r4, #16
    2d90:	4630      	mov	r0, r6
    2d92:	4f0d      	ldr	r7, [pc, #52]	; (2dc8 <prvCheckForValidListAndQueue+0x54>)
    2d94:	47b8      	blx	r7
                vListInitialise( &xActiveTimerList2 );
    2d96:	f104 0524 	add.w	r5, r4, #36	; 0x24
    2d9a:	4628      	mov	r0, r5
    2d9c:	47b8      	blx	r7
                pxCurrentTimerList = &xActiveTimerList1;
    2d9e:	6026      	str	r6, [r4, #0]
                pxOverflowTimerList = &xActiveTimerList2;
    2da0:	6065      	str	r5, [r4, #4]
                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
    2da2:	2300      	movs	r3, #0
    2da4:	9300      	str	r3, [sp, #0]
    2da6:	f104 0338 	add.w	r3, r4, #56	; 0x38
    2daa:	f104 028c 	add.w	r2, r4, #140	; 0x8c
    2dae:	210c      	movs	r1, #12
    2db0:	2002      	movs	r0, #2
    2db2:	4d06      	ldr	r5, [pc, #24]	; (2dcc <prvCheckForValidListAndQueue+0x58>)
    2db4:	47a8      	blx	r5
    2db6:	60e0      	str	r0, [r4, #12]
    2db8:	e7e3      	b.n	2d82 <prvCheckForValidListAndQueue+0xe>
    2dba:	bf00      	nop
    2dbc:	00000f05 	.word	0x00000f05
    2dc0:	20004da4 	.word	0x20004da4
    2dc4:	00000f49 	.word	0x00000f49
    2dc8:	00000d51 	.word	0x00000d51
    2dcc:	00001629 	.word	0x00001629

00002dd0 <xTimerCreateTimerTask>:
    {
    2dd0:	b510      	push	{r4, lr}
    2dd2:	b088      	sub	sp, #32
        prvCheckForValidListAndQueue();
    2dd4:	4b15      	ldr	r3, [pc, #84]	; (2e2c <xTimerCreateTimerTask+0x5c>)
    2dd6:	4798      	blx	r3
        if( xTimerQueue != NULL )
    2dd8:	4b15      	ldr	r3, [pc, #84]	; (2e30 <xTimerCreateTimerTask+0x60>)
    2dda:	68db      	ldr	r3, [r3, #12]
    2ddc:	b313      	cbz	r3, 2e24 <xTimerCreateTimerTask+0x54>
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
    2dde:	2400      	movs	r4, #0
    2de0:	9405      	str	r4, [sp, #20]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
    2de2:	9406      	str	r4, [sp, #24]
                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &uxTimerTaskStackSize );
    2de4:	aa07      	add	r2, sp, #28
    2de6:	a906      	add	r1, sp, #24
    2de8:	a805      	add	r0, sp, #20
    2dea:	4b12      	ldr	r3, [pc, #72]	; (2e34 <xTimerCreateTimerTask+0x64>)
    2dec:	4798      	blx	r3
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
    2dee:	9b05      	ldr	r3, [sp, #20]
    2df0:	9302      	str	r3, [sp, #8]
    2df2:	9b06      	ldr	r3, [sp, #24]
    2df4:	9301      	str	r3, [sp, #4]
    2df6:	2302      	movs	r3, #2
    2df8:	9300      	str	r3, [sp, #0]
    2dfa:	4623      	mov	r3, r4
    2dfc:	9a07      	ldr	r2, [sp, #28]
    2dfe:	490e      	ldr	r1, [pc, #56]	; (2e38 <xTimerCreateTimerTask+0x68>)
    2e00:	480e      	ldr	r0, [pc, #56]	; (2e3c <xTimerCreateTimerTask+0x6c>)
    2e02:	4c0f      	ldr	r4, [pc, #60]	; (2e40 <xTimerCreateTimerTask+0x70>)
    2e04:	47a0      	blx	r4
    2e06:	4b0a      	ldr	r3, [pc, #40]	; (2e30 <xTimerCreateTimerTask+0x60>)
    2e08:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
                    if( xTimerTaskHandle != NULL )
    2e0c:	b100      	cbz	r0, 2e10 <xTimerCreateTimerTask+0x40>
                        xReturn = pdPASS;
    2e0e:	2001      	movs	r0, #1
        configASSERT( xReturn );
    2e10:	b950      	cbnz	r0, 2e28 <xTimerCreateTimerTask+0x58>
    2e12:	f04f 0380 	mov.w	r3, #128	; 0x80
    2e16:	f383 8811 	msr	BASEPRI, r3
    2e1a:	f3bf 8f6f 	isb	sy
    2e1e:	f3bf 8f4f 	dsb	sy
    2e22:	e7fe      	b.n	2e22 <xTimerCreateTimerTask+0x52>
        BaseType_t xReturn = pdFAIL;
    2e24:	2000      	movs	r0, #0
    2e26:	e7f3      	b.n	2e10 <xTimerCreateTimerTask+0x40>
    }
    2e28:	b008      	add	sp, #32
    2e2a:	bd10      	pop	{r4, pc}
    2e2c:	00002d75 	.word	0x00002d75
    2e30:	20004da4 	.word	0x20004da4
    2e34:	00002a61 	.word	0x00002a61
    2e38:	000041cc 	.word	0x000041cc
    2e3c:	00002d51 	.word	0x00002d51
    2e40:	0000203d 	.word	0x0000203d

00002e44 <usb_task>:
#include "task.h"
#include "semphr.h"
#include "diag_task.h"

void usb_task(void *parameters)
{
    2e44:	b508      	push	{r3, lr}
    (void) parameters;

    for(;;)
    {   
        vTaskDelay(100);
    2e46:	2064      	movs	r0, #100	; 0x64
    2e48:	4b06      	ldr	r3, [pc, #24]	; (2e64 <usb_task+0x20>)
    2e4a:	4798      	blx	r3
        DEBUG_MSG("usb_task %d \r\n", 1);
    2e4c:	4d06      	ldr	r5, [pc, #24]	; (2e68 <usb_task+0x24>)
    2e4e:	2101      	movs	r1, #1
    2e50:	4628      	mov	r0, r5
    2e52:	4c06      	ldr	r4, [pc, #24]	; (2e6c <usb_task+0x28>)
    2e54:	47a0      	blx	r4
		DEBUG_MSG("usb_task %d \r\n", 3);
    2e56:	2103      	movs	r1, #3
    2e58:	4628      	mov	r0, r5
    2e5a:	47a0      	blx	r4
		DEBUG_MSG("usb_task %d \r\n", 7);
    2e5c:	2107      	movs	r1, #7
    2e5e:	4628      	mov	r0, r5
    2e60:	47a0      	blx	r4
    2e62:	e7f0      	b.n	2e46 <usb_task+0x2>
    2e64:	00002399 	.word	0x00002399
    2e68:	000041d4 	.word	0x000041d4
    2e6c:	0000036d 	.word	0x0000036d

00002e70 <__libc_init_array>:
    2e70:	b570      	push	{r4, r5, r6, lr}
    2e72:	4e0d      	ldr	r6, [pc, #52]	; (2ea8 <__libc_init_array+0x38>)
    2e74:	4c0d      	ldr	r4, [pc, #52]	; (2eac <__libc_init_array+0x3c>)
    2e76:	1ba4      	subs	r4, r4, r6
    2e78:	10a4      	asrs	r4, r4, #2
    2e7a:	2500      	movs	r5, #0
    2e7c:	42a5      	cmp	r5, r4
    2e7e:	d109      	bne.n	2e94 <__libc_init_array+0x24>
    2e80:	4e0b      	ldr	r6, [pc, #44]	; (2eb0 <__libc_init_array+0x40>)
    2e82:	4c0c      	ldr	r4, [pc, #48]	; (2eb4 <__libc_init_array+0x44>)
    2e84:	f001 f9fa 	bl	427c <_init>
    2e88:	1ba4      	subs	r4, r4, r6
    2e8a:	10a4      	asrs	r4, r4, #2
    2e8c:	2500      	movs	r5, #0
    2e8e:	42a5      	cmp	r5, r4
    2e90:	d105      	bne.n	2e9e <__libc_init_array+0x2e>
    2e92:	bd70      	pop	{r4, r5, r6, pc}
    2e94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2e98:	4798      	blx	r3
    2e9a:	3501      	adds	r5, #1
    2e9c:	e7ee      	b.n	2e7c <__libc_init_array+0xc>
    2e9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2ea2:	4798      	blx	r3
    2ea4:	3501      	adds	r5, #1
    2ea6:	e7f2      	b.n	2e8e <__libc_init_array+0x1e>
    2ea8:	00004288 	.word	0x00004288
    2eac:	00004288 	.word	0x00004288
    2eb0:	00004288 	.word	0x00004288
    2eb4:	0000428c 	.word	0x0000428c

00002eb8 <memcpy>:
    2eb8:	b510      	push	{r4, lr}
    2eba:	1e43      	subs	r3, r0, #1
    2ebc:	440a      	add	r2, r1
    2ebe:	4291      	cmp	r1, r2
    2ec0:	d100      	bne.n	2ec4 <memcpy+0xc>
    2ec2:	bd10      	pop	{r4, pc}
    2ec4:	f811 4b01 	ldrb.w	r4, [r1], #1
    2ec8:	f803 4f01 	strb.w	r4, [r3, #1]!
    2ecc:	e7f7      	b.n	2ebe <memcpy+0x6>

00002ece <memset>:
    2ece:	4402      	add	r2, r0
    2ed0:	4603      	mov	r3, r0
    2ed2:	4293      	cmp	r3, r2
    2ed4:	d100      	bne.n	2ed8 <memset+0xa>
    2ed6:	4770      	bx	lr
    2ed8:	f803 1b01 	strb.w	r1, [r3], #1
    2edc:	e7f9      	b.n	2ed2 <memset+0x4>
	...

00002ee0 <_puts_r>:
    2ee0:	b570      	push	{r4, r5, r6, lr}
    2ee2:	460e      	mov	r6, r1
    2ee4:	4605      	mov	r5, r0
    2ee6:	b118      	cbz	r0, 2ef0 <_puts_r+0x10>
    2ee8:	6983      	ldr	r3, [r0, #24]
    2eea:	b90b      	cbnz	r3, 2ef0 <_puts_r+0x10>
    2eec:	f000 faee 	bl	34cc <__sinit>
    2ef0:	69ab      	ldr	r3, [r5, #24]
    2ef2:	68ac      	ldr	r4, [r5, #8]
    2ef4:	b913      	cbnz	r3, 2efc <_puts_r+0x1c>
    2ef6:	4628      	mov	r0, r5
    2ef8:	f000 fae8 	bl	34cc <__sinit>
    2efc:	4b23      	ldr	r3, [pc, #140]	; (2f8c <_puts_r+0xac>)
    2efe:	429c      	cmp	r4, r3
    2f00:	d117      	bne.n	2f32 <_puts_r+0x52>
    2f02:	686c      	ldr	r4, [r5, #4]
    2f04:	89a3      	ldrh	r3, [r4, #12]
    2f06:	071b      	lsls	r3, r3, #28
    2f08:	d51d      	bpl.n	2f46 <_puts_r+0x66>
    2f0a:	6923      	ldr	r3, [r4, #16]
    2f0c:	b1db      	cbz	r3, 2f46 <_puts_r+0x66>
    2f0e:	3e01      	subs	r6, #1
    2f10:	68a3      	ldr	r3, [r4, #8]
    2f12:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    2f16:	3b01      	subs	r3, #1
    2f18:	60a3      	str	r3, [r4, #8]
    2f1a:	b9e9      	cbnz	r1, 2f58 <_puts_r+0x78>
    2f1c:	2b00      	cmp	r3, #0
    2f1e:	da2e      	bge.n	2f7e <_puts_r+0x9e>
    2f20:	4622      	mov	r2, r4
    2f22:	210a      	movs	r1, #10
    2f24:	4628      	mov	r0, r5
    2f26:	f000 f91f 	bl	3168 <__swbuf_r>
    2f2a:	3001      	adds	r0, #1
    2f2c:	d011      	beq.n	2f52 <_puts_r+0x72>
    2f2e:	200a      	movs	r0, #10
    2f30:	bd70      	pop	{r4, r5, r6, pc}
    2f32:	4b17      	ldr	r3, [pc, #92]	; (2f90 <_puts_r+0xb0>)
    2f34:	429c      	cmp	r4, r3
    2f36:	d101      	bne.n	2f3c <_puts_r+0x5c>
    2f38:	68ac      	ldr	r4, [r5, #8]
    2f3a:	e7e3      	b.n	2f04 <_puts_r+0x24>
    2f3c:	4b15      	ldr	r3, [pc, #84]	; (2f94 <_puts_r+0xb4>)
    2f3e:	429c      	cmp	r4, r3
    2f40:	bf08      	it	eq
    2f42:	68ec      	ldreq	r4, [r5, #12]
    2f44:	e7de      	b.n	2f04 <_puts_r+0x24>
    2f46:	4621      	mov	r1, r4
    2f48:	4628      	mov	r0, r5
    2f4a:	f000 f95f 	bl	320c <__swsetup_r>
    2f4e:	2800      	cmp	r0, #0
    2f50:	d0dd      	beq.n	2f0e <_puts_r+0x2e>
    2f52:	f04f 30ff 	mov.w	r0, #4294967295
    2f56:	bd70      	pop	{r4, r5, r6, pc}
    2f58:	2b00      	cmp	r3, #0
    2f5a:	da04      	bge.n	2f66 <_puts_r+0x86>
    2f5c:	69a2      	ldr	r2, [r4, #24]
    2f5e:	4293      	cmp	r3, r2
    2f60:	db06      	blt.n	2f70 <_puts_r+0x90>
    2f62:	290a      	cmp	r1, #10
    2f64:	d004      	beq.n	2f70 <_puts_r+0x90>
    2f66:	6823      	ldr	r3, [r4, #0]
    2f68:	1c5a      	adds	r2, r3, #1
    2f6a:	6022      	str	r2, [r4, #0]
    2f6c:	7019      	strb	r1, [r3, #0]
    2f6e:	e7cf      	b.n	2f10 <_puts_r+0x30>
    2f70:	4622      	mov	r2, r4
    2f72:	4628      	mov	r0, r5
    2f74:	f000 f8f8 	bl	3168 <__swbuf_r>
    2f78:	3001      	adds	r0, #1
    2f7a:	d1c9      	bne.n	2f10 <_puts_r+0x30>
    2f7c:	e7e9      	b.n	2f52 <_puts_r+0x72>
    2f7e:	6823      	ldr	r3, [r4, #0]
    2f80:	200a      	movs	r0, #10
    2f82:	1c5a      	adds	r2, r3, #1
    2f84:	6022      	str	r2, [r4, #0]
    2f86:	7018      	strb	r0, [r3, #0]
    2f88:	bd70      	pop	{r4, r5, r6, pc}
    2f8a:	bf00      	nop
    2f8c:	00004208 	.word	0x00004208
    2f90:	00004228 	.word	0x00004228
    2f94:	000041e8 	.word	0x000041e8

00002f98 <puts>:
    2f98:	4b02      	ldr	r3, [pc, #8]	; (2fa4 <puts+0xc>)
    2f9a:	4601      	mov	r1, r0
    2f9c:	6818      	ldr	r0, [r3, #0]
    2f9e:	f7ff bf9f 	b.w	2ee0 <_puts_r>
    2fa2:	bf00      	nop
    2fa4:	2000000c 	.word	0x2000000c

00002fa8 <setbuf>:
    2fa8:	2900      	cmp	r1, #0
    2faa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2fae:	bf0c      	ite	eq
    2fb0:	2202      	moveq	r2, #2
    2fb2:	2200      	movne	r2, #0
    2fb4:	f000 b800 	b.w	2fb8 <setvbuf>

00002fb8 <setvbuf>:
    2fb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    2fbc:	461d      	mov	r5, r3
    2fbe:	4b51      	ldr	r3, [pc, #324]	; (3104 <setvbuf+0x14c>)
    2fc0:	681e      	ldr	r6, [r3, #0]
    2fc2:	4604      	mov	r4, r0
    2fc4:	460f      	mov	r7, r1
    2fc6:	4690      	mov	r8, r2
    2fc8:	b126      	cbz	r6, 2fd4 <setvbuf+0x1c>
    2fca:	69b3      	ldr	r3, [r6, #24]
    2fcc:	b913      	cbnz	r3, 2fd4 <setvbuf+0x1c>
    2fce:	4630      	mov	r0, r6
    2fd0:	f000 fa7c 	bl	34cc <__sinit>
    2fd4:	4b4c      	ldr	r3, [pc, #304]	; (3108 <setvbuf+0x150>)
    2fd6:	429c      	cmp	r4, r3
    2fd8:	d152      	bne.n	3080 <setvbuf+0xc8>
    2fda:	6874      	ldr	r4, [r6, #4]
    2fdc:	f1b8 0f02 	cmp.w	r8, #2
    2fe0:	d006      	beq.n	2ff0 <setvbuf+0x38>
    2fe2:	f1b8 0f01 	cmp.w	r8, #1
    2fe6:	f200 8089 	bhi.w	30fc <setvbuf+0x144>
    2fea:	2d00      	cmp	r5, #0
    2fec:	f2c0 8086 	blt.w	30fc <setvbuf+0x144>
    2ff0:	4621      	mov	r1, r4
    2ff2:	4630      	mov	r0, r6
    2ff4:	f000 fa00 	bl	33f8 <_fflush_r>
    2ff8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2ffa:	b141      	cbz	r1, 300e <setvbuf+0x56>
    2ffc:	f104 0344 	add.w	r3, r4, #68	; 0x44
    3000:	4299      	cmp	r1, r3
    3002:	d002      	beq.n	300a <setvbuf+0x52>
    3004:	4630      	mov	r0, r6
    3006:	f000 fb57 	bl	36b8 <_free_r>
    300a:	2300      	movs	r3, #0
    300c:	6363      	str	r3, [r4, #52]	; 0x34
    300e:	2300      	movs	r3, #0
    3010:	61a3      	str	r3, [r4, #24]
    3012:	6063      	str	r3, [r4, #4]
    3014:	89a3      	ldrh	r3, [r4, #12]
    3016:	061b      	lsls	r3, r3, #24
    3018:	d503      	bpl.n	3022 <setvbuf+0x6a>
    301a:	6921      	ldr	r1, [r4, #16]
    301c:	4630      	mov	r0, r6
    301e:	f000 fb4b 	bl	36b8 <_free_r>
    3022:	89a3      	ldrh	r3, [r4, #12]
    3024:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    3028:	f023 0303 	bic.w	r3, r3, #3
    302c:	f1b8 0f02 	cmp.w	r8, #2
    3030:	81a3      	strh	r3, [r4, #12]
    3032:	d05d      	beq.n	30f0 <setvbuf+0x138>
    3034:	ab01      	add	r3, sp, #4
    3036:	466a      	mov	r2, sp
    3038:	4621      	mov	r1, r4
    303a:	4630      	mov	r0, r6
    303c:	f000 fad0 	bl	35e0 <__swhatbuf_r>
    3040:	89a3      	ldrh	r3, [r4, #12]
    3042:	4318      	orrs	r0, r3
    3044:	81a0      	strh	r0, [r4, #12]
    3046:	bb2d      	cbnz	r5, 3094 <setvbuf+0xdc>
    3048:	9d00      	ldr	r5, [sp, #0]
    304a:	4628      	mov	r0, r5
    304c:	f000 fb2c 	bl	36a8 <malloc>
    3050:	4607      	mov	r7, r0
    3052:	2800      	cmp	r0, #0
    3054:	d14e      	bne.n	30f4 <setvbuf+0x13c>
    3056:	f8dd 9000 	ldr.w	r9, [sp]
    305a:	45a9      	cmp	r9, r5
    305c:	d13c      	bne.n	30d8 <setvbuf+0x120>
    305e:	f04f 30ff 	mov.w	r0, #4294967295
    3062:	89a3      	ldrh	r3, [r4, #12]
    3064:	f043 0302 	orr.w	r3, r3, #2
    3068:	81a3      	strh	r3, [r4, #12]
    306a:	2300      	movs	r3, #0
    306c:	60a3      	str	r3, [r4, #8]
    306e:	f104 0347 	add.w	r3, r4, #71	; 0x47
    3072:	6023      	str	r3, [r4, #0]
    3074:	6123      	str	r3, [r4, #16]
    3076:	2301      	movs	r3, #1
    3078:	6163      	str	r3, [r4, #20]
    307a:	b003      	add	sp, #12
    307c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3080:	4b22      	ldr	r3, [pc, #136]	; (310c <setvbuf+0x154>)
    3082:	429c      	cmp	r4, r3
    3084:	d101      	bne.n	308a <setvbuf+0xd2>
    3086:	68b4      	ldr	r4, [r6, #8]
    3088:	e7a8      	b.n	2fdc <setvbuf+0x24>
    308a:	4b21      	ldr	r3, [pc, #132]	; (3110 <setvbuf+0x158>)
    308c:	429c      	cmp	r4, r3
    308e:	bf08      	it	eq
    3090:	68f4      	ldreq	r4, [r6, #12]
    3092:	e7a3      	b.n	2fdc <setvbuf+0x24>
    3094:	2f00      	cmp	r7, #0
    3096:	d0d8      	beq.n	304a <setvbuf+0x92>
    3098:	69b3      	ldr	r3, [r6, #24]
    309a:	b913      	cbnz	r3, 30a2 <setvbuf+0xea>
    309c:	4630      	mov	r0, r6
    309e:	f000 fa15 	bl	34cc <__sinit>
    30a2:	f1b8 0f01 	cmp.w	r8, #1
    30a6:	bf08      	it	eq
    30a8:	89a3      	ldrheq	r3, [r4, #12]
    30aa:	6027      	str	r7, [r4, #0]
    30ac:	bf04      	itt	eq
    30ae:	f043 0301 	orreq.w	r3, r3, #1
    30b2:	81a3      	strheq	r3, [r4, #12]
    30b4:	89a3      	ldrh	r3, [r4, #12]
    30b6:	6127      	str	r7, [r4, #16]
    30b8:	f013 0008 	ands.w	r0, r3, #8
    30bc:	6165      	str	r5, [r4, #20]
    30be:	d01b      	beq.n	30f8 <setvbuf+0x140>
    30c0:	f013 0001 	ands.w	r0, r3, #1
    30c4:	bf18      	it	ne
    30c6:	426d      	negne	r5, r5
    30c8:	f04f 0300 	mov.w	r3, #0
    30cc:	bf1d      	ittte	ne
    30ce:	60a3      	strne	r3, [r4, #8]
    30d0:	61a5      	strne	r5, [r4, #24]
    30d2:	4618      	movne	r0, r3
    30d4:	60a5      	streq	r5, [r4, #8]
    30d6:	e7d0      	b.n	307a <setvbuf+0xc2>
    30d8:	4648      	mov	r0, r9
    30da:	f000 fae5 	bl	36a8 <malloc>
    30de:	4607      	mov	r7, r0
    30e0:	2800      	cmp	r0, #0
    30e2:	d0bc      	beq.n	305e <setvbuf+0xa6>
    30e4:	89a3      	ldrh	r3, [r4, #12]
    30e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    30ea:	81a3      	strh	r3, [r4, #12]
    30ec:	464d      	mov	r5, r9
    30ee:	e7d3      	b.n	3098 <setvbuf+0xe0>
    30f0:	2000      	movs	r0, #0
    30f2:	e7b6      	b.n	3062 <setvbuf+0xaa>
    30f4:	46a9      	mov	r9, r5
    30f6:	e7f5      	b.n	30e4 <setvbuf+0x12c>
    30f8:	60a0      	str	r0, [r4, #8]
    30fa:	e7be      	b.n	307a <setvbuf+0xc2>
    30fc:	f04f 30ff 	mov.w	r0, #4294967295
    3100:	e7bb      	b.n	307a <setvbuf+0xc2>
    3102:	bf00      	nop
    3104:	2000000c 	.word	0x2000000c
    3108:	00004208 	.word	0x00004208
    310c:	00004228 	.word	0x00004228
    3110:	000041e8 	.word	0x000041e8

00003114 <strlen>:
    3114:	4603      	mov	r3, r0
    3116:	f813 2b01 	ldrb.w	r2, [r3], #1
    311a:	2a00      	cmp	r2, #0
    311c:	d1fb      	bne.n	3116 <strlen+0x2>
    311e:	1a18      	subs	r0, r3, r0
    3120:	3801      	subs	r0, #1
    3122:	4770      	bx	lr

00003124 <_vsiprintf_r>:
    3124:	b510      	push	{r4, lr}
    3126:	b09a      	sub	sp, #104	; 0x68
    3128:	f44f 7402 	mov.w	r4, #520	; 0x208
    312c:	9100      	str	r1, [sp, #0]
    312e:	9104      	str	r1, [sp, #16]
    3130:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    3134:	9102      	str	r1, [sp, #8]
    3136:	9105      	str	r1, [sp, #20]
    3138:	f64f 71ff 	movw	r1, #65535	; 0xffff
    313c:	f8ad 100e 	strh.w	r1, [sp, #14]
    3140:	4669      	mov	r1, sp
    3142:	f8ad 400c 	strh.w	r4, [sp, #12]
    3146:	f000 fbbf 	bl	38c8 <_svfiprintf_r>
    314a:	9b00      	ldr	r3, [sp, #0]
    314c:	2200      	movs	r2, #0
    314e:	701a      	strb	r2, [r3, #0]
    3150:	b01a      	add	sp, #104	; 0x68
    3152:	bd10      	pop	{r4, pc}

00003154 <vsiprintf>:
    3154:	4613      	mov	r3, r2
    3156:	460a      	mov	r2, r1
    3158:	4601      	mov	r1, r0
    315a:	4802      	ldr	r0, [pc, #8]	; (3164 <vsiprintf+0x10>)
    315c:	6800      	ldr	r0, [r0, #0]
    315e:	f7ff bfe1 	b.w	3124 <_vsiprintf_r>
    3162:	bf00      	nop
    3164:	2000000c 	.word	0x2000000c

00003168 <__swbuf_r>:
    3168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    316a:	460e      	mov	r6, r1
    316c:	4614      	mov	r4, r2
    316e:	4605      	mov	r5, r0
    3170:	b118      	cbz	r0, 317a <__swbuf_r+0x12>
    3172:	6983      	ldr	r3, [r0, #24]
    3174:	b90b      	cbnz	r3, 317a <__swbuf_r+0x12>
    3176:	f000 f9a9 	bl	34cc <__sinit>
    317a:	4b21      	ldr	r3, [pc, #132]	; (3200 <__swbuf_r+0x98>)
    317c:	429c      	cmp	r4, r3
    317e:	d12a      	bne.n	31d6 <__swbuf_r+0x6e>
    3180:	686c      	ldr	r4, [r5, #4]
    3182:	69a3      	ldr	r3, [r4, #24]
    3184:	60a3      	str	r3, [r4, #8]
    3186:	89a3      	ldrh	r3, [r4, #12]
    3188:	071a      	lsls	r2, r3, #28
    318a:	d52e      	bpl.n	31ea <__swbuf_r+0x82>
    318c:	6923      	ldr	r3, [r4, #16]
    318e:	b363      	cbz	r3, 31ea <__swbuf_r+0x82>
    3190:	6923      	ldr	r3, [r4, #16]
    3192:	6820      	ldr	r0, [r4, #0]
    3194:	1ac0      	subs	r0, r0, r3
    3196:	6963      	ldr	r3, [r4, #20]
    3198:	b2f6      	uxtb	r6, r6
    319a:	4298      	cmp	r0, r3
    319c:	4637      	mov	r7, r6
    319e:	db04      	blt.n	31aa <__swbuf_r+0x42>
    31a0:	4621      	mov	r1, r4
    31a2:	4628      	mov	r0, r5
    31a4:	f000 f928 	bl	33f8 <_fflush_r>
    31a8:	bb28      	cbnz	r0, 31f6 <__swbuf_r+0x8e>
    31aa:	68a3      	ldr	r3, [r4, #8]
    31ac:	3b01      	subs	r3, #1
    31ae:	60a3      	str	r3, [r4, #8]
    31b0:	6823      	ldr	r3, [r4, #0]
    31b2:	1c5a      	adds	r2, r3, #1
    31b4:	6022      	str	r2, [r4, #0]
    31b6:	701e      	strb	r6, [r3, #0]
    31b8:	6963      	ldr	r3, [r4, #20]
    31ba:	3001      	adds	r0, #1
    31bc:	4298      	cmp	r0, r3
    31be:	d004      	beq.n	31ca <__swbuf_r+0x62>
    31c0:	89a3      	ldrh	r3, [r4, #12]
    31c2:	07db      	lsls	r3, r3, #31
    31c4:	d519      	bpl.n	31fa <__swbuf_r+0x92>
    31c6:	2e0a      	cmp	r6, #10
    31c8:	d117      	bne.n	31fa <__swbuf_r+0x92>
    31ca:	4621      	mov	r1, r4
    31cc:	4628      	mov	r0, r5
    31ce:	f000 f913 	bl	33f8 <_fflush_r>
    31d2:	b190      	cbz	r0, 31fa <__swbuf_r+0x92>
    31d4:	e00f      	b.n	31f6 <__swbuf_r+0x8e>
    31d6:	4b0b      	ldr	r3, [pc, #44]	; (3204 <__swbuf_r+0x9c>)
    31d8:	429c      	cmp	r4, r3
    31da:	d101      	bne.n	31e0 <__swbuf_r+0x78>
    31dc:	68ac      	ldr	r4, [r5, #8]
    31de:	e7d0      	b.n	3182 <__swbuf_r+0x1a>
    31e0:	4b09      	ldr	r3, [pc, #36]	; (3208 <__swbuf_r+0xa0>)
    31e2:	429c      	cmp	r4, r3
    31e4:	bf08      	it	eq
    31e6:	68ec      	ldreq	r4, [r5, #12]
    31e8:	e7cb      	b.n	3182 <__swbuf_r+0x1a>
    31ea:	4621      	mov	r1, r4
    31ec:	4628      	mov	r0, r5
    31ee:	f000 f80d 	bl	320c <__swsetup_r>
    31f2:	2800      	cmp	r0, #0
    31f4:	d0cc      	beq.n	3190 <__swbuf_r+0x28>
    31f6:	f04f 37ff 	mov.w	r7, #4294967295
    31fa:	4638      	mov	r0, r7
    31fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    31fe:	bf00      	nop
    3200:	00004208 	.word	0x00004208
    3204:	00004228 	.word	0x00004228
    3208:	000041e8 	.word	0x000041e8

0000320c <__swsetup_r>:
    320c:	4b32      	ldr	r3, [pc, #200]	; (32d8 <__swsetup_r+0xcc>)
    320e:	b570      	push	{r4, r5, r6, lr}
    3210:	681d      	ldr	r5, [r3, #0]
    3212:	4606      	mov	r6, r0
    3214:	460c      	mov	r4, r1
    3216:	b125      	cbz	r5, 3222 <__swsetup_r+0x16>
    3218:	69ab      	ldr	r3, [r5, #24]
    321a:	b913      	cbnz	r3, 3222 <__swsetup_r+0x16>
    321c:	4628      	mov	r0, r5
    321e:	f000 f955 	bl	34cc <__sinit>
    3222:	4b2e      	ldr	r3, [pc, #184]	; (32dc <__swsetup_r+0xd0>)
    3224:	429c      	cmp	r4, r3
    3226:	d10f      	bne.n	3248 <__swsetup_r+0x3c>
    3228:	686c      	ldr	r4, [r5, #4]
    322a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    322e:	b29a      	uxth	r2, r3
    3230:	0715      	lsls	r5, r2, #28
    3232:	d42c      	bmi.n	328e <__swsetup_r+0x82>
    3234:	06d0      	lsls	r0, r2, #27
    3236:	d411      	bmi.n	325c <__swsetup_r+0x50>
    3238:	2209      	movs	r2, #9
    323a:	6032      	str	r2, [r6, #0]
    323c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3240:	81a3      	strh	r3, [r4, #12]
    3242:	f04f 30ff 	mov.w	r0, #4294967295
    3246:	bd70      	pop	{r4, r5, r6, pc}
    3248:	4b25      	ldr	r3, [pc, #148]	; (32e0 <__swsetup_r+0xd4>)
    324a:	429c      	cmp	r4, r3
    324c:	d101      	bne.n	3252 <__swsetup_r+0x46>
    324e:	68ac      	ldr	r4, [r5, #8]
    3250:	e7eb      	b.n	322a <__swsetup_r+0x1e>
    3252:	4b24      	ldr	r3, [pc, #144]	; (32e4 <__swsetup_r+0xd8>)
    3254:	429c      	cmp	r4, r3
    3256:	bf08      	it	eq
    3258:	68ec      	ldreq	r4, [r5, #12]
    325a:	e7e6      	b.n	322a <__swsetup_r+0x1e>
    325c:	0751      	lsls	r1, r2, #29
    325e:	d512      	bpl.n	3286 <__swsetup_r+0x7a>
    3260:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3262:	b141      	cbz	r1, 3276 <__swsetup_r+0x6a>
    3264:	f104 0344 	add.w	r3, r4, #68	; 0x44
    3268:	4299      	cmp	r1, r3
    326a:	d002      	beq.n	3272 <__swsetup_r+0x66>
    326c:	4630      	mov	r0, r6
    326e:	f000 fa23 	bl	36b8 <_free_r>
    3272:	2300      	movs	r3, #0
    3274:	6363      	str	r3, [r4, #52]	; 0x34
    3276:	89a3      	ldrh	r3, [r4, #12]
    3278:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    327c:	81a3      	strh	r3, [r4, #12]
    327e:	2300      	movs	r3, #0
    3280:	6063      	str	r3, [r4, #4]
    3282:	6923      	ldr	r3, [r4, #16]
    3284:	6023      	str	r3, [r4, #0]
    3286:	89a3      	ldrh	r3, [r4, #12]
    3288:	f043 0308 	orr.w	r3, r3, #8
    328c:	81a3      	strh	r3, [r4, #12]
    328e:	6923      	ldr	r3, [r4, #16]
    3290:	b94b      	cbnz	r3, 32a6 <__swsetup_r+0x9a>
    3292:	89a3      	ldrh	r3, [r4, #12]
    3294:	f403 7320 	and.w	r3, r3, #640	; 0x280
    3298:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    329c:	d003      	beq.n	32a6 <__swsetup_r+0x9a>
    329e:	4621      	mov	r1, r4
    32a0:	4630      	mov	r0, r6
    32a2:	f000 f9c1 	bl	3628 <__smakebuf_r>
    32a6:	89a2      	ldrh	r2, [r4, #12]
    32a8:	f012 0301 	ands.w	r3, r2, #1
    32ac:	d00c      	beq.n	32c8 <__swsetup_r+0xbc>
    32ae:	2300      	movs	r3, #0
    32b0:	60a3      	str	r3, [r4, #8]
    32b2:	6963      	ldr	r3, [r4, #20]
    32b4:	425b      	negs	r3, r3
    32b6:	61a3      	str	r3, [r4, #24]
    32b8:	6923      	ldr	r3, [r4, #16]
    32ba:	b953      	cbnz	r3, 32d2 <__swsetup_r+0xc6>
    32bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    32c0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    32c4:	d1ba      	bne.n	323c <__swsetup_r+0x30>
    32c6:	bd70      	pop	{r4, r5, r6, pc}
    32c8:	0792      	lsls	r2, r2, #30
    32ca:	bf58      	it	pl
    32cc:	6963      	ldrpl	r3, [r4, #20]
    32ce:	60a3      	str	r3, [r4, #8]
    32d0:	e7f2      	b.n	32b8 <__swsetup_r+0xac>
    32d2:	2000      	movs	r0, #0
    32d4:	e7f7      	b.n	32c6 <__swsetup_r+0xba>
    32d6:	bf00      	nop
    32d8:	2000000c 	.word	0x2000000c
    32dc:	00004208 	.word	0x00004208
    32e0:	00004228 	.word	0x00004228
    32e4:	000041e8 	.word	0x000041e8

000032e8 <__sflush_r>:
    32e8:	898a      	ldrh	r2, [r1, #12]
    32ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    32ee:	4605      	mov	r5, r0
    32f0:	0710      	lsls	r0, r2, #28
    32f2:	460c      	mov	r4, r1
    32f4:	d45a      	bmi.n	33ac <__sflush_r+0xc4>
    32f6:	684b      	ldr	r3, [r1, #4]
    32f8:	2b00      	cmp	r3, #0
    32fa:	dc05      	bgt.n	3308 <__sflush_r+0x20>
    32fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    32fe:	2b00      	cmp	r3, #0
    3300:	dc02      	bgt.n	3308 <__sflush_r+0x20>
    3302:	2000      	movs	r0, #0
    3304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3308:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    330a:	2e00      	cmp	r6, #0
    330c:	d0f9      	beq.n	3302 <__sflush_r+0x1a>
    330e:	2300      	movs	r3, #0
    3310:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    3314:	682f      	ldr	r7, [r5, #0]
    3316:	602b      	str	r3, [r5, #0]
    3318:	d033      	beq.n	3382 <__sflush_r+0x9a>
    331a:	6d60      	ldr	r0, [r4, #84]	; 0x54
    331c:	89a3      	ldrh	r3, [r4, #12]
    331e:	075a      	lsls	r2, r3, #29
    3320:	d505      	bpl.n	332e <__sflush_r+0x46>
    3322:	6863      	ldr	r3, [r4, #4]
    3324:	1ac0      	subs	r0, r0, r3
    3326:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3328:	b10b      	cbz	r3, 332e <__sflush_r+0x46>
    332a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    332c:	1ac0      	subs	r0, r0, r3
    332e:	2300      	movs	r3, #0
    3330:	4602      	mov	r2, r0
    3332:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    3334:	6a21      	ldr	r1, [r4, #32]
    3336:	4628      	mov	r0, r5
    3338:	47b0      	blx	r6
    333a:	1c43      	adds	r3, r0, #1
    333c:	89a3      	ldrh	r3, [r4, #12]
    333e:	d106      	bne.n	334e <__sflush_r+0x66>
    3340:	6829      	ldr	r1, [r5, #0]
    3342:	291d      	cmp	r1, #29
    3344:	d84b      	bhi.n	33de <__sflush_r+0xf6>
    3346:	4a2b      	ldr	r2, [pc, #172]	; (33f4 <__sflush_r+0x10c>)
    3348:	40ca      	lsrs	r2, r1
    334a:	07d6      	lsls	r6, r2, #31
    334c:	d547      	bpl.n	33de <__sflush_r+0xf6>
    334e:	2200      	movs	r2, #0
    3350:	6062      	str	r2, [r4, #4]
    3352:	04d9      	lsls	r1, r3, #19
    3354:	6922      	ldr	r2, [r4, #16]
    3356:	6022      	str	r2, [r4, #0]
    3358:	d504      	bpl.n	3364 <__sflush_r+0x7c>
    335a:	1c42      	adds	r2, r0, #1
    335c:	d101      	bne.n	3362 <__sflush_r+0x7a>
    335e:	682b      	ldr	r3, [r5, #0]
    3360:	b903      	cbnz	r3, 3364 <__sflush_r+0x7c>
    3362:	6560      	str	r0, [r4, #84]	; 0x54
    3364:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3366:	602f      	str	r7, [r5, #0]
    3368:	2900      	cmp	r1, #0
    336a:	d0ca      	beq.n	3302 <__sflush_r+0x1a>
    336c:	f104 0344 	add.w	r3, r4, #68	; 0x44
    3370:	4299      	cmp	r1, r3
    3372:	d002      	beq.n	337a <__sflush_r+0x92>
    3374:	4628      	mov	r0, r5
    3376:	f000 f99f 	bl	36b8 <_free_r>
    337a:	2000      	movs	r0, #0
    337c:	6360      	str	r0, [r4, #52]	; 0x34
    337e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3382:	6a21      	ldr	r1, [r4, #32]
    3384:	2301      	movs	r3, #1
    3386:	4628      	mov	r0, r5
    3388:	47b0      	blx	r6
    338a:	1c41      	adds	r1, r0, #1
    338c:	d1c6      	bne.n	331c <__sflush_r+0x34>
    338e:	682b      	ldr	r3, [r5, #0]
    3390:	2b00      	cmp	r3, #0
    3392:	d0c3      	beq.n	331c <__sflush_r+0x34>
    3394:	2b1d      	cmp	r3, #29
    3396:	d001      	beq.n	339c <__sflush_r+0xb4>
    3398:	2b16      	cmp	r3, #22
    339a:	d101      	bne.n	33a0 <__sflush_r+0xb8>
    339c:	602f      	str	r7, [r5, #0]
    339e:	e7b0      	b.n	3302 <__sflush_r+0x1a>
    33a0:	89a3      	ldrh	r3, [r4, #12]
    33a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    33a6:	81a3      	strh	r3, [r4, #12]
    33a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    33ac:	690f      	ldr	r7, [r1, #16]
    33ae:	2f00      	cmp	r7, #0
    33b0:	d0a7      	beq.n	3302 <__sflush_r+0x1a>
    33b2:	0793      	lsls	r3, r2, #30
    33b4:	680e      	ldr	r6, [r1, #0]
    33b6:	bf08      	it	eq
    33b8:	694b      	ldreq	r3, [r1, #20]
    33ba:	600f      	str	r7, [r1, #0]
    33bc:	bf18      	it	ne
    33be:	2300      	movne	r3, #0
    33c0:	eba6 0807 	sub.w	r8, r6, r7
    33c4:	608b      	str	r3, [r1, #8]
    33c6:	f1b8 0f00 	cmp.w	r8, #0
    33ca:	dd9a      	ble.n	3302 <__sflush_r+0x1a>
    33cc:	4643      	mov	r3, r8
    33ce:	463a      	mov	r2, r7
    33d0:	6a21      	ldr	r1, [r4, #32]
    33d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    33d4:	4628      	mov	r0, r5
    33d6:	47b0      	blx	r6
    33d8:	2800      	cmp	r0, #0
    33da:	dc07      	bgt.n	33ec <__sflush_r+0x104>
    33dc:	89a3      	ldrh	r3, [r4, #12]
    33de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    33e2:	81a3      	strh	r3, [r4, #12]
    33e4:	f04f 30ff 	mov.w	r0, #4294967295
    33e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    33ec:	4407      	add	r7, r0
    33ee:	eba8 0800 	sub.w	r8, r8, r0
    33f2:	e7e8      	b.n	33c6 <__sflush_r+0xde>
    33f4:	20400001 	.word	0x20400001

000033f8 <_fflush_r>:
    33f8:	b538      	push	{r3, r4, r5, lr}
    33fa:	690b      	ldr	r3, [r1, #16]
    33fc:	4605      	mov	r5, r0
    33fe:	460c      	mov	r4, r1
    3400:	b1db      	cbz	r3, 343a <_fflush_r+0x42>
    3402:	b118      	cbz	r0, 340c <_fflush_r+0x14>
    3404:	6983      	ldr	r3, [r0, #24]
    3406:	b90b      	cbnz	r3, 340c <_fflush_r+0x14>
    3408:	f000 f860 	bl	34cc <__sinit>
    340c:	4b0c      	ldr	r3, [pc, #48]	; (3440 <_fflush_r+0x48>)
    340e:	429c      	cmp	r4, r3
    3410:	d109      	bne.n	3426 <_fflush_r+0x2e>
    3412:	686c      	ldr	r4, [r5, #4]
    3414:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    3418:	b17b      	cbz	r3, 343a <_fflush_r+0x42>
    341a:	4621      	mov	r1, r4
    341c:	4628      	mov	r0, r5
    341e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3422:	f7ff bf61 	b.w	32e8 <__sflush_r>
    3426:	4b07      	ldr	r3, [pc, #28]	; (3444 <_fflush_r+0x4c>)
    3428:	429c      	cmp	r4, r3
    342a:	d101      	bne.n	3430 <_fflush_r+0x38>
    342c:	68ac      	ldr	r4, [r5, #8]
    342e:	e7f1      	b.n	3414 <_fflush_r+0x1c>
    3430:	4b05      	ldr	r3, [pc, #20]	; (3448 <_fflush_r+0x50>)
    3432:	429c      	cmp	r4, r3
    3434:	bf08      	it	eq
    3436:	68ec      	ldreq	r4, [r5, #12]
    3438:	e7ec      	b.n	3414 <_fflush_r+0x1c>
    343a:	2000      	movs	r0, #0
    343c:	bd38      	pop	{r3, r4, r5, pc}
    343e:	bf00      	nop
    3440:	00004208 	.word	0x00004208
    3444:	00004228 	.word	0x00004228
    3448:	000041e8 	.word	0x000041e8

0000344c <_cleanup_r>:
    344c:	4901      	ldr	r1, [pc, #4]	; (3454 <_cleanup_r+0x8>)
    344e:	f000 b8a9 	b.w	35a4 <_fwalk_reent>
    3452:	bf00      	nop
    3454:	000033f9 	.word	0x000033f9

00003458 <std.isra.0>:
    3458:	2300      	movs	r3, #0
    345a:	b510      	push	{r4, lr}
    345c:	4604      	mov	r4, r0
    345e:	6003      	str	r3, [r0, #0]
    3460:	6043      	str	r3, [r0, #4]
    3462:	6083      	str	r3, [r0, #8]
    3464:	8181      	strh	r1, [r0, #12]
    3466:	6643      	str	r3, [r0, #100]	; 0x64
    3468:	81c2      	strh	r2, [r0, #14]
    346a:	6103      	str	r3, [r0, #16]
    346c:	6143      	str	r3, [r0, #20]
    346e:	6183      	str	r3, [r0, #24]
    3470:	4619      	mov	r1, r3
    3472:	2208      	movs	r2, #8
    3474:	305c      	adds	r0, #92	; 0x5c
    3476:	f7ff fd2a 	bl	2ece <memset>
    347a:	4b05      	ldr	r3, [pc, #20]	; (3490 <std.isra.0+0x38>)
    347c:	6263      	str	r3, [r4, #36]	; 0x24
    347e:	4b05      	ldr	r3, [pc, #20]	; (3494 <std.isra.0+0x3c>)
    3480:	62a3      	str	r3, [r4, #40]	; 0x28
    3482:	4b05      	ldr	r3, [pc, #20]	; (3498 <std.isra.0+0x40>)
    3484:	62e3      	str	r3, [r4, #44]	; 0x2c
    3486:	4b05      	ldr	r3, [pc, #20]	; (349c <std.isra.0+0x44>)
    3488:	6224      	str	r4, [r4, #32]
    348a:	6323      	str	r3, [r4, #48]	; 0x30
    348c:	bd10      	pop	{r4, pc}
    348e:	bf00      	nop
    3490:	00003dfd 	.word	0x00003dfd
    3494:	00003e1f 	.word	0x00003e1f
    3498:	00003e57 	.word	0x00003e57
    349c:	00003e7b 	.word	0x00003e7b

000034a0 <__sfmoreglue>:
    34a0:	b570      	push	{r4, r5, r6, lr}
    34a2:	1e4a      	subs	r2, r1, #1
    34a4:	2568      	movs	r5, #104	; 0x68
    34a6:	4355      	muls	r5, r2
    34a8:	460e      	mov	r6, r1
    34aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
    34ae:	f000 f951 	bl	3754 <_malloc_r>
    34b2:	4604      	mov	r4, r0
    34b4:	b140      	cbz	r0, 34c8 <__sfmoreglue+0x28>
    34b6:	2100      	movs	r1, #0
    34b8:	e880 0042 	stmia.w	r0, {r1, r6}
    34bc:	300c      	adds	r0, #12
    34be:	60a0      	str	r0, [r4, #8]
    34c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
    34c4:	f7ff fd03 	bl	2ece <memset>
    34c8:	4620      	mov	r0, r4
    34ca:	bd70      	pop	{r4, r5, r6, pc}

000034cc <__sinit>:
    34cc:	6983      	ldr	r3, [r0, #24]
    34ce:	b510      	push	{r4, lr}
    34d0:	4604      	mov	r4, r0
    34d2:	bb33      	cbnz	r3, 3522 <__sinit+0x56>
    34d4:	6483      	str	r3, [r0, #72]	; 0x48
    34d6:	64c3      	str	r3, [r0, #76]	; 0x4c
    34d8:	6503      	str	r3, [r0, #80]	; 0x50
    34da:	4b12      	ldr	r3, [pc, #72]	; (3524 <__sinit+0x58>)
    34dc:	4a12      	ldr	r2, [pc, #72]	; (3528 <__sinit+0x5c>)
    34de:	681b      	ldr	r3, [r3, #0]
    34e0:	6282      	str	r2, [r0, #40]	; 0x28
    34e2:	4298      	cmp	r0, r3
    34e4:	bf04      	itt	eq
    34e6:	2301      	moveq	r3, #1
    34e8:	6183      	streq	r3, [r0, #24]
    34ea:	f000 f81f 	bl	352c <__sfp>
    34ee:	6060      	str	r0, [r4, #4]
    34f0:	4620      	mov	r0, r4
    34f2:	f000 f81b 	bl	352c <__sfp>
    34f6:	60a0      	str	r0, [r4, #8]
    34f8:	4620      	mov	r0, r4
    34fa:	f000 f817 	bl	352c <__sfp>
    34fe:	2200      	movs	r2, #0
    3500:	60e0      	str	r0, [r4, #12]
    3502:	2104      	movs	r1, #4
    3504:	6860      	ldr	r0, [r4, #4]
    3506:	f7ff ffa7 	bl	3458 <std.isra.0>
    350a:	2201      	movs	r2, #1
    350c:	2109      	movs	r1, #9
    350e:	68a0      	ldr	r0, [r4, #8]
    3510:	f7ff ffa2 	bl	3458 <std.isra.0>
    3514:	2202      	movs	r2, #2
    3516:	2112      	movs	r1, #18
    3518:	68e0      	ldr	r0, [r4, #12]
    351a:	f7ff ff9d 	bl	3458 <std.isra.0>
    351e:	2301      	movs	r3, #1
    3520:	61a3      	str	r3, [r4, #24]
    3522:	bd10      	pop	{r4, pc}
    3524:	000041e4 	.word	0x000041e4
    3528:	0000344d 	.word	0x0000344d

0000352c <__sfp>:
    352c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    352e:	4b1c      	ldr	r3, [pc, #112]	; (35a0 <__sfp+0x74>)
    3530:	681e      	ldr	r6, [r3, #0]
    3532:	69b3      	ldr	r3, [r6, #24]
    3534:	4607      	mov	r7, r0
    3536:	b913      	cbnz	r3, 353e <__sfp+0x12>
    3538:	4630      	mov	r0, r6
    353a:	f7ff ffc7 	bl	34cc <__sinit>
    353e:	3648      	adds	r6, #72	; 0x48
    3540:	68b4      	ldr	r4, [r6, #8]
    3542:	6873      	ldr	r3, [r6, #4]
    3544:	3b01      	subs	r3, #1
    3546:	d503      	bpl.n	3550 <__sfp+0x24>
    3548:	6833      	ldr	r3, [r6, #0]
    354a:	b133      	cbz	r3, 355a <__sfp+0x2e>
    354c:	6836      	ldr	r6, [r6, #0]
    354e:	e7f7      	b.n	3540 <__sfp+0x14>
    3550:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    3554:	b16d      	cbz	r5, 3572 <__sfp+0x46>
    3556:	3468      	adds	r4, #104	; 0x68
    3558:	e7f4      	b.n	3544 <__sfp+0x18>
    355a:	2104      	movs	r1, #4
    355c:	4638      	mov	r0, r7
    355e:	f7ff ff9f 	bl	34a0 <__sfmoreglue>
    3562:	6030      	str	r0, [r6, #0]
    3564:	2800      	cmp	r0, #0
    3566:	d1f1      	bne.n	354c <__sfp+0x20>
    3568:	230c      	movs	r3, #12
    356a:	603b      	str	r3, [r7, #0]
    356c:	4604      	mov	r4, r0
    356e:	4620      	mov	r0, r4
    3570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3572:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3576:	81e3      	strh	r3, [r4, #14]
    3578:	2301      	movs	r3, #1
    357a:	81a3      	strh	r3, [r4, #12]
    357c:	6665      	str	r5, [r4, #100]	; 0x64
    357e:	6025      	str	r5, [r4, #0]
    3580:	60a5      	str	r5, [r4, #8]
    3582:	6065      	str	r5, [r4, #4]
    3584:	6125      	str	r5, [r4, #16]
    3586:	6165      	str	r5, [r4, #20]
    3588:	61a5      	str	r5, [r4, #24]
    358a:	2208      	movs	r2, #8
    358c:	4629      	mov	r1, r5
    358e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    3592:	f7ff fc9c 	bl	2ece <memset>
    3596:	6365      	str	r5, [r4, #52]	; 0x34
    3598:	63a5      	str	r5, [r4, #56]	; 0x38
    359a:	64a5      	str	r5, [r4, #72]	; 0x48
    359c:	64e5      	str	r5, [r4, #76]	; 0x4c
    359e:	e7e6      	b.n	356e <__sfp+0x42>
    35a0:	000041e4 	.word	0x000041e4

000035a4 <_fwalk_reent>:
    35a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    35a8:	4680      	mov	r8, r0
    35aa:	4689      	mov	r9, r1
    35ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
    35b0:	2600      	movs	r6, #0
    35b2:	b914      	cbnz	r4, 35ba <_fwalk_reent+0x16>
    35b4:	4630      	mov	r0, r6
    35b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    35ba:	68a5      	ldr	r5, [r4, #8]
    35bc:	6867      	ldr	r7, [r4, #4]
    35be:	3f01      	subs	r7, #1
    35c0:	d501      	bpl.n	35c6 <_fwalk_reent+0x22>
    35c2:	6824      	ldr	r4, [r4, #0]
    35c4:	e7f5      	b.n	35b2 <_fwalk_reent+0xe>
    35c6:	89ab      	ldrh	r3, [r5, #12]
    35c8:	2b01      	cmp	r3, #1
    35ca:	d907      	bls.n	35dc <_fwalk_reent+0x38>
    35cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    35d0:	3301      	adds	r3, #1
    35d2:	d003      	beq.n	35dc <_fwalk_reent+0x38>
    35d4:	4629      	mov	r1, r5
    35d6:	4640      	mov	r0, r8
    35d8:	47c8      	blx	r9
    35da:	4306      	orrs	r6, r0
    35dc:	3568      	adds	r5, #104	; 0x68
    35de:	e7ee      	b.n	35be <_fwalk_reent+0x1a>

000035e0 <__swhatbuf_r>:
    35e0:	b570      	push	{r4, r5, r6, lr}
    35e2:	460e      	mov	r6, r1
    35e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    35e8:	2900      	cmp	r1, #0
    35ea:	b090      	sub	sp, #64	; 0x40
    35ec:	4614      	mov	r4, r2
    35ee:	461d      	mov	r5, r3
    35f0:	da07      	bge.n	3602 <__swhatbuf_r+0x22>
    35f2:	2300      	movs	r3, #0
    35f4:	602b      	str	r3, [r5, #0]
    35f6:	89b3      	ldrh	r3, [r6, #12]
    35f8:	061a      	lsls	r2, r3, #24
    35fa:	d410      	bmi.n	361e <__swhatbuf_r+0x3e>
    35fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    3600:	e00e      	b.n	3620 <__swhatbuf_r+0x40>
    3602:	aa01      	add	r2, sp, #4
    3604:	f000 fc60 	bl	3ec8 <_fstat_r>
    3608:	2800      	cmp	r0, #0
    360a:	dbf2      	blt.n	35f2 <__swhatbuf_r+0x12>
    360c:	9a02      	ldr	r2, [sp, #8]
    360e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    3612:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    3616:	425a      	negs	r2, r3
    3618:	415a      	adcs	r2, r3
    361a:	602a      	str	r2, [r5, #0]
    361c:	e7ee      	b.n	35fc <__swhatbuf_r+0x1c>
    361e:	2340      	movs	r3, #64	; 0x40
    3620:	2000      	movs	r0, #0
    3622:	6023      	str	r3, [r4, #0]
    3624:	b010      	add	sp, #64	; 0x40
    3626:	bd70      	pop	{r4, r5, r6, pc}

00003628 <__smakebuf_r>:
    3628:	898b      	ldrh	r3, [r1, #12]
    362a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    362c:	079d      	lsls	r5, r3, #30
    362e:	4606      	mov	r6, r0
    3630:	460c      	mov	r4, r1
    3632:	d507      	bpl.n	3644 <__smakebuf_r+0x1c>
    3634:	f104 0347 	add.w	r3, r4, #71	; 0x47
    3638:	6023      	str	r3, [r4, #0]
    363a:	6123      	str	r3, [r4, #16]
    363c:	2301      	movs	r3, #1
    363e:	6163      	str	r3, [r4, #20]
    3640:	b002      	add	sp, #8
    3642:	bd70      	pop	{r4, r5, r6, pc}
    3644:	ab01      	add	r3, sp, #4
    3646:	466a      	mov	r2, sp
    3648:	f7ff ffca 	bl	35e0 <__swhatbuf_r>
    364c:	9900      	ldr	r1, [sp, #0]
    364e:	4605      	mov	r5, r0
    3650:	4630      	mov	r0, r6
    3652:	f000 f87f 	bl	3754 <_malloc_r>
    3656:	b948      	cbnz	r0, 366c <__smakebuf_r+0x44>
    3658:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    365c:	059a      	lsls	r2, r3, #22
    365e:	d4ef      	bmi.n	3640 <__smakebuf_r+0x18>
    3660:	f023 0303 	bic.w	r3, r3, #3
    3664:	f043 0302 	orr.w	r3, r3, #2
    3668:	81a3      	strh	r3, [r4, #12]
    366a:	e7e3      	b.n	3634 <__smakebuf_r+0xc>
    366c:	4b0d      	ldr	r3, [pc, #52]	; (36a4 <__smakebuf_r+0x7c>)
    366e:	62b3      	str	r3, [r6, #40]	; 0x28
    3670:	89a3      	ldrh	r3, [r4, #12]
    3672:	6020      	str	r0, [r4, #0]
    3674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3678:	81a3      	strh	r3, [r4, #12]
    367a:	9b00      	ldr	r3, [sp, #0]
    367c:	6163      	str	r3, [r4, #20]
    367e:	9b01      	ldr	r3, [sp, #4]
    3680:	6120      	str	r0, [r4, #16]
    3682:	b15b      	cbz	r3, 369c <__smakebuf_r+0x74>
    3684:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    3688:	4630      	mov	r0, r6
    368a:	f000 fc2f 	bl	3eec <_isatty_r>
    368e:	b128      	cbz	r0, 369c <__smakebuf_r+0x74>
    3690:	89a3      	ldrh	r3, [r4, #12]
    3692:	f023 0303 	bic.w	r3, r3, #3
    3696:	f043 0301 	orr.w	r3, r3, #1
    369a:	81a3      	strh	r3, [r4, #12]
    369c:	89a3      	ldrh	r3, [r4, #12]
    369e:	431d      	orrs	r5, r3
    36a0:	81a5      	strh	r5, [r4, #12]
    36a2:	e7cd      	b.n	3640 <__smakebuf_r+0x18>
    36a4:	0000344d 	.word	0x0000344d

000036a8 <malloc>:
    36a8:	4b02      	ldr	r3, [pc, #8]	; (36b4 <malloc+0xc>)
    36aa:	4601      	mov	r1, r0
    36ac:	6818      	ldr	r0, [r3, #0]
    36ae:	f000 b851 	b.w	3754 <_malloc_r>
    36b2:	bf00      	nop
    36b4:	2000000c 	.word	0x2000000c

000036b8 <_free_r>:
    36b8:	b538      	push	{r3, r4, r5, lr}
    36ba:	4605      	mov	r5, r0
    36bc:	2900      	cmp	r1, #0
    36be:	d045      	beq.n	374c <_free_r+0x94>
    36c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
    36c4:	1f0c      	subs	r4, r1, #4
    36c6:	2b00      	cmp	r3, #0
    36c8:	bfb8      	it	lt
    36ca:	18e4      	addlt	r4, r4, r3
    36cc:	f000 fc9a 	bl	4004 <__malloc_lock>
    36d0:	4a1f      	ldr	r2, [pc, #124]	; (3750 <_free_r+0x98>)
    36d2:	6813      	ldr	r3, [r2, #0]
    36d4:	4610      	mov	r0, r2
    36d6:	b933      	cbnz	r3, 36e6 <_free_r+0x2e>
    36d8:	6063      	str	r3, [r4, #4]
    36da:	6014      	str	r4, [r2, #0]
    36dc:	4628      	mov	r0, r5
    36de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    36e2:	f000 bc90 	b.w	4006 <__malloc_unlock>
    36e6:	42a3      	cmp	r3, r4
    36e8:	d90c      	bls.n	3704 <_free_r+0x4c>
    36ea:	6821      	ldr	r1, [r4, #0]
    36ec:	1862      	adds	r2, r4, r1
    36ee:	4293      	cmp	r3, r2
    36f0:	bf04      	itt	eq
    36f2:	681a      	ldreq	r2, [r3, #0]
    36f4:	685b      	ldreq	r3, [r3, #4]
    36f6:	6063      	str	r3, [r4, #4]
    36f8:	bf04      	itt	eq
    36fa:	1852      	addeq	r2, r2, r1
    36fc:	6022      	streq	r2, [r4, #0]
    36fe:	6004      	str	r4, [r0, #0]
    3700:	e7ec      	b.n	36dc <_free_r+0x24>
    3702:	4613      	mov	r3, r2
    3704:	685a      	ldr	r2, [r3, #4]
    3706:	b10a      	cbz	r2, 370c <_free_r+0x54>
    3708:	42a2      	cmp	r2, r4
    370a:	d9fa      	bls.n	3702 <_free_r+0x4a>
    370c:	6819      	ldr	r1, [r3, #0]
    370e:	1858      	adds	r0, r3, r1
    3710:	42a0      	cmp	r0, r4
    3712:	d10b      	bne.n	372c <_free_r+0x74>
    3714:	6820      	ldr	r0, [r4, #0]
    3716:	4401      	add	r1, r0
    3718:	1858      	adds	r0, r3, r1
    371a:	4282      	cmp	r2, r0
    371c:	6019      	str	r1, [r3, #0]
    371e:	d1dd      	bne.n	36dc <_free_r+0x24>
    3720:	6810      	ldr	r0, [r2, #0]
    3722:	6852      	ldr	r2, [r2, #4]
    3724:	605a      	str	r2, [r3, #4]
    3726:	4401      	add	r1, r0
    3728:	6019      	str	r1, [r3, #0]
    372a:	e7d7      	b.n	36dc <_free_r+0x24>
    372c:	d902      	bls.n	3734 <_free_r+0x7c>
    372e:	230c      	movs	r3, #12
    3730:	602b      	str	r3, [r5, #0]
    3732:	e7d3      	b.n	36dc <_free_r+0x24>
    3734:	6820      	ldr	r0, [r4, #0]
    3736:	1821      	adds	r1, r4, r0
    3738:	428a      	cmp	r2, r1
    373a:	bf04      	itt	eq
    373c:	6811      	ldreq	r1, [r2, #0]
    373e:	6852      	ldreq	r2, [r2, #4]
    3740:	6062      	str	r2, [r4, #4]
    3742:	bf04      	itt	eq
    3744:	1809      	addeq	r1, r1, r0
    3746:	6021      	streq	r1, [r4, #0]
    3748:	605c      	str	r4, [r3, #4]
    374a:	e7c7      	b.n	36dc <_free_r+0x24>
    374c:	bd38      	pop	{r3, r4, r5, pc}
    374e:	bf00      	nop
    3750:	20004e4c 	.word	0x20004e4c

00003754 <_malloc_r>:
    3754:	b570      	push	{r4, r5, r6, lr}
    3756:	1ccd      	adds	r5, r1, #3
    3758:	f025 0503 	bic.w	r5, r5, #3
    375c:	3508      	adds	r5, #8
    375e:	2d0c      	cmp	r5, #12
    3760:	bf38      	it	cc
    3762:	250c      	movcc	r5, #12
    3764:	2d00      	cmp	r5, #0
    3766:	4606      	mov	r6, r0
    3768:	db01      	blt.n	376e <_malloc_r+0x1a>
    376a:	42a9      	cmp	r1, r5
    376c:	d903      	bls.n	3776 <_malloc_r+0x22>
    376e:	230c      	movs	r3, #12
    3770:	6033      	str	r3, [r6, #0]
    3772:	2000      	movs	r0, #0
    3774:	bd70      	pop	{r4, r5, r6, pc}
    3776:	f000 fc45 	bl	4004 <__malloc_lock>
    377a:	4a23      	ldr	r2, [pc, #140]	; (3808 <_malloc_r+0xb4>)
    377c:	6814      	ldr	r4, [r2, #0]
    377e:	4621      	mov	r1, r4
    3780:	b991      	cbnz	r1, 37a8 <_malloc_r+0x54>
    3782:	4c22      	ldr	r4, [pc, #136]	; (380c <_malloc_r+0xb8>)
    3784:	6823      	ldr	r3, [r4, #0]
    3786:	b91b      	cbnz	r3, 3790 <_malloc_r+0x3c>
    3788:	4630      	mov	r0, r6
    378a:	f000 fb27 	bl	3ddc <_sbrk_r>
    378e:	6020      	str	r0, [r4, #0]
    3790:	4629      	mov	r1, r5
    3792:	4630      	mov	r0, r6
    3794:	f000 fb22 	bl	3ddc <_sbrk_r>
    3798:	1c43      	adds	r3, r0, #1
    379a:	d126      	bne.n	37ea <_malloc_r+0x96>
    379c:	230c      	movs	r3, #12
    379e:	6033      	str	r3, [r6, #0]
    37a0:	4630      	mov	r0, r6
    37a2:	f000 fc30 	bl	4006 <__malloc_unlock>
    37a6:	e7e4      	b.n	3772 <_malloc_r+0x1e>
    37a8:	680b      	ldr	r3, [r1, #0]
    37aa:	1b5b      	subs	r3, r3, r5
    37ac:	d41a      	bmi.n	37e4 <_malloc_r+0x90>
    37ae:	2b0b      	cmp	r3, #11
    37b0:	d90f      	bls.n	37d2 <_malloc_r+0x7e>
    37b2:	600b      	str	r3, [r1, #0]
    37b4:	50cd      	str	r5, [r1, r3]
    37b6:	18cc      	adds	r4, r1, r3
    37b8:	4630      	mov	r0, r6
    37ba:	f000 fc24 	bl	4006 <__malloc_unlock>
    37be:	f104 000b 	add.w	r0, r4, #11
    37c2:	1d23      	adds	r3, r4, #4
    37c4:	f020 0007 	bic.w	r0, r0, #7
    37c8:	1ac3      	subs	r3, r0, r3
    37ca:	d01b      	beq.n	3804 <_malloc_r+0xb0>
    37cc:	425a      	negs	r2, r3
    37ce:	50e2      	str	r2, [r4, r3]
    37d0:	bd70      	pop	{r4, r5, r6, pc}
    37d2:	428c      	cmp	r4, r1
    37d4:	bf0d      	iteet	eq
    37d6:	6863      	ldreq	r3, [r4, #4]
    37d8:	684b      	ldrne	r3, [r1, #4]
    37da:	6063      	strne	r3, [r4, #4]
    37dc:	6013      	streq	r3, [r2, #0]
    37de:	bf18      	it	ne
    37e0:	460c      	movne	r4, r1
    37e2:	e7e9      	b.n	37b8 <_malloc_r+0x64>
    37e4:	460c      	mov	r4, r1
    37e6:	6849      	ldr	r1, [r1, #4]
    37e8:	e7ca      	b.n	3780 <_malloc_r+0x2c>
    37ea:	1cc4      	adds	r4, r0, #3
    37ec:	f024 0403 	bic.w	r4, r4, #3
    37f0:	42a0      	cmp	r0, r4
    37f2:	d005      	beq.n	3800 <_malloc_r+0xac>
    37f4:	1a21      	subs	r1, r4, r0
    37f6:	4630      	mov	r0, r6
    37f8:	f000 faf0 	bl	3ddc <_sbrk_r>
    37fc:	3001      	adds	r0, #1
    37fe:	d0cd      	beq.n	379c <_malloc_r+0x48>
    3800:	6025      	str	r5, [r4, #0]
    3802:	e7d9      	b.n	37b8 <_malloc_r+0x64>
    3804:	bd70      	pop	{r4, r5, r6, pc}
    3806:	bf00      	nop
    3808:	20004e4c 	.word	0x20004e4c
    380c:	20004e50 	.word	0x20004e50

00003810 <__ssputs_r>:
    3810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3814:	688e      	ldr	r6, [r1, #8]
    3816:	429e      	cmp	r6, r3
    3818:	4682      	mov	sl, r0
    381a:	460c      	mov	r4, r1
    381c:	4691      	mov	r9, r2
    381e:	4698      	mov	r8, r3
    3820:	d835      	bhi.n	388e <__ssputs_r+0x7e>
    3822:	898a      	ldrh	r2, [r1, #12]
    3824:	f412 6f90 	tst.w	r2, #1152	; 0x480
    3828:	d031      	beq.n	388e <__ssputs_r+0x7e>
    382a:	6825      	ldr	r5, [r4, #0]
    382c:	6909      	ldr	r1, [r1, #16]
    382e:	1a6f      	subs	r7, r5, r1
    3830:	6965      	ldr	r5, [r4, #20]
    3832:	2302      	movs	r3, #2
    3834:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    3838:	fb95 f5f3 	sdiv	r5, r5, r3
    383c:	f108 0301 	add.w	r3, r8, #1
    3840:	443b      	add	r3, r7
    3842:	429d      	cmp	r5, r3
    3844:	bf38      	it	cc
    3846:	461d      	movcc	r5, r3
    3848:	0553      	lsls	r3, r2, #21
    384a:	d531      	bpl.n	38b0 <__ssputs_r+0xa0>
    384c:	4629      	mov	r1, r5
    384e:	f7ff ff81 	bl	3754 <_malloc_r>
    3852:	4606      	mov	r6, r0
    3854:	b950      	cbnz	r0, 386c <__ssputs_r+0x5c>
    3856:	230c      	movs	r3, #12
    3858:	f8ca 3000 	str.w	r3, [sl]
    385c:	89a3      	ldrh	r3, [r4, #12]
    385e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3862:	81a3      	strh	r3, [r4, #12]
    3864:	f04f 30ff 	mov.w	r0, #4294967295
    3868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    386c:	463a      	mov	r2, r7
    386e:	6921      	ldr	r1, [r4, #16]
    3870:	f7ff fb22 	bl	2eb8 <memcpy>
    3874:	89a3      	ldrh	r3, [r4, #12]
    3876:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    387a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    387e:	81a3      	strh	r3, [r4, #12]
    3880:	6126      	str	r6, [r4, #16]
    3882:	6165      	str	r5, [r4, #20]
    3884:	443e      	add	r6, r7
    3886:	1bed      	subs	r5, r5, r7
    3888:	6026      	str	r6, [r4, #0]
    388a:	60a5      	str	r5, [r4, #8]
    388c:	4646      	mov	r6, r8
    388e:	4546      	cmp	r6, r8
    3890:	bf28      	it	cs
    3892:	4646      	movcs	r6, r8
    3894:	4632      	mov	r2, r6
    3896:	4649      	mov	r1, r9
    3898:	6820      	ldr	r0, [r4, #0]
    389a:	f000 fb99 	bl	3fd0 <memmove>
    389e:	68a3      	ldr	r3, [r4, #8]
    38a0:	1b9b      	subs	r3, r3, r6
    38a2:	60a3      	str	r3, [r4, #8]
    38a4:	6823      	ldr	r3, [r4, #0]
    38a6:	441e      	add	r6, r3
    38a8:	6026      	str	r6, [r4, #0]
    38aa:	2000      	movs	r0, #0
    38ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    38b0:	462a      	mov	r2, r5
    38b2:	f000 fba9 	bl	4008 <_realloc_r>
    38b6:	4606      	mov	r6, r0
    38b8:	2800      	cmp	r0, #0
    38ba:	d1e1      	bne.n	3880 <__ssputs_r+0x70>
    38bc:	6921      	ldr	r1, [r4, #16]
    38be:	4650      	mov	r0, sl
    38c0:	f7ff fefa 	bl	36b8 <_free_r>
    38c4:	e7c7      	b.n	3856 <__ssputs_r+0x46>
	...

000038c8 <_svfiprintf_r>:
    38c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    38cc:	b09d      	sub	sp, #116	; 0x74
    38ce:	4680      	mov	r8, r0
    38d0:	9303      	str	r3, [sp, #12]
    38d2:	898b      	ldrh	r3, [r1, #12]
    38d4:	061c      	lsls	r4, r3, #24
    38d6:	460d      	mov	r5, r1
    38d8:	4616      	mov	r6, r2
    38da:	d50f      	bpl.n	38fc <_svfiprintf_r+0x34>
    38dc:	690b      	ldr	r3, [r1, #16]
    38de:	b96b      	cbnz	r3, 38fc <_svfiprintf_r+0x34>
    38e0:	2140      	movs	r1, #64	; 0x40
    38e2:	f7ff ff37 	bl	3754 <_malloc_r>
    38e6:	6028      	str	r0, [r5, #0]
    38e8:	6128      	str	r0, [r5, #16]
    38ea:	b928      	cbnz	r0, 38f8 <_svfiprintf_r+0x30>
    38ec:	230c      	movs	r3, #12
    38ee:	f8c8 3000 	str.w	r3, [r8]
    38f2:	f04f 30ff 	mov.w	r0, #4294967295
    38f6:	e0c5      	b.n	3a84 <_svfiprintf_r+0x1bc>
    38f8:	2340      	movs	r3, #64	; 0x40
    38fa:	616b      	str	r3, [r5, #20]
    38fc:	2300      	movs	r3, #0
    38fe:	9309      	str	r3, [sp, #36]	; 0x24
    3900:	2320      	movs	r3, #32
    3902:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    3906:	2330      	movs	r3, #48	; 0x30
    3908:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    390c:	f04f 0b01 	mov.w	fp, #1
    3910:	4637      	mov	r7, r6
    3912:	463c      	mov	r4, r7
    3914:	f814 3b01 	ldrb.w	r3, [r4], #1
    3918:	2b00      	cmp	r3, #0
    391a:	d13c      	bne.n	3996 <_svfiprintf_r+0xce>
    391c:	ebb7 0a06 	subs.w	sl, r7, r6
    3920:	d00b      	beq.n	393a <_svfiprintf_r+0x72>
    3922:	4653      	mov	r3, sl
    3924:	4632      	mov	r2, r6
    3926:	4629      	mov	r1, r5
    3928:	4640      	mov	r0, r8
    392a:	f7ff ff71 	bl	3810 <__ssputs_r>
    392e:	3001      	adds	r0, #1
    3930:	f000 80a3 	beq.w	3a7a <_svfiprintf_r+0x1b2>
    3934:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3936:	4453      	add	r3, sl
    3938:	9309      	str	r3, [sp, #36]	; 0x24
    393a:	783b      	ldrb	r3, [r7, #0]
    393c:	2b00      	cmp	r3, #0
    393e:	f000 809c 	beq.w	3a7a <_svfiprintf_r+0x1b2>
    3942:	2300      	movs	r3, #0
    3944:	f04f 32ff 	mov.w	r2, #4294967295
    3948:	9304      	str	r3, [sp, #16]
    394a:	9307      	str	r3, [sp, #28]
    394c:	9205      	str	r2, [sp, #20]
    394e:	9306      	str	r3, [sp, #24]
    3950:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    3954:	931a      	str	r3, [sp, #104]	; 0x68
    3956:	2205      	movs	r2, #5
    3958:	7821      	ldrb	r1, [r4, #0]
    395a:	4850      	ldr	r0, [pc, #320]	; (3a9c <_svfiprintf_r+0x1d4>)
    395c:	f000 fae8 	bl	3f30 <memchr>
    3960:	1c67      	adds	r7, r4, #1
    3962:	9b04      	ldr	r3, [sp, #16]
    3964:	b9d8      	cbnz	r0, 399e <_svfiprintf_r+0xd6>
    3966:	06d9      	lsls	r1, r3, #27
    3968:	bf44      	itt	mi
    396a:	2220      	movmi	r2, #32
    396c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    3970:	071a      	lsls	r2, r3, #28
    3972:	bf44      	itt	mi
    3974:	222b      	movmi	r2, #43	; 0x2b
    3976:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    397a:	7822      	ldrb	r2, [r4, #0]
    397c:	2a2a      	cmp	r2, #42	; 0x2a
    397e:	d016      	beq.n	39ae <_svfiprintf_r+0xe6>
    3980:	9a07      	ldr	r2, [sp, #28]
    3982:	2100      	movs	r1, #0
    3984:	200a      	movs	r0, #10
    3986:	4627      	mov	r7, r4
    3988:	3401      	adds	r4, #1
    398a:	783b      	ldrb	r3, [r7, #0]
    398c:	3b30      	subs	r3, #48	; 0x30
    398e:	2b09      	cmp	r3, #9
    3990:	d951      	bls.n	3a36 <_svfiprintf_r+0x16e>
    3992:	b1c9      	cbz	r1, 39c8 <_svfiprintf_r+0x100>
    3994:	e011      	b.n	39ba <_svfiprintf_r+0xf2>
    3996:	2b25      	cmp	r3, #37	; 0x25
    3998:	d0c0      	beq.n	391c <_svfiprintf_r+0x54>
    399a:	4627      	mov	r7, r4
    399c:	e7b9      	b.n	3912 <_svfiprintf_r+0x4a>
    399e:	4a3f      	ldr	r2, [pc, #252]	; (3a9c <_svfiprintf_r+0x1d4>)
    39a0:	1a80      	subs	r0, r0, r2
    39a2:	fa0b f000 	lsl.w	r0, fp, r0
    39a6:	4318      	orrs	r0, r3
    39a8:	9004      	str	r0, [sp, #16]
    39aa:	463c      	mov	r4, r7
    39ac:	e7d3      	b.n	3956 <_svfiprintf_r+0x8e>
    39ae:	9a03      	ldr	r2, [sp, #12]
    39b0:	1d11      	adds	r1, r2, #4
    39b2:	6812      	ldr	r2, [r2, #0]
    39b4:	9103      	str	r1, [sp, #12]
    39b6:	2a00      	cmp	r2, #0
    39b8:	db01      	blt.n	39be <_svfiprintf_r+0xf6>
    39ba:	9207      	str	r2, [sp, #28]
    39bc:	e004      	b.n	39c8 <_svfiprintf_r+0x100>
    39be:	4252      	negs	r2, r2
    39c0:	f043 0302 	orr.w	r3, r3, #2
    39c4:	9207      	str	r2, [sp, #28]
    39c6:	9304      	str	r3, [sp, #16]
    39c8:	783b      	ldrb	r3, [r7, #0]
    39ca:	2b2e      	cmp	r3, #46	; 0x2e
    39cc:	d10e      	bne.n	39ec <_svfiprintf_r+0x124>
    39ce:	787b      	ldrb	r3, [r7, #1]
    39d0:	2b2a      	cmp	r3, #42	; 0x2a
    39d2:	f107 0101 	add.w	r1, r7, #1
    39d6:	d132      	bne.n	3a3e <_svfiprintf_r+0x176>
    39d8:	9b03      	ldr	r3, [sp, #12]
    39da:	1d1a      	adds	r2, r3, #4
    39dc:	681b      	ldr	r3, [r3, #0]
    39de:	9203      	str	r2, [sp, #12]
    39e0:	2b00      	cmp	r3, #0
    39e2:	bfb8      	it	lt
    39e4:	f04f 33ff 	movlt.w	r3, #4294967295
    39e8:	3702      	adds	r7, #2
    39ea:	9305      	str	r3, [sp, #20]
    39ec:	4c2c      	ldr	r4, [pc, #176]	; (3aa0 <_svfiprintf_r+0x1d8>)
    39ee:	7839      	ldrb	r1, [r7, #0]
    39f0:	2203      	movs	r2, #3
    39f2:	4620      	mov	r0, r4
    39f4:	f000 fa9c 	bl	3f30 <memchr>
    39f8:	b138      	cbz	r0, 3a0a <_svfiprintf_r+0x142>
    39fa:	2340      	movs	r3, #64	; 0x40
    39fc:	1b00      	subs	r0, r0, r4
    39fe:	fa03 f000 	lsl.w	r0, r3, r0
    3a02:	9b04      	ldr	r3, [sp, #16]
    3a04:	4303      	orrs	r3, r0
    3a06:	9304      	str	r3, [sp, #16]
    3a08:	3701      	adds	r7, #1
    3a0a:	7839      	ldrb	r1, [r7, #0]
    3a0c:	4825      	ldr	r0, [pc, #148]	; (3aa4 <_svfiprintf_r+0x1dc>)
    3a0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    3a12:	2206      	movs	r2, #6
    3a14:	1c7e      	adds	r6, r7, #1
    3a16:	f000 fa8b 	bl	3f30 <memchr>
    3a1a:	2800      	cmp	r0, #0
    3a1c:	d035      	beq.n	3a8a <_svfiprintf_r+0x1c2>
    3a1e:	4b22      	ldr	r3, [pc, #136]	; (3aa8 <_svfiprintf_r+0x1e0>)
    3a20:	b9fb      	cbnz	r3, 3a62 <_svfiprintf_r+0x19a>
    3a22:	9b03      	ldr	r3, [sp, #12]
    3a24:	3307      	adds	r3, #7
    3a26:	f023 0307 	bic.w	r3, r3, #7
    3a2a:	3308      	adds	r3, #8
    3a2c:	9303      	str	r3, [sp, #12]
    3a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3a30:	444b      	add	r3, r9
    3a32:	9309      	str	r3, [sp, #36]	; 0x24
    3a34:	e76c      	b.n	3910 <_svfiprintf_r+0x48>
    3a36:	fb00 3202 	mla	r2, r0, r2, r3
    3a3a:	2101      	movs	r1, #1
    3a3c:	e7a3      	b.n	3986 <_svfiprintf_r+0xbe>
    3a3e:	2300      	movs	r3, #0
    3a40:	9305      	str	r3, [sp, #20]
    3a42:	4618      	mov	r0, r3
    3a44:	240a      	movs	r4, #10
    3a46:	460f      	mov	r7, r1
    3a48:	3101      	adds	r1, #1
    3a4a:	783a      	ldrb	r2, [r7, #0]
    3a4c:	3a30      	subs	r2, #48	; 0x30
    3a4e:	2a09      	cmp	r2, #9
    3a50:	d903      	bls.n	3a5a <_svfiprintf_r+0x192>
    3a52:	2b00      	cmp	r3, #0
    3a54:	d0ca      	beq.n	39ec <_svfiprintf_r+0x124>
    3a56:	9005      	str	r0, [sp, #20]
    3a58:	e7c8      	b.n	39ec <_svfiprintf_r+0x124>
    3a5a:	fb04 2000 	mla	r0, r4, r0, r2
    3a5e:	2301      	movs	r3, #1
    3a60:	e7f1      	b.n	3a46 <_svfiprintf_r+0x17e>
    3a62:	ab03      	add	r3, sp, #12
    3a64:	9300      	str	r3, [sp, #0]
    3a66:	462a      	mov	r2, r5
    3a68:	4b10      	ldr	r3, [pc, #64]	; (3aac <_svfiprintf_r+0x1e4>)
    3a6a:	a904      	add	r1, sp, #16
    3a6c:	4640      	mov	r0, r8
    3a6e:	f3af 8000 	nop.w
    3a72:	f1b0 3fff 	cmp.w	r0, #4294967295
    3a76:	4681      	mov	r9, r0
    3a78:	d1d9      	bne.n	3a2e <_svfiprintf_r+0x166>
    3a7a:	89ab      	ldrh	r3, [r5, #12]
    3a7c:	065b      	lsls	r3, r3, #25
    3a7e:	f53f af38 	bmi.w	38f2 <_svfiprintf_r+0x2a>
    3a82:	9809      	ldr	r0, [sp, #36]	; 0x24
    3a84:	b01d      	add	sp, #116	; 0x74
    3a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3a8a:	ab03      	add	r3, sp, #12
    3a8c:	9300      	str	r3, [sp, #0]
    3a8e:	462a      	mov	r2, r5
    3a90:	4b06      	ldr	r3, [pc, #24]	; (3aac <_svfiprintf_r+0x1e4>)
    3a92:	a904      	add	r1, sp, #16
    3a94:	4640      	mov	r0, r8
    3a96:	f000 f881 	bl	3b9c <_printf_i>
    3a9a:	e7ea      	b.n	3a72 <_svfiprintf_r+0x1aa>
    3a9c:	00004248 	.word	0x00004248
    3aa0:	0000424e 	.word	0x0000424e
    3aa4:	00004252 	.word	0x00004252
    3aa8:	00000000 	.word	0x00000000
    3aac:	00003811 	.word	0x00003811

00003ab0 <_printf_common>:
    3ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3ab4:	4691      	mov	r9, r2
    3ab6:	461f      	mov	r7, r3
    3ab8:	688a      	ldr	r2, [r1, #8]
    3aba:	690b      	ldr	r3, [r1, #16]
    3abc:	f8dd 8020 	ldr.w	r8, [sp, #32]
    3ac0:	4293      	cmp	r3, r2
    3ac2:	bfb8      	it	lt
    3ac4:	4613      	movlt	r3, r2
    3ac6:	f8c9 3000 	str.w	r3, [r9]
    3aca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    3ace:	4606      	mov	r6, r0
    3ad0:	460c      	mov	r4, r1
    3ad2:	b112      	cbz	r2, 3ada <_printf_common+0x2a>
    3ad4:	3301      	adds	r3, #1
    3ad6:	f8c9 3000 	str.w	r3, [r9]
    3ada:	6823      	ldr	r3, [r4, #0]
    3adc:	0699      	lsls	r1, r3, #26
    3ade:	bf42      	ittt	mi
    3ae0:	f8d9 3000 	ldrmi.w	r3, [r9]
    3ae4:	3302      	addmi	r3, #2
    3ae6:	f8c9 3000 	strmi.w	r3, [r9]
    3aea:	6825      	ldr	r5, [r4, #0]
    3aec:	f015 0506 	ands.w	r5, r5, #6
    3af0:	d107      	bne.n	3b02 <_printf_common+0x52>
    3af2:	f104 0a19 	add.w	sl, r4, #25
    3af6:	68e3      	ldr	r3, [r4, #12]
    3af8:	f8d9 2000 	ldr.w	r2, [r9]
    3afc:	1a9b      	subs	r3, r3, r2
    3afe:	429d      	cmp	r5, r3
    3b00:	db29      	blt.n	3b56 <_printf_common+0xa6>
    3b02:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    3b06:	6822      	ldr	r2, [r4, #0]
    3b08:	3300      	adds	r3, #0
    3b0a:	bf18      	it	ne
    3b0c:	2301      	movne	r3, #1
    3b0e:	0692      	lsls	r2, r2, #26
    3b10:	d42e      	bmi.n	3b70 <_printf_common+0xc0>
    3b12:	f104 0243 	add.w	r2, r4, #67	; 0x43
    3b16:	4639      	mov	r1, r7
    3b18:	4630      	mov	r0, r6
    3b1a:	47c0      	blx	r8
    3b1c:	3001      	adds	r0, #1
    3b1e:	d021      	beq.n	3b64 <_printf_common+0xb4>
    3b20:	6823      	ldr	r3, [r4, #0]
    3b22:	68e5      	ldr	r5, [r4, #12]
    3b24:	f8d9 2000 	ldr.w	r2, [r9]
    3b28:	f003 0306 	and.w	r3, r3, #6
    3b2c:	2b04      	cmp	r3, #4
    3b2e:	bf08      	it	eq
    3b30:	1aad      	subeq	r5, r5, r2
    3b32:	68a3      	ldr	r3, [r4, #8]
    3b34:	6922      	ldr	r2, [r4, #16]
    3b36:	bf0c      	ite	eq
    3b38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    3b3c:	2500      	movne	r5, #0
    3b3e:	4293      	cmp	r3, r2
    3b40:	bfc4      	itt	gt
    3b42:	1a9b      	subgt	r3, r3, r2
    3b44:	18ed      	addgt	r5, r5, r3
    3b46:	f04f 0900 	mov.w	r9, #0
    3b4a:	341a      	adds	r4, #26
    3b4c:	454d      	cmp	r5, r9
    3b4e:	d11b      	bne.n	3b88 <_printf_common+0xd8>
    3b50:	2000      	movs	r0, #0
    3b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3b56:	2301      	movs	r3, #1
    3b58:	4652      	mov	r2, sl
    3b5a:	4639      	mov	r1, r7
    3b5c:	4630      	mov	r0, r6
    3b5e:	47c0      	blx	r8
    3b60:	3001      	adds	r0, #1
    3b62:	d103      	bne.n	3b6c <_printf_common+0xbc>
    3b64:	f04f 30ff 	mov.w	r0, #4294967295
    3b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3b6c:	3501      	adds	r5, #1
    3b6e:	e7c2      	b.n	3af6 <_printf_common+0x46>
    3b70:	18e1      	adds	r1, r4, r3
    3b72:	1c5a      	adds	r2, r3, #1
    3b74:	2030      	movs	r0, #48	; 0x30
    3b76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    3b7a:	4422      	add	r2, r4
    3b7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    3b80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    3b84:	3302      	adds	r3, #2
    3b86:	e7c4      	b.n	3b12 <_printf_common+0x62>
    3b88:	2301      	movs	r3, #1
    3b8a:	4622      	mov	r2, r4
    3b8c:	4639      	mov	r1, r7
    3b8e:	4630      	mov	r0, r6
    3b90:	47c0      	blx	r8
    3b92:	3001      	adds	r0, #1
    3b94:	d0e6      	beq.n	3b64 <_printf_common+0xb4>
    3b96:	f109 0901 	add.w	r9, r9, #1
    3b9a:	e7d7      	b.n	3b4c <_printf_common+0x9c>

00003b9c <_printf_i>:
    3b9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3ba0:	4617      	mov	r7, r2
    3ba2:	7e0a      	ldrb	r2, [r1, #24]
    3ba4:	b085      	sub	sp, #20
    3ba6:	2a6e      	cmp	r2, #110	; 0x6e
    3ba8:	4698      	mov	r8, r3
    3baa:	4606      	mov	r6, r0
    3bac:	460c      	mov	r4, r1
    3bae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3bb0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    3bb4:	f000 80bc 	beq.w	3d30 <_printf_i+0x194>
    3bb8:	d81a      	bhi.n	3bf0 <_printf_i+0x54>
    3bba:	2a63      	cmp	r2, #99	; 0x63
    3bbc:	d02e      	beq.n	3c1c <_printf_i+0x80>
    3bbe:	d80a      	bhi.n	3bd6 <_printf_i+0x3a>
    3bc0:	2a00      	cmp	r2, #0
    3bc2:	f000 80c8 	beq.w	3d56 <_printf_i+0x1ba>
    3bc6:	2a58      	cmp	r2, #88	; 0x58
    3bc8:	f000 808a 	beq.w	3ce0 <_printf_i+0x144>
    3bcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
    3bd0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    3bd4:	e02a      	b.n	3c2c <_printf_i+0x90>
    3bd6:	2a64      	cmp	r2, #100	; 0x64
    3bd8:	d001      	beq.n	3bde <_printf_i+0x42>
    3bda:	2a69      	cmp	r2, #105	; 0x69
    3bdc:	d1f6      	bne.n	3bcc <_printf_i+0x30>
    3bde:	6821      	ldr	r1, [r4, #0]
    3be0:	681a      	ldr	r2, [r3, #0]
    3be2:	f011 0f80 	tst.w	r1, #128	; 0x80
    3be6:	d023      	beq.n	3c30 <_printf_i+0x94>
    3be8:	1d11      	adds	r1, r2, #4
    3bea:	6019      	str	r1, [r3, #0]
    3bec:	6813      	ldr	r3, [r2, #0]
    3bee:	e027      	b.n	3c40 <_printf_i+0xa4>
    3bf0:	2a73      	cmp	r2, #115	; 0x73
    3bf2:	f000 80b4 	beq.w	3d5e <_printf_i+0x1c2>
    3bf6:	d808      	bhi.n	3c0a <_printf_i+0x6e>
    3bf8:	2a6f      	cmp	r2, #111	; 0x6f
    3bfa:	d02a      	beq.n	3c52 <_printf_i+0xb6>
    3bfc:	2a70      	cmp	r2, #112	; 0x70
    3bfe:	d1e5      	bne.n	3bcc <_printf_i+0x30>
    3c00:	680a      	ldr	r2, [r1, #0]
    3c02:	f042 0220 	orr.w	r2, r2, #32
    3c06:	600a      	str	r2, [r1, #0]
    3c08:	e003      	b.n	3c12 <_printf_i+0x76>
    3c0a:	2a75      	cmp	r2, #117	; 0x75
    3c0c:	d021      	beq.n	3c52 <_printf_i+0xb6>
    3c0e:	2a78      	cmp	r2, #120	; 0x78
    3c10:	d1dc      	bne.n	3bcc <_printf_i+0x30>
    3c12:	2278      	movs	r2, #120	; 0x78
    3c14:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    3c18:	496e      	ldr	r1, [pc, #440]	; (3dd4 <_printf_i+0x238>)
    3c1a:	e064      	b.n	3ce6 <_printf_i+0x14a>
    3c1c:	681a      	ldr	r2, [r3, #0]
    3c1e:	f101 0542 	add.w	r5, r1, #66	; 0x42
    3c22:	1d11      	adds	r1, r2, #4
    3c24:	6019      	str	r1, [r3, #0]
    3c26:	6813      	ldr	r3, [r2, #0]
    3c28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    3c2c:	2301      	movs	r3, #1
    3c2e:	e0a3      	b.n	3d78 <_printf_i+0x1dc>
    3c30:	f011 0f40 	tst.w	r1, #64	; 0x40
    3c34:	f102 0104 	add.w	r1, r2, #4
    3c38:	6019      	str	r1, [r3, #0]
    3c3a:	d0d7      	beq.n	3bec <_printf_i+0x50>
    3c3c:	f9b2 3000 	ldrsh.w	r3, [r2]
    3c40:	2b00      	cmp	r3, #0
    3c42:	da03      	bge.n	3c4c <_printf_i+0xb0>
    3c44:	222d      	movs	r2, #45	; 0x2d
    3c46:	425b      	negs	r3, r3
    3c48:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    3c4c:	4962      	ldr	r1, [pc, #392]	; (3dd8 <_printf_i+0x23c>)
    3c4e:	220a      	movs	r2, #10
    3c50:	e017      	b.n	3c82 <_printf_i+0xe6>
    3c52:	6820      	ldr	r0, [r4, #0]
    3c54:	6819      	ldr	r1, [r3, #0]
    3c56:	f010 0f80 	tst.w	r0, #128	; 0x80
    3c5a:	d003      	beq.n	3c64 <_printf_i+0xc8>
    3c5c:	1d08      	adds	r0, r1, #4
    3c5e:	6018      	str	r0, [r3, #0]
    3c60:	680b      	ldr	r3, [r1, #0]
    3c62:	e006      	b.n	3c72 <_printf_i+0xd6>
    3c64:	f010 0f40 	tst.w	r0, #64	; 0x40
    3c68:	f101 0004 	add.w	r0, r1, #4
    3c6c:	6018      	str	r0, [r3, #0]
    3c6e:	d0f7      	beq.n	3c60 <_printf_i+0xc4>
    3c70:	880b      	ldrh	r3, [r1, #0]
    3c72:	4959      	ldr	r1, [pc, #356]	; (3dd8 <_printf_i+0x23c>)
    3c74:	2a6f      	cmp	r2, #111	; 0x6f
    3c76:	bf14      	ite	ne
    3c78:	220a      	movne	r2, #10
    3c7a:	2208      	moveq	r2, #8
    3c7c:	2000      	movs	r0, #0
    3c7e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    3c82:	6865      	ldr	r5, [r4, #4]
    3c84:	60a5      	str	r5, [r4, #8]
    3c86:	2d00      	cmp	r5, #0
    3c88:	f2c0 809c 	blt.w	3dc4 <_printf_i+0x228>
    3c8c:	6820      	ldr	r0, [r4, #0]
    3c8e:	f020 0004 	bic.w	r0, r0, #4
    3c92:	6020      	str	r0, [r4, #0]
    3c94:	2b00      	cmp	r3, #0
    3c96:	d13f      	bne.n	3d18 <_printf_i+0x17c>
    3c98:	2d00      	cmp	r5, #0
    3c9a:	f040 8095 	bne.w	3dc8 <_printf_i+0x22c>
    3c9e:	4675      	mov	r5, lr
    3ca0:	2a08      	cmp	r2, #8
    3ca2:	d10b      	bne.n	3cbc <_printf_i+0x120>
    3ca4:	6823      	ldr	r3, [r4, #0]
    3ca6:	07da      	lsls	r2, r3, #31
    3ca8:	d508      	bpl.n	3cbc <_printf_i+0x120>
    3caa:	6923      	ldr	r3, [r4, #16]
    3cac:	6862      	ldr	r2, [r4, #4]
    3cae:	429a      	cmp	r2, r3
    3cb0:	bfde      	ittt	le
    3cb2:	2330      	movle	r3, #48	; 0x30
    3cb4:	f805 3c01 	strble.w	r3, [r5, #-1]
    3cb8:	f105 35ff 	addle.w	r5, r5, #4294967295
    3cbc:	ebae 0305 	sub.w	r3, lr, r5
    3cc0:	6123      	str	r3, [r4, #16]
    3cc2:	f8cd 8000 	str.w	r8, [sp]
    3cc6:	463b      	mov	r3, r7
    3cc8:	aa03      	add	r2, sp, #12
    3cca:	4621      	mov	r1, r4
    3ccc:	4630      	mov	r0, r6
    3cce:	f7ff feef 	bl	3ab0 <_printf_common>
    3cd2:	3001      	adds	r0, #1
    3cd4:	d155      	bne.n	3d82 <_printf_i+0x1e6>
    3cd6:	f04f 30ff 	mov.w	r0, #4294967295
    3cda:	b005      	add	sp, #20
    3cdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3ce0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    3ce4:	493c      	ldr	r1, [pc, #240]	; (3dd8 <_printf_i+0x23c>)
    3ce6:	6822      	ldr	r2, [r4, #0]
    3ce8:	6818      	ldr	r0, [r3, #0]
    3cea:	f012 0f80 	tst.w	r2, #128	; 0x80
    3cee:	f100 0504 	add.w	r5, r0, #4
    3cf2:	601d      	str	r5, [r3, #0]
    3cf4:	d001      	beq.n	3cfa <_printf_i+0x15e>
    3cf6:	6803      	ldr	r3, [r0, #0]
    3cf8:	e002      	b.n	3d00 <_printf_i+0x164>
    3cfa:	0655      	lsls	r5, r2, #25
    3cfc:	d5fb      	bpl.n	3cf6 <_printf_i+0x15a>
    3cfe:	8803      	ldrh	r3, [r0, #0]
    3d00:	07d0      	lsls	r0, r2, #31
    3d02:	bf44      	itt	mi
    3d04:	f042 0220 	orrmi.w	r2, r2, #32
    3d08:	6022      	strmi	r2, [r4, #0]
    3d0a:	b91b      	cbnz	r3, 3d14 <_printf_i+0x178>
    3d0c:	6822      	ldr	r2, [r4, #0]
    3d0e:	f022 0220 	bic.w	r2, r2, #32
    3d12:	6022      	str	r2, [r4, #0]
    3d14:	2210      	movs	r2, #16
    3d16:	e7b1      	b.n	3c7c <_printf_i+0xe0>
    3d18:	4675      	mov	r5, lr
    3d1a:	fbb3 f0f2 	udiv	r0, r3, r2
    3d1e:	fb02 3310 	mls	r3, r2, r0, r3
    3d22:	5ccb      	ldrb	r3, [r1, r3]
    3d24:	f805 3d01 	strb.w	r3, [r5, #-1]!
    3d28:	4603      	mov	r3, r0
    3d2a:	2800      	cmp	r0, #0
    3d2c:	d1f5      	bne.n	3d1a <_printf_i+0x17e>
    3d2e:	e7b7      	b.n	3ca0 <_printf_i+0x104>
    3d30:	6808      	ldr	r0, [r1, #0]
    3d32:	681a      	ldr	r2, [r3, #0]
    3d34:	6949      	ldr	r1, [r1, #20]
    3d36:	f010 0f80 	tst.w	r0, #128	; 0x80
    3d3a:	d004      	beq.n	3d46 <_printf_i+0x1aa>
    3d3c:	1d10      	adds	r0, r2, #4
    3d3e:	6018      	str	r0, [r3, #0]
    3d40:	6813      	ldr	r3, [r2, #0]
    3d42:	6019      	str	r1, [r3, #0]
    3d44:	e007      	b.n	3d56 <_printf_i+0x1ba>
    3d46:	f010 0f40 	tst.w	r0, #64	; 0x40
    3d4a:	f102 0004 	add.w	r0, r2, #4
    3d4e:	6018      	str	r0, [r3, #0]
    3d50:	6813      	ldr	r3, [r2, #0]
    3d52:	d0f6      	beq.n	3d42 <_printf_i+0x1a6>
    3d54:	8019      	strh	r1, [r3, #0]
    3d56:	2300      	movs	r3, #0
    3d58:	6123      	str	r3, [r4, #16]
    3d5a:	4675      	mov	r5, lr
    3d5c:	e7b1      	b.n	3cc2 <_printf_i+0x126>
    3d5e:	681a      	ldr	r2, [r3, #0]
    3d60:	1d11      	adds	r1, r2, #4
    3d62:	6019      	str	r1, [r3, #0]
    3d64:	6815      	ldr	r5, [r2, #0]
    3d66:	6862      	ldr	r2, [r4, #4]
    3d68:	2100      	movs	r1, #0
    3d6a:	4628      	mov	r0, r5
    3d6c:	f000 f8e0 	bl	3f30 <memchr>
    3d70:	b108      	cbz	r0, 3d76 <_printf_i+0x1da>
    3d72:	1b40      	subs	r0, r0, r5
    3d74:	6060      	str	r0, [r4, #4]
    3d76:	6863      	ldr	r3, [r4, #4]
    3d78:	6123      	str	r3, [r4, #16]
    3d7a:	2300      	movs	r3, #0
    3d7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    3d80:	e79f      	b.n	3cc2 <_printf_i+0x126>
    3d82:	6923      	ldr	r3, [r4, #16]
    3d84:	462a      	mov	r2, r5
    3d86:	4639      	mov	r1, r7
    3d88:	4630      	mov	r0, r6
    3d8a:	47c0      	blx	r8
    3d8c:	3001      	adds	r0, #1
    3d8e:	d0a2      	beq.n	3cd6 <_printf_i+0x13a>
    3d90:	6823      	ldr	r3, [r4, #0]
    3d92:	079b      	lsls	r3, r3, #30
    3d94:	d507      	bpl.n	3da6 <_printf_i+0x20a>
    3d96:	2500      	movs	r5, #0
    3d98:	f104 0919 	add.w	r9, r4, #25
    3d9c:	68e3      	ldr	r3, [r4, #12]
    3d9e:	9a03      	ldr	r2, [sp, #12]
    3da0:	1a9b      	subs	r3, r3, r2
    3da2:	429d      	cmp	r5, r3
    3da4:	db05      	blt.n	3db2 <_printf_i+0x216>
    3da6:	68e0      	ldr	r0, [r4, #12]
    3da8:	9b03      	ldr	r3, [sp, #12]
    3daa:	4298      	cmp	r0, r3
    3dac:	bfb8      	it	lt
    3dae:	4618      	movlt	r0, r3
    3db0:	e793      	b.n	3cda <_printf_i+0x13e>
    3db2:	2301      	movs	r3, #1
    3db4:	464a      	mov	r2, r9
    3db6:	4639      	mov	r1, r7
    3db8:	4630      	mov	r0, r6
    3dba:	47c0      	blx	r8
    3dbc:	3001      	adds	r0, #1
    3dbe:	d08a      	beq.n	3cd6 <_printf_i+0x13a>
    3dc0:	3501      	adds	r5, #1
    3dc2:	e7eb      	b.n	3d9c <_printf_i+0x200>
    3dc4:	2b00      	cmp	r3, #0
    3dc6:	d1a7      	bne.n	3d18 <_printf_i+0x17c>
    3dc8:	780b      	ldrb	r3, [r1, #0]
    3dca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    3dce:	f104 0542 	add.w	r5, r4, #66	; 0x42
    3dd2:	e765      	b.n	3ca0 <_printf_i+0x104>
    3dd4:	0000426a 	.word	0x0000426a
    3dd8:	00004259 	.word	0x00004259

00003ddc <_sbrk_r>:
    3ddc:	b538      	push	{r3, r4, r5, lr}
    3dde:	4c06      	ldr	r4, [pc, #24]	; (3df8 <_sbrk_r+0x1c>)
    3de0:	2300      	movs	r3, #0
    3de2:	4605      	mov	r5, r0
    3de4:	4608      	mov	r0, r1
    3de6:	6023      	str	r3, [r4, #0]
    3de8:	f7fc fc7a 	bl	6e0 <_sbrk>
    3dec:	1c43      	adds	r3, r0, #1
    3dee:	d102      	bne.n	3df6 <_sbrk_r+0x1a>
    3df0:	6823      	ldr	r3, [r4, #0]
    3df2:	b103      	cbz	r3, 3df6 <_sbrk_r+0x1a>
    3df4:	602b      	str	r3, [r5, #0]
    3df6:	bd38      	pop	{r3, r4, r5, pc}
    3df8:	20006330 	.word	0x20006330

00003dfc <__sread>:
    3dfc:	b510      	push	{r4, lr}
    3dfe:	460c      	mov	r4, r1
    3e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    3e04:	f000 f926 	bl	4054 <_read_r>
    3e08:	2800      	cmp	r0, #0
    3e0a:	bfab      	itete	ge
    3e0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    3e0e:	89a3      	ldrhlt	r3, [r4, #12]
    3e10:	181b      	addge	r3, r3, r0
    3e12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    3e16:	bfac      	ite	ge
    3e18:	6563      	strge	r3, [r4, #84]	; 0x54
    3e1a:	81a3      	strhlt	r3, [r4, #12]
    3e1c:	bd10      	pop	{r4, pc}

00003e1e <__swrite>:
    3e1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3e22:	461f      	mov	r7, r3
    3e24:	898b      	ldrh	r3, [r1, #12]
    3e26:	05db      	lsls	r3, r3, #23
    3e28:	4605      	mov	r5, r0
    3e2a:	460c      	mov	r4, r1
    3e2c:	4616      	mov	r6, r2
    3e2e:	d505      	bpl.n	3e3c <__swrite+0x1e>
    3e30:	2302      	movs	r3, #2
    3e32:	2200      	movs	r2, #0
    3e34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    3e38:	f000 f868 	bl	3f0c <_lseek_r>
    3e3c:	89a3      	ldrh	r3, [r4, #12]
    3e3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    3e42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    3e46:	81a3      	strh	r3, [r4, #12]
    3e48:	4632      	mov	r2, r6
    3e4a:	463b      	mov	r3, r7
    3e4c:	4628      	mov	r0, r5
    3e4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3e52:	f000 b817 	b.w	3e84 <_write_r>

00003e56 <__sseek>:
    3e56:	b510      	push	{r4, lr}
    3e58:	460c      	mov	r4, r1
    3e5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    3e5e:	f000 f855 	bl	3f0c <_lseek_r>
    3e62:	1c43      	adds	r3, r0, #1
    3e64:	89a3      	ldrh	r3, [r4, #12]
    3e66:	bf15      	itete	ne
    3e68:	6560      	strne	r0, [r4, #84]	; 0x54
    3e6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    3e6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    3e72:	81a3      	strheq	r3, [r4, #12]
    3e74:	bf18      	it	ne
    3e76:	81a3      	strhne	r3, [r4, #12]
    3e78:	bd10      	pop	{r4, pc}

00003e7a <__sclose>:
    3e7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    3e7e:	f000 b813 	b.w	3ea8 <_close_r>
	...

00003e84 <_write_r>:
    3e84:	b538      	push	{r3, r4, r5, lr}
    3e86:	4c07      	ldr	r4, [pc, #28]	; (3ea4 <_write_r+0x20>)
    3e88:	4605      	mov	r5, r0
    3e8a:	4608      	mov	r0, r1
    3e8c:	4611      	mov	r1, r2
    3e8e:	2200      	movs	r2, #0
    3e90:	6022      	str	r2, [r4, #0]
    3e92:	461a      	mov	r2, r3
    3e94:	f7fc ff0e 	bl	cb4 <_write>
    3e98:	1c43      	adds	r3, r0, #1
    3e9a:	d102      	bne.n	3ea2 <_write_r+0x1e>
    3e9c:	6823      	ldr	r3, [r4, #0]
    3e9e:	b103      	cbz	r3, 3ea2 <_write_r+0x1e>
    3ea0:	602b      	str	r3, [r5, #0]
    3ea2:	bd38      	pop	{r3, r4, r5, pc}
    3ea4:	20006330 	.word	0x20006330

00003ea8 <_close_r>:
    3ea8:	b538      	push	{r3, r4, r5, lr}
    3eaa:	4c06      	ldr	r4, [pc, #24]	; (3ec4 <_close_r+0x1c>)
    3eac:	2300      	movs	r3, #0
    3eae:	4605      	mov	r5, r0
    3eb0:	4608      	mov	r0, r1
    3eb2:	6023      	str	r3, [r4, #0]
    3eb4:	f7fc fc26 	bl	704 <_close>
    3eb8:	1c43      	adds	r3, r0, #1
    3eba:	d102      	bne.n	3ec2 <_close_r+0x1a>
    3ebc:	6823      	ldr	r3, [r4, #0]
    3ebe:	b103      	cbz	r3, 3ec2 <_close_r+0x1a>
    3ec0:	602b      	str	r3, [r5, #0]
    3ec2:	bd38      	pop	{r3, r4, r5, pc}
    3ec4:	20006330 	.word	0x20006330

00003ec8 <_fstat_r>:
    3ec8:	b538      	push	{r3, r4, r5, lr}
    3eca:	4c07      	ldr	r4, [pc, #28]	; (3ee8 <_fstat_r+0x20>)
    3ecc:	2300      	movs	r3, #0
    3ece:	4605      	mov	r5, r0
    3ed0:	4608      	mov	r0, r1
    3ed2:	4611      	mov	r1, r2
    3ed4:	6023      	str	r3, [r4, #0]
    3ed6:	f7fc fc18 	bl	70a <_fstat>
    3eda:	1c43      	adds	r3, r0, #1
    3edc:	d102      	bne.n	3ee4 <_fstat_r+0x1c>
    3ede:	6823      	ldr	r3, [r4, #0]
    3ee0:	b103      	cbz	r3, 3ee4 <_fstat_r+0x1c>
    3ee2:	602b      	str	r3, [r5, #0]
    3ee4:	bd38      	pop	{r3, r4, r5, pc}
    3ee6:	bf00      	nop
    3ee8:	20006330 	.word	0x20006330

00003eec <_isatty_r>:
    3eec:	b538      	push	{r3, r4, r5, lr}
    3eee:	4c06      	ldr	r4, [pc, #24]	; (3f08 <_isatty_r+0x1c>)
    3ef0:	2300      	movs	r3, #0
    3ef2:	4605      	mov	r5, r0
    3ef4:	4608      	mov	r0, r1
    3ef6:	6023      	str	r3, [r4, #0]
    3ef8:	f7fc fc0c 	bl	714 <_isatty>
    3efc:	1c43      	adds	r3, r0, #1
    3efe:	d102      	bne.n	3f06 <_isatty_r+0x1a>
    3f00:	6823      	ldr	r3, [r4, #0]
    3f02:	b103      	cbz	r3, 3f06 <_isatty_r+0x1a>
    3f04:	602b      	str	r3, [r5, #0]
    3f06:	bd38      	pop	{r3, r4, r5, pc}
    3f08:	20006330 	.word	0x20006330

00003f0c <_lseek_r>:
    3f0c:	b538      	push	{r3, r4, r5, lr}
    3f0e:	4c07      	ldr	r4, [pc, #28]	; (3f2c <_lseek_r+0x20>)
    3f10:	4605      	mov	r5, r0
    3f12:	4608      	mov	r0, r1
    3f14:	4611      	mov	r1, r2
    3f16:	2200      	movs	r2, #0
    3f18:	6022      	str	r2, [r4, #0]
    3f1a:	461a      	mov	r2, r3
    3f1c:	f7fc fbfc 	bl	718 <_lseek>
    3f20:	1c43      	adds	r3, r0, #1
    3f22:	d102      	bne.n	3f2a <_lseek_r+0x1e>
    3f24:	6823      	ldr	r3, [r4, #0]
    3f26:	b103      	cbz	r3, 3f2a <_lseek_r+0x1e>
    3f28:	602b      	str	r3, [r5, #0]
    3f2a:	bd38      	pop	{r3, r4, r5, pc}
    3f2c:	20006330 	.word	0x20006330

00003f30 <memchr>:
    3f30:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    3f34:	2a10      	cmp	r2, #16
    3f36:	db2b      	blt.n	3f90 <memchr+0x60>
    3f38:	f010 0f07 	tst.w	r0, #7
    3f3c:	d008      	beq.n	3f50 <memchr+0x20>
    3f3e:	f810 3b01 	ldrb.w	r3, [r0], #1
    3f42:	3a01      	subs	r2, #1
    3f44:	428b      	cmp	r3, r1
    3f46:	d02d      	beq.n	3fa4 <memchr+0x74>
    3f48:	f010 0f07 	tst.w	r0, #7
    3f4c:	b342      	cbz	r2, 3fa0 <memchr+0x70>
    3f4e:	d1f6      	bne.n	3f3e <memchr+0xe>
    3f50:	b4f0      	push	{r4, r5, r6, r7}
    3f52:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    3f56:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    3f5a:	f022 0407 	bic.w	r4, r2, #7
    3f5e:	f07f 0700 	mvns.w	r7, #0
    3f62:	2300      	movs	r3, #0
    3f64:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    3f68:	3c08      	subs	r4, #8
    3f6a:	ea85 0501 	eor.w	r5, r5, r1
    3f6e:	ea86 0601 	eor.w	r6, r6, r1
    3f72:	fa85 f547 	uadd8	r5, r5, r7
    3f76:	faa3 f587 	sel	r5, r3, r7
    3f7a:	fa86 f647 	uadd8	r6, r6, r7
    3f7e:	faa5 f687 	sel	r6, r5, r7
    3f82:	b98e      	cbnz	r6, 3fa8 <memchr+0x78>
    3f84:	d1ee      	bne.n	3f64 <memchr+0x34>
    3f86:	bcf0      	pop	{r4, r5, r6, r7}
    3f88:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    3f8c:	f002 0207 	and.w	r2, r2, #7
    3f90:	b132      	cbz	r2, 3fa0 <memchr+0x70>
    3f92:	f810 3b01 	ldrb.w	r3, [r0], #1
    3f96:	3a01      	subs	r2, #1
    3f98:	ea83 0301 	eor.w	r3, r3, r1
    3f9c:	b113      	cbz	r3, 3fa4 <memchr+0x74>
    3f9e:	d1f8      	bne.n	3f92 <memchr+0x62>
    3fa0:	2000      	movs	r0, #0
    3fa2:	4770      	bx	lr
    3fa4:	3801      	subs	r0, #1
    3fa6:	4770      	bx	lr
    3fa8:	2d00      	cmp	r5, #0
    3faa:	bf06      	itte	eq
    3fac:	4635      	moveq	r5, r6
    3fae:	3803      	subeq	r0, #3
    3fb0:	3807      	subne	r0, #7
    3fb2:	f015 0f01 	tst.w	r5, #1
    3fb6:	d107      	bne.n	3fc8 <memchr+0x98>
    3fb8:	3001      	adds	r0, #1
    3fba:	f415 7f80 	tst.w	r5, #256	; 0x100
    3fbe:	bf02      	ittt	eq
    3fc0:	3001      	addeq	r0, #1
    3fc2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    3fc6:	3001      	addeq	r0, #1
    3fc8:	bcf0      	pop	{r4, r5, r6, r7}
    3fca:	3801      	subs	r0, #1
    3fcc:	4770      	bx	lr
    3fce:	bf00      	nop

00003fd0 <memmove>:
    3fd0:	4288      	cmp	r0, r1
    3fd2:	b510      	push	{r4, lr}
    3fd4:	eb01 0302 	add.w	r3, r1, r2
    3fd8:	d803      	bhi.n	3fe2 <memmove+0x12>
    3fda:	1e42      	subs	r2, r0, #1
    3fdc:	4299      	cmp	r1, r3
    3fde:	d10c      	bne.n	3ffa <memmove+0x2a>
    3fe0:	bd10      	pop	{r4, pc}
    3fe2:	4298      	cmp	r0, r3
    3fe4:	d2f9      	bcs.n	3fda <memmove+0xa>
    3fe6:	1881      	adds	r1, r0, r2
    3fe8:	1ad2      	subs	r2, r2, r3
    3fea:	42d3      	cmn	r3, r2
    3fec:	d100      	bne.n	3ff0 <memmove+0x20>
    3fee:	bd10      	pop	{r4, pc}
    3ff0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    3ff4:	f801 4d01 	strb.w	r4, [r1, #-1]!
    3ff8:	e7f7      	b.n	3fea <memmove+0x1a>
    3ffa:	f811 4b01 	ldrb.w	r4, [r1], #1
    3ffe:	f802 4f01 	strb.w	r4, [r2, #1]!
    4002:	e7eb      	b.n	3fdc <memmove+0xc>

00004004 <__malloc_lock>:
    4004:	4770      	bx	lr

00004006 <__malloc_unlock>:
    4006:	4770      	bx	lr

00004008 <_realloc_r>:
    4008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    400a:	4607      	mov	r7, r0
    400c:	4614      	mov	r4, r2
    400e:	460e      	mov	r6, r1
    4010:	b921      	cbnz	r1, 401c <_realloc_r+0x14>
    4012:	4611      	mov	r1, r2
    4014:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4018:	f7ff bb9c 	b.w	3754 <_malloc_r>
    401c:	b922      	cbnz	r2, 4028 <_realloc_r+0x20>
    401e:	f7ff fb4b 	bl	36b8 <_free_r>
    4022:	4625      	mov	r5, r4
    4024:	4628      	mov	r0, r5
    4026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4028:	f000 f826 	bl	4078 <_malloc_usable_size_r>
    402c:	4284      	cmp	r4, r0
    402e:	d90f      	bls.n	4050 <_realloc_r+0x48>
    4030:	4621      	mov	r1, r4
    4032:	4638      	mov	r0, r7
    4034:	f7ff fb8e 	bl	3754 <_malloc_r>
    4038:	4605      	mov	r5, r0
    403a:	2800      	cmp	r0, #0
    403c:	d0f2      	beq.n	4024 <_realloc_r+0x1c>
    403e:	4631      	mov	r1, r6
    4040:	4622      	mov	r2, r4
    4042:	f7fe ff39 	bl	2eb8 <memcpy>
    4046:	4631      	mov	r1, r6
    4048:	4638      	mov	r0, r7
    404a:	f7ff fb35 	bl	36b8 <_free_r>
    404e:	e7e9      	b.n	4024 <_realloc_r+0x1c>
    4050:	4635      	mov	r5, r6
    4052:	e7e7      	b.n	4024 <_realloc_r+0x1c>

00004054 <_read_r>:
    4054:	b538      	push	{r3, r4, r5, lr}
    4056:	4c07      	ldr	r4, [pc, #28]	; (4074 <_read_r+0x20>)
    4058:	4605      	mov	r5, r0
    405a:	4608      	mov	r0, r1
    405c:	4611      	mov	r1, r2
    405e:	2200      	movs	r2, #0
    4060:	6022      	str	r2, [r4, #0]
    4062:	461a      	mov	r2, r3
    4064:	f7fc fe14 	bl	c90 <_read>
    4068:	1c43      	adds	r3, r0, #1
    406a:	d102      	bne.n	4072 <_read_r+0x1e>
    406c:	6823      	ldr	r3, [r4, #0]
    406e:	b103      	cbz	r3, 4072 <_read_r+0x1e>
    4070:	602b      	str	r3, [r5, #0]
    4072:	bd38      	pop	{r3, r4, r5, pc}
    4074:	20006330 	.word	0x20006330

00004078 <_malloc_usable_size_r>:
    4078:	f851 0c04 	ldr.w	r0, [r1, #-4]
    407c:	2800      	cmp	r0, #0
    407e:	f1a0 0004 	sub.w	r0, r0, #4
    4082:	bfbc      	itt	lt
    4084:	580b      	ldrlt	r3, [r1, r0]
    4086:	18c0      	addlt	r0, r0, r3
    4088:	4770      	bx	lr
    408a:	0000      	movs	r0, r0
    408c:	7373694d 	.word	0x7373694d
    4090:	20676e69 	.word	0x20676e69
    4094:	6e756f43 	.word	0x6e756f43
    4098:	764f2074 	.word	0x764f2074
    409c:	0d207265 	.word	0x0d207265
    40a0:	0000000a 	.word	0x0000000a
    40a4:	682f2e2e 	.word	0x682f2e2e
    40a8:	732f6c61 	.word	0x732f6c61
    40ac:	682f6372 	.word	0x682f6372
    40b0:	695f6c61 	.word	0x695f6c61
    40b4:	00632e6f 	.word	0x00632e6f
    40b8:	682f2e2e 	.word	0x682f2e2e
    40bc:	732f6c61 	.word	0x732f6c61
    40c0:	682f6372 	.word	0x682f6372
    40c4:	755f6c61 	.word	0x755f6c61
    40c8:	74726173 	.word	0x74726173
    40cc:	6e79735f 	.word	0x6e79735f
    40d0:	00632e63 	.word	0x00632e63
    40d4:	40003000 	.word	0x40003000
    40d8:	40003400 	.word	0x40003400
    40dc:	41012000 	.word	0x41012000
    40e0:	41014000 	.word	0x41014000
    40e4:	43000000 	.word	0x43000000
    40e8:	43000400 	.word	0x43000400
    40ec:	43000800 	.word	0x43000800
    40f0:	43000c00 	.word	0x43000c00

000040f4 <_usarts>:
    40f4:	00000002 40100004 00030000 00700002     .......@......p.
    4104:	0000d8ad 00000000                       ........

0000410c <_i2cms>:
	...

00004124 <_i2css>:
	...

00004134 <sercomspi_regs>:
	...
    4148:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    4158:	65735f6c 6d6f6372 0000632e 74616c50     l_sercom.c..Plat
    4168:	6d726f66 696e6920 6f642074 000d656e     form init done..
    4178:	67616964 7361745f 0000006b 5f627375     diag_task...usb_
    4188:	6b736174 00000000 7774656e 5f6b726f     task....network_
    4198:	6b736174 00000000 7774656e 5f6b726f     task....network_
    41a8:	6b736174 20642520 00000a0d 09632509     task %d .....%c.
    41b8:	25097525 75250975 00000a0d 454c4449     %u.%u.%u....IDLE
    41c8:	00000000 20726d54 00637653 5f627375     ....Tmr Svc.usb_
    41d8:	6b736174 20642520 00000a0d              task %d ....

000041e4 <_global_impure_ptr>:
    41e4:	20000010                                ... 

000041e8 <__sf_fake_stderr>:
	...

00004208 <__sf_fake_stdin>:
	...

00004228 <__sf_fake_stdout>:
	...
    4248:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    4258:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    4268:	31300046 35343332 39383736 64636261     F.0123456789abcd
    4278:	00006665                                ef..

0000427c <_init>:
    427c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    427e:	bf00      	nop
    4280:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4282:	bc08      	pop	{r3}
    4284:	469e      	mov	lr, r3
    4286:	4770      	bx	lr

00004288 <__init_array_start>:
    4288:	00000289 	.word	0x00000289

0000428c <_fini>:
    428c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    428e:	bf00      	nop
    4290:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4292:	bc08      	pop	{r3}
    4294:	469e      	mov	lr, r3
    4296:	4770      	bx	lr

00004298 <__fini_array_start>:
    4298:	00000265 	.word	0x00000265
